
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Aliment
 * 
 */
export type Aliment = $Result.DefaultSelection<Prisma.$AlimentPayload>
/**
 * Model Alimentation
 * 
 */
export type Alimentation = $Result.DefaultSelection<Prisma.$AlimentationPayload>
/**
 * Model Aliments_indesirable
 * 
 */
export type Aliments_indesirable = $Result.DefaultSelection<Prisma.$Aliments_indesirablePayload>
/**
 * Model Exercices
 * 
 */
export type Exercices = $Result.DefaultSelection<Prisma.$ExercicesPayload>
/**
 * Model Historique_Sante
 * 
 */
export type Historique_Sante = $Result.DefaultSelection<Prisma.$Historique_SantePayload>
/**
 * Model Historique_Sport
 * 
 */
export type Historique_Sport = $Result.DefaultSelection<Prisma.$Historique_SportPayload>
/**
 * Model Objectif_Sante
 * 
 */
export type Objectif_Sante = $Result.DefaultSelection<Prisma.$Objectif_SantePayload>
/**
 * Model Repas
 * 
 */
export type Repas = $Result.DefaultSelection<Prisma.$RepasPayload>
/**
 * Model Sante
 * 
 */
export type Sante = $Result.DefaultSelection<Prisma.$SantePayload>
/**
 * Model Seances
 * 
 */
export type Seances = $Result.DefaultSelection<Prisma.$SeancesPayload>
/**
 * Model Sport
 * 
 */
export type Sport = $Result.DefaultSelection<Prisma.$SportPayload>
/**
 * Model Utilisateur
 * 
 */
export type Utilisateur = $Result.DefaultSelection<Prisma.$UtilisateurPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Aliments
 * const aliments = await prisma.aliment.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Aliments
   * const aliments = await prisma.aliment.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.aliment`: Exposes CRUD operations for the **Aliment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aliments
    * const aliments = await prisma.aliment.findMany()
    * ```
    */
  get aliment(): Prisma.AlimentDelegate<ExtArgs>;

  /**
   * `prisma.alimentation`: Exposes CRUD operations for the **Alimentation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alimentations
    * const alimentations = await prisma.alimentation.findMany()
    * ```
    */
  get alimentation(): Prisma.AlimentationDelegate<ExtArgs>;

  /**
   * `prisma.aliments_indesirable`: Exposes CRUD operations for the **Aliments_indesirable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aliments_indesirables
    * const aliments_indesirables = await prisma.aliments_indesirable.findMany()
    * ```
    */
  get aliments_indesirable(): Prisma.Aliments_indesirableDelegate<ExtArgs>;

  /**
   * `prisma.exercices`: Exposes CRUD operations for the **Exercices** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercices
    * const exercices = await prisma.exercices.findMany()
    * ```
    */
  get exercices(): Prisma.ExercicesDelegate<ExtArgs>;

  /**
   * `prisma.historique_Sante`: Exposes CRUD operations for the **Historique_Sante** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Historique_Santes
    * const historique_Santes = await prisma.historique_Sante.findMany()
    * ```
    */
  get historique_Sante(): Prisma.Historique_SanteDelegate<ExtArgs>;

  /**
   * `prisma.historique_Sport`: Exposes CRUD operations for the **Historique_Sport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Historique_Sports
    * const historique_Sports = await prisma.historique_Sport.findMany()
    * ```
    */
  get historique_Sport(): Prisma.Historique_SportDelegate<ExtArgs>;

  /**
   * `prisma.objectif_Sante`: Exposes CRUD operations for the **Objectif_Sante** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Objectif_Santes
    * const objectif_Santes = await prisma.objectif_Sante.findMany()
    * ```
    */
  get objectif_Sante(): Prisma.Objectif_SanteDelegate<ExtArgs>;

  /**
   * `prisma.repas`: Exposes CRUD operations for the **Repas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Repas
    * const repas = await prisma.repas.findMany()
    * ```
    */
  get repas(): Prisma.RepasDelegate<ExtArgs>;

  /**
   * `prisma.sante`: Exposes CRUD operations for the **Sante** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Santes
    * const santes = await prisma.sante.findMany()
    * ```
    */
  get sante(): Prisma.SanteDelegate<ExtArgs>;

  /**
   * `prisma.seances`: Exposes CRUD operations for the **Seances** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seances
    * const seances = await prisma.seances.findMany()
    * ```
    */
  get seances(): Prisma.SeancesDelegate<ExtArgs>;

  /**
   * `prisma.sport`: Exposes CRUD operations for the **Sport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sports
    * const sports = await prisma.sport.findMany()
    * ```
    */
  get sport(): Prisma.SportDelegate<ExtArgs>;

  /**
   * `prisma.utilisateur`: Exposes CRUD operations for the **Utilisateur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Utilisateurs
    * const utilisateurs = await prisma.utilisateur.findMany()
    * ```
    */
  get utilisateur(): Prisma.UtilisateurDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0
   * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Aliment: 'Aliment',
    Alimentation: 'Alimentation',
    Aliments_indesirable: 'Aliments_indesirable',
    Exercices: 'Exercices',
    Historique_Sante: 'Historique_Sante',
    Historique_Sport: 'Historique_Sport',
    Objectif_Sante: 'Objectif_Sante',
    Repas: 'Repas',
    Sante: 'Sante',
    Seances: 'Seances',
    Sport: 'Sport',
    Utilisateur: 'Utilisateur'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'aliment' | 'alimentation' | 'aliments_indesirable' | 'exercices' | 'historique_Sante' | 'historique_Sport' | 'objectif_Sante' | 'repas' | 'sante' | 'seances' | 'sport' | 'utilisateur'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Aliment: {
        payload: Prisma.$AlimentPayload<ExtArgs>
        fields: Prisma.AlimentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlimentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlimentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentPayload>
          }
          findFirst: {
            args: Prisma.AlimentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlimentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentPayload>
          }
          findMany: {
            args: Prisma.AlimentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentPayload>[]
          }
          create: {
            args: Prisma.AlimentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentPayload>
          }
          createMany: {
            args: Prisma.AlimentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AlimentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentPayload>
          }
          update: {
            args: Prisma.AlimentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentPayload>
          }
          deleteMany: {
            args: Prisma.AlimentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AlimentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AlimentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentPayload>
          }
          aggregate: {
            args: Prisma.AlimentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAliment>
          }
          groupBy: {
            args: Prisma.AlimentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AlimentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlimentCountArgs<ExtArgs>,
            result: $Utils.Optional<AlimentCountAggregateOutputType> | number
          }
        }
      }
      Alimentation: {
        payload: Prisma.$AlimentationPayload<ExtArgs>
        fields: Prisma.AlimentationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlimentationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlimentationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentationPayload>
          }
          findFirst: {
            args: Prisma.AlimentationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlimentationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentationPayload>
          }
          findMany: {
            args: Prisma.AlimentationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentationPayload>[]
          }
          create: {
            args: Prisma.AlimentationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentationPayload>
          }
          createMany: {
            args: Prisma.AlimentationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AlimentationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentationPayload>
          }
          update: {
            args: Prisma.AlimentationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentationPayload>
          }
          deleteMany: {
            args: Prisma.AlimentationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AlimentationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AlimentationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlimentationPayload>
          }
          aggregate: {
            args: Prisma.AlimentationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAlimentation>
          }
          groupBy: {
            args: Prisma.AlimentationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AlimentationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlimentationCountArgs<ExtArgs>,
            result: $Utils.Optional<AlimentationCountAggregateOutputType> | number
          }
        }
      }
      Aliments_indesirable: {
        payload: Prisma.$Aliments_indesirablePayload<ExtArgs>
        fields: Prisma.Aliments_indesirableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Aliments_indesirableFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aliments_indesirablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Aliments_indesirableFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aliments_indesirablePayload>
          }
          findFirst: {
            args: Prisma.Aliments_indesirableFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aliments_indesirablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Aliments_indesirableFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aliments_indesirablePayload>
          }
          findMany: {
            args: Prisma.Aliments_indesirableFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aliments_indesirablePayload>[]
          }
          create: {
            args: Prisma.Aliments_indesirableCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aliments_indesirablePayload>
          }
          createMany: {
            args: Prisma.Aliments_indesirableCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Aliments_indesirableDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aliments_indesirablePayload>
          }
          update: {
            args: Prisma.Aliments_indesirableUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aliments_indesirablePayload>
          }
          deleteMany: {
            args: Prisma.Aliments_indesirableDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Aliments_indesirableUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Aliments_indesirableUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aliments_indesirablePayload>
          }
          aggregate: {
            args: Prisma.Aliments_indesirableAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAliments_indesirable>
          }
          groupBy: {
            args: Prisma.Aliments_indesirableGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Aliments_indesirableGroupByOutputType>[]
          }
          count: {
            args: Prisma.Aliments_indesirableCountArgs<ExtArgs>,
            result: $Utils.Optional<Aliments_indesirableCountAggregateOutputType> | number
          }
        }
      }
      Exercices: {
        payload: Prisma.$ExercicesPayload<ExtArgs>
        fields: Prisma.ExercicesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExercicesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExercicesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicesPayload>
          }
          findFirst: {
            args: Prisma.ExercicesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExercicesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicesPayload>
          }
          findMany: {
            args: Prisma.ExercicesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicesPayload>[]
          }
          create: {
            args: Prisma.ExercicesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicesPayload>
          }
          createMany: {
            args: Prisma.ExercicesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExercicesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicesPayload>
          }
          update: {
            args: Prisma.ExercicesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicesPayload>
          }
          deleteMany: {
            args: Prisma.ExercicesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExercicesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExercicesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicesPayload>
          }
          aggregate: {
            args: Prisma.ExercicesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExercices>
          }
          groupBy: {
            args: Prisma.ExercicesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExercicesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExercicesCountArgs<ExtArgs>,
            result: $Utils.Optional<ExercicesCountAggregateOutputType> | number
          }
        }
      }
      Historique_Sante: {
        payload: Prisma.$Historique_SantePayload<ExtArgs>
        fields: Prisma.Historique_SanteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Historique_SanteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SantePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Historique_SanteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SantePayload>
          }
          findFirst: {
            args: Prisma.Historique_SanteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SantePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Historique_SanteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SantePayload>
          }
          findMany: {
            args: Prisma.Historique_SanteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SantePayload>[]
          }
          create: {
            args: Prisma.Historique_SanteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SantePayload>
          }
          createMany: {
            args: Prisma.Historique_SanteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Historique_SanteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SantePayload>
          }
          update: {
            args: Prisma.Historique_SanteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SantePayload>
          }
          deleteMany: {
            args: Prisma.Historique_SanteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Historique_SanteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Historique_SanteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SantePayload>
          }
          aggregate: {
            args: Prisma.Historique_SanteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHistorique_Sante>
          }
          groupBy: {
            args: Prisma.Historique_SanteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Historique_SanteGroupByOutputType>[]
          }
          count: {
            args: Prisma.Historique_SanteCountArgs<ExtArgs>,
            result: $Utils.Optional<Historique_SanteCountAggregateOutputType> | number
          }
        }
      }
      Historique_Sport: {
        payload: Prisma.$Historique_SportPayload<ExtArgs>
        fields: Prisma.Historique_SportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Historique_SportFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Historique_SportFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SportPayload>
          }
          findFirst: {
            args: Prisma.Historique_SportFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Historique_SportFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SportPayload>
          }
          findMany: {
            args: Prisma.Historique_SportFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SportPayload>[]
          }
          create: {
            args: Prisma.Historique_SportCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SportPayload>
          }
          createMany: {
            args: Prisma.Historique_SportCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Historique_SportDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SportPayload>
          }
          update: {
            args: Prisma.Historique_SportUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SportPayload>
          }
          deleteMany: {
            args: Prisma.Historique_SportDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Historique_SportUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Historique_SportUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Historique_SportPayload>
          }
          aggregate: {
            args: Prisma.Historique_SportAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHistorique_Sport>
          }
          groupBy: {
            args: Prisma.Historique_SportGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Historique_SportGroupByOutputType>[]
          }
          count: {
            args: Prisma.Historique_SportCountArgs<ExtArgs>,
            result: $Utils.Optional<Historique_SportCountAggregateOutputType> | number
          }
        }
      }
      Objectif_Sante: {
        payload: Prisma.$Objectif_SantePayload<ExtArgs>
        fields: Prisma.Objectif_SanteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Objectif_SanteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Objectif_SantePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Objectif_SanteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Objectif_SantePayload>
          }
          findFirst: {
            args: Prisma.Objectif_SanteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Objectif_SantePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Objectif_SanteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Objectif_SantePayload>
          }
          findMany: {
            args: Prisma.Objectif_SanteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Objectif_SantePayload>[]
          }
          create: {
            args: Prisma.Objectif_SanteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Objectif_SantePayload>
          }
          createMany: {
            args: Prisma.Objectif_SanteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Objectif_SanteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Objectif_SantePayload>
          }
          update: {
            args: Prisma.Objectif_SanteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Objectif_SantePayload>
          }
          deleteMany: {
            args: Prisma.Objectif_SanteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Objectif_SanteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Objectif_SanteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Objectif_SantePayload>
          }
          aggregate: {
            args: Prisma.Objectif_SanteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateObjectif_Sante>
          }
          groupBy: {
            args: Prisma.Objectif_SanteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Objectif_SanteGroupByOutputType>[]
          }
          count: {
            args: Prisma.Objectif_SanteCountArgs<ExtArgs>,
            result: $Utils.Optional<Objectif_SanteCountAggregateOutputType> | number
          }
        }
      }
      Repas: {
        payload: Prisma.$RepasPayload<ExtArgs>
        fields: Prisma.RepasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RepasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RepasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepasPayload>
          }
          findFirst: {
            args: Prisma.RepasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RepasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepasPayload>
          }
          findMany: {
            args: Prisma.RepasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepasPayload>[]
          }
          create: {
            args: Prisma.RepasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepasPayload>
          }
          createMany: {
            args: Prisma.RepasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RepasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepasPayload>
          }
          update: {
            args: Prisma.RepasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepasPayload>
          }
          deleteMany: {
            args: Prisma.RepasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RepasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RepasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepasPayload>
          }
          aggregate: {
            args: Prisma.RepasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRepas>
          }
          groupBy: {
            args: Prisma.RepasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RepasGroupByOutputType>[]
          }
          count: {
            args: Prisma.RepasCountArgs<ExtArgs>,
            result: $Utils.Optional<RepasCountAggregateOutputType> | number
          }
        }
      }
      Sante: {
        payload: Prisma.$SantePayload<ExtArgs>
        fields: Prisma.SanteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SanteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SantePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SanteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SantePayload>
          }
          findFirst: {
            args: Prisma.SanteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SantePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SanteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SantePayload>
          }
          findMany: {
            args: Prisma.SanteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SantePayload>[]
          }
          create: {
            args: Prisma.SanteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SantePayload>
          }
          createMany: {
            args: Prisma.SanteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SanteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SantePayload>
          }
          update: {
            args: Prisma.SanteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SantePayload>
          }
          deleteMany: {
            args: Prisma.SanteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SanteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SanteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SantePayload>
          }
          aggregate: {
            args: Prisma.SanteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSante>
          }
          groupBy: {
            args: Prisma.SanteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SanteGroupByOutputType>[]
          }
          count: {
            args: Prisma.SanteCountArgs<ExtArgs>,
            result: $Utils.Optional<SanteCountAggregateOutputType> | number
          }
        }
      }
      Seances: {
        payload: Prisma.$SeancesPayload<ExtArgs>
        fields: Prisma.SeancesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeancesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeancesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeancesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeancesPayload>
          }
          findFirst: {
            args: Prisma.SeancesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeancesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeancesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeancesPayload>
          }
          findMany: {
            args: Prisma.SeancesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeancesPayload>[]
          }
          create: {
            args: Prisma.SeancesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeancesPayload>
          }
          createMany: {
            args: Prisma.SeancesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SeancesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeancesPayload>
          }
          update: {
            args: Prisma.SeancesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeancesPayload>
          }
          deleteMany: {
            args: Prisma.SeancesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SeancesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SeancesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeancesPayload>
          }
          aggregate: {
            args: Prisma.SeancesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSeances>
          }
          groupBy: {
            args: Prisma.SeancesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SeancesGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeancesCountArgs<ExtArgs>,
            result: $Utils.Optional<SeancesCountAggregateOutputType> | number
          }
        }
      }
      Sport: {
        payload: Prisma.$SportPayload<ExtArgs>
        fields: Prisma.SportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SportFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SportFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          findFirst: {
            args: Prisma.SportFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SportFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          findMany: {
            args: Prisma.SportFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SportPayload>[]
          }
          create: {
            args: Prisma.SportCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          createMany: {
            args: Prisma.SportCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SportDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          update: {
            args: Prisma.SportUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          deleteMany: {
            args: Prisma.SportDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SportUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SportUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          aggregate: {
            args: Prisma.SportAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSport>
          }
          groupBy: {
            args: Prisma.SportGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SportGroupByOutputType>[]
          }
          count: {
            args: Prisma.SportCountArgs<ExtArgs>,
            result: $Utils.Optional<SportCountAggregateOutputType> | number
          }
        }
      }
      Utilisateur: {
        payload: Prisma.$UtilisateurPayload<ExtArgs>
        fields: Prisma.UtilisateurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UtilisateurFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UtilisateurFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findFirst: {
            args: Prisma.UtilisateurFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UtilisateurFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findMany: {
            args: Prisma.UtilisateurFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>[]
          }
          create: {
            args: Prisma.UtilisateurCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          createMany: {
            args: Prisma.UtilisateurCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UtilisateurDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          update: {
            args: Prisma.UtilisateurUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          deleteMany: {
            args: Prisma.UtilisateurDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UtilisateurUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UtilisateurUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          aggregate: {
            args: Prisma.UtilisateurAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUtilisateur>
          }
          groupBy: {
            args: Prisma.UtilisateurGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UtilisateurGroupByOutputType>[]
          }
          count: {
            args: Prisma.UtilisateurCountArgs<ExtArgs>,
            result: $Utils.Optional<UtilisateurCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AlimentCountOutputType
   */

  export type AlimentCountOutputType = {
    Aliments_indesirable: number
    Repas_Repas_Aliment_idToAliment: number
  }

  export type AlimentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Aliments_indesirable?: boolean | AlimentCountOutputTypeCountAliments_indesirableArgs
    Repas_Repas_Aliment_idToAliment?: boolean | AlimentCountOutputTypeCountRepas_Repas_Aliment_idToAlimentArgs
  }

  // Custom InputTypes

  /**
   * AlimentCountOutputType without action
   */
  export type AlimentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlimentCountOutputType
     */
    select?: AlimentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AlimentCountOutputType without action
   */
  export type AlimentCountOutputTypeCountAliments_indesirableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Aliments_indesirableWhereInput
  }


  /**
   * AlimentCountOutputType without action
   */
  export type AlimentCountOutputTypeCountRepas_Repas_Aliment_idToAlimentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepasWhereInput
  }



  /**
   * Count Type AlimentationCountOutputType
   */

  export type AlimentationCountOutputType = {
    Repas: number
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation: number
  }

  export type AlimentationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Repas?: boolean | AlimentationCountOutputTypeCountRepasArgs
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: boolean | AlimentationCountOutputTypeCountUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationArgs
  }

  // Custom InputTypes

  /**
   * AlimentationCountOutputType without action
   */
  export type AlimentationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlimentationCountOutputType
     */
    select?: AlimentationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AlimentationCountOutputType without action
   */
  export type AlimentationCountOutputTypeCountRepasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepasWhereInput
  }


  /**
   * AlimentationCountOutputType without action
   */
  export type AlimentationCountOutputTypeCountUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UtilisateurWhereInput
  }



  /**
   * Count Type ExercicesCountOutputType
   */

  export type ExercicesCountOutputType = {
    Historique_Sport: number
    Seances_Seances_Exercice1_idToExercices: number
    Seances_Seances_Exercice2_idToExercices: number
    Seances_Seances_Exercice3_idToExercices: number
    Seances_Seances_Exercice4_idToExercices: number
  }

  export type ExercicesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Historique_Sport?: boolean | ExercicesCountOutputTypeCountHistorique_SportArgs
    Seances_Seances_Exercice1_idToExercices?: boolean | ExercicesCountOutputTypeCountSeances_Seances_Exercice1_idToExercicesArgs
    Seances_Seances_Exercice2_idToExercices?: boolean | ExercicesCountOutputTypeCountSeances_Seances_Exercice2_idToExercicesArgs
    Seances_Seances_Exercice3_idToExercices?: boolean | ExercicesCountOutputTypeCountSeances_Seances_Exercice3_idToExercicesArgs
    Seances_Seances_Exercice4_idToExercices?: boolean | ExercicesCountOutputTypeCountSeances_Seances_Exercice4_idToExercicesArgs
  }

  // Custom InputTypes

  /**
   * ExercicesCountOutputType without action
   */
  export type ExercicesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExercicesCountOutputType
     */
    select?: ExercicesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ExercicesCountOutputType without action
   */
  export type ExercicesCountOutputTypeCountHistorique_SportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Historique_SportWhereInput
  }


  /**
   * ExercicesCountOutputType without action
   */
  export type ExercicesCountOutputTypeCountSeances_Seances_Exercice1_idToExercicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeancesWhereInput
  }


  /**
   * ExercicesCountOutputType without action
   */
  export type ExercicesCountOutputTypeCountSeances_Seances_Exercice2_idToExercicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeancesWhereInput
  }


  /**
   * ExercicesCountOutputType without action
   */
  export type ExercicesCountOutputTypeCountSeances_Seances_Exercice3_idToExercicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeancesWhereInput
  }


  /**
   * ExercicesCountOutputType without action
   */
  export type ExercicesCountOutputTypeCountSeances_Seances_Exercice4_idToExercicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeancesWhereInput
  }



  /**
   * Count Type Objectif_SanteCountOutputType
   */

  export type Objectif_SanteCountOutputType = {
    Historique_Sante: number
    Sante: number
  }

  export type Objectif_SanteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Historique_Sante?: boolean | Objectif_SanteCountOutputTypeCountHistorique_SanteArgs
    Sante?: boolean | Objectif_SanteCountOutputTypeCountSanteArgs
  }

  // Custom InputTypes

  /**
   * Objectif_SanteCountOutputType without action
   */
  export type Objectif_SanteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectif_SanteCountOutputType
     */
    select?: Objectif_SanteCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * Objectif_SanteCountOutputType without action
   */
  export type Objectif_SanteCountOutputTypeCountHistorique_SanteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Historique_SanteWhereInput
  }


  /**
   * Objectif_SanteCountOutputType without action
   */
  export type Objectif_SanteCountOutputTypeCountSanteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SanteWhereInput
  }



  /**
   * Count Type RepasCountOutputType
   */

  export type RepasCountOutputType = {
    Aliment_Aliment_Repas_idToRepas: number
  }

  export type RepasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Aliment_Aliment_Repas_idToRepas?: boolean | RepasCountOutputTypeCountAliment_Aliment_Repas_idToRepasArgs
  }

  // Custom InputTypes

  /**
   * RepasCountOutputType without action
   */
  export type RepasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepasCountOutputType
     */
    select?: RepasCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RepasCountOutputType without action
   */
  export type RepasCountOutputTypeCountAliment_Aliment_Repas_idToRepasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlimentWhereInput
  }



  /**
   * Count Type SanteCountOutputType
   */

  export type SanteCountOutputType = {
    Utilisateur: number
  }

  export type SanteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Utilisateur?: boolean | SanteCountOutputTypeCountUtilisateurArgs
  }

  // Custom InputTypes

  /**
   * SanteCountOutputType without action
   */
  export type SanteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SanteCountOutputType
     */
    select?: SanteCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SanteCountOutputType without action
   */
  export type SanteCountOutputTypeCountUtilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UtilisateurWhereInput
  }



  /**
   * Count Type SeancesCountOutputType
   */

  export type SeancesCountOutputType = {
    Sport: number
  }

  export type SeancesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sport?: boolean | SeancesCountOutputTypeCountSportArgs
  }

  // Custom InputTypes

  /**
   * SeancesCountOutputType without action
   */
  export type SeancesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeancesCountOutputType
     */
    select?: SeancesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SeancesCountOutputType without action
   */
  export type SeancesCountOutputTypeCountSportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SportWhereInput
  }



  /**
   * Count Type SportCountOutputType
   */

  export type SportCountOutputType = {
    Utilisateur_Utilisateur_Objectif_Sport_idToSport: number
  }

  export type SportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: boolean | SportCountOutputTypeCountUtilisateur_Utilisateur_Objectif_Sport_idToSportArgs
  }

  // Custom InputTypes

  /**
   * SportCountOutputType without action
   */
  export type SportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SportCountOutputType
     */
    select?: SportCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SportCountOutputType without action
   */
  export type SportCountOutputTypeCountUtilisateur_Utilisateur_Objectif_Sport_idToSportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UtilisateurWhereInput
  }



  /**
   * Count Type UtilisateurCountOutputType
   */

  export type UtilisateurCountOutputType = {
    Alimentation_Alimentation_Utilisateur_idToUtilisateur: number
    Historique_Sport: number
    Sport_Sport_Utilisateur_idToUtilisateur: number
  }

  export type UtilisateurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: boolean | UtilisateurCountOutputTypeCountAlimentation_Alimentation_Utilisateur_idToUtilisateurArgs
    Historique_Sport?: boolean | UtilisateurCountOutputTypeCountHistorique_SportArgs
    Sport_Sport_Utilisateur_idToUtilisateur?: boolean | UtilisateurCountOutputTypeCountSport_Sport_Utilisateur_idToUtilisateurArgs
  }

  // Custom InputTypes

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UtilisateurCountOutputType
     */
    select?: UtilisateurCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountAlimentation_Alimentation_Utilisateur_idToUtilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlimentationWhereInput
  }


  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountHistorique_SportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Historique_SportWhereInput
  }


  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountSport_Sport_Utilisateur_idToUtilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SportWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Aliment
   */

  export type AggregateAliment = {
    _count: AlimentCountAggregateOutputType | null
    _avg: AlimentAvgAggregateOutputType | null
    _sum: AlimentSumAggregateOutputType | null
    _min: AlimentMinAggregateOutputType | null
    _max: AlimentMaxAggregateOutputType | null
  }

  export type AlimentAvgAggregateOutputType = {
    Aliment_id: number | null
    Repas_id: number | null
  }

  export type AlimentSumAggregateOutputType = {
    Aliment_id: number | null
    Repas_id: number | null
  }

  export type AlimentMinAggregateOutputType = {
    Aliment_id: number | null
    Repas_id: number | null
    Aliment_Type: string | null
  }

  export type AlimentMaxAggregateOutputType = {
    Aliment_id: number | null
    Repas_id: number | null
    Aliment_Type: string | null
  }

  export type AlimentCountAggregateOutputType = {
    Aliment_id: number
    Repas_id: number
    Aliment_Type: number
    _all: number
  }


  export type AlimentAvgAggregateInputType = {
    Aliment_id?: true
    Repas_id?: true
  }

  export type AlimentSumAggregateInputType = {
    Aliment_id?: true
    Repas_id?: true
  }

  export type AlimentMinAggregateInputType = {
    Aliment_id?: true
    Repas_id?: true
    Aliment_Type?: true
  }

  export type AlimentMaxAggregateInputType = {
    Aliment_id?: true
    Repas_id?: true
    Aliment_Type?: true
  }

  export type AlimentCountAggregateInputType = {
    Aliment_id?: true
    Repas_id?: true
    Aliment_Type?: true
    _all?: true
  }

  export type AlimentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aliment to aggregate.
     */
    where?: AlimentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aliments to fetch.
     */
    orderBy?: AlimentOrderByWithRelationInput | AlimentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlimentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aliments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aliments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Aliments
    **/
    _count?: true | AlimentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlimentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlimentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlimentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlimentMaxAggregateInputType
  }

  export type GetAlimentAggregateType<T extends AlimentAggregateArgs> = {
        [P in keyof T & keyof AggregateAliment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAliment[P]>
      : GetScalarType<T[P], AggregateAliment[P]>
  }




  export type AlimentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlimentWhereInput
    orderBy?: AlimentOrderByWithAggregationInput | AlimentOrderByWithAggregationInput[]
    by: AlimentScalarFieldEnum[] | AlimentScalarFieldEnum
    having?: AlimentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlimentCountAggregateInputType | true
    _avg?: AlimentAvgAggregateInputType
    _sum?: AlimentSumAggregateInputType
    _min?: AlimentMinAggregateInputType
    _max?: AlimentMaxAggregateInputType
  }

  export type AlimentGroupByOutputType = {
    Aliment_id: number
    Repas_id: number
    Aliment_Type: string
    _count: AlimentCountAggregateOutputType | null
    _avg: AlimentAvgAggregateOutputType | null
    _sum: AlimentSumAggregateOutputType | null
    _min: AlimentMinAggregateOutputType | null
    _max: AlimentMaxAggregateOutputType | null
  }

  type GetAlimentGroupByPayload<T extends AlimentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlimentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlimentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlimentGroupByOutputType[P]>
            : GetScalarType<T[P], AlimentGroupByOutputType[P]>
        }
      >
    >


  export type AlimentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Aliment_id?: boolean
    Repas_id?: boolean
    Aliment_Type?: boolean
    Repas_Aliment_Repas_idToRepas?: boolean | RepasDefaultArgs<ExtArgs>
    Aliments_indesirable?: boolean | Aliment$Aliments_indesirableArgs<ExtArgs>
    Repas_Repas_Aliment_idToAliment?: boolean | Aliment$Repas_Repas_Aliment_idToAlimentArgs<ExtArgs>
    _count?: boolean | AlimentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aliment"]>

  export type AlimentSelectScalar = {
    Aliment_id?: boolean
    Repas_id?: boolean
    Aliment_Type?: boolean
  }

  export type AlimentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Repas_Aliment_Repas_idToRepas?: boolean | RepasDefaultArgs<ExtArgs>
    Aliments_indesirable?: boolean | Aliment$Aliments_indesirableArgs<ExtArgs>
    Repas_Repas_Aliment_idToAliment?: boolean | Aliment$Repas_Repas_Aliment_idToAlimentArgs<ExtArgs>
    _count?: boolean | AlimentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AlimentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Aliment"
    objects: {
      Repas_Aliment_Repas_idToRepas: Prisma.$RepasPayload<ExtArgs>
      Aliments_indesirable: Prisma.$Aliments_indesirablePayload<ExtArgs>[]
      Repas_Repas_Aliment_idToAliment: Prisma.$RepasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Aliment_id: number
      Repas_id: number
      Aliment_Type: string
    }, ExtArgs["result"]["aliment"]>
    composites: {}
  }


  type AlimentGetPayload<S extends boolean | null | undefined | AlimentDefaultArgs> = $Result.GetResult<Prisma.$AlimentPayload, S>

  type AlimentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlimentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlimentCountAggregateInputType | true
    }

  export interface AlimentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Aliment'], meta: { name: 'Aliment' } }
    /**
     * Find zero or one Aliment that matches the filter.
     * @param {AlimentFindUniqueArgs} args - Arguments to find a Aliment
     * @example
     * // Get one Aliment
     * const aliment = await prisma.aliment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AlimentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AlimentFindUniqueArgs<ExtArgs>>
    ): Prisma__AlimentClient<$Result.GetResult<Prisma.$AlimentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Aliment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AlimentFindUniqueOrThrowArgs} args - Arguments to find a Aliment
     * @example
     * // Get one Aliment
     * const aliment = await prisma.aliment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AlimentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlimentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AlimentClient<$Result.GetResult<Prisma.$AlimentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Aliment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentFindFirstArgs} args - Arguments to find a Aliment
     * @example
     * // Get one Aliment
     * const aliment = await prisma.aliment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AlimentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AlimentFindFirstArgs<ExtArgs>>
    ): Prisma__AlimentClient<$Result.GetResult<Prisma.$AlimentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Aliment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentFindFirstOrThrowArgs} args - Arguments to find a Aliment
     * @example
     * // Get one Aliment
     * const aliment = await prisma.aliment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AlimentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlimentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AlimentClient<$Result.GetResult<Prisma.$AlimentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Aliments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aliments
     * const aliments = await prisma.aliment.findMany()
     * 
     * // Get first 10 Aliments
     * const aliments = await prisma.aliment.findMany({ take: 10 })
     * 
     * // Only select the `Aliment_id`
     * const alimentWithAliment_idOnly = await prisma.aliment.findMany({ select: { Aliment_id: true } })
     * 
    **/
    findMany<T extends AlimentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlimentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlimentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Aliment.
     * @param {AlimentCreateArgs} args - Arguments to create a Aliment.
     * @example
     * // Create one Aliment
     * const Aliment = await prisma.aliment.create({
     *   data: {
     *     // ... data to create a Aliment
     *   }
     * })
     * 
    **/
    create<T extends AlimentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AlimentCreateArgs<ExtArgs>>
    ): Prisma__AlimentClient<$Result.GetResult<Prisma.$AlimentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Aliments.
     *     @param {AlimentCreateManyArgs} args - Arguments to create many Aliments.
     *     @example
     *     // Create many Aliments
     *     const aliment = await prisma.aliment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AlimentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlimentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Aliment.
     * @param {AlimentDeleteArgs} args - Arguments to delete one Aliment.
     * @example
     * // Delete one Aliment
     * const Aliment = await prisma.aliment.delete({
     *   where: {
     *     // ... filter to delete one Aliment
     *   }
     * })
     * 
    **/
    delete<T extends AlimentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AlimentDeleteArgs<ExtArgs>>
    ): Prisma__AlimentClient<$Result.GetResult<Prisma.$AlimentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Aliment.
     * @param {AlimentUpdateArgs} args - Arguments to update one Aliment.
     * @example
     * // Update one Aliment
     * const aliment = await prisma.aliment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AlimentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AlimentUpdateArgs<ExtArgs>>
    ): Prisma__AlimentClient<$Result.GetResult<Prisma.$AlimentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Aliments.
     * @param {AlimentDeleteManyArgs} args - Arguments to filter Aliments to delete.
     * @example
     * // Delete a few Aliments
     * const { count } = await prisma.aliment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AlimentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlimentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aliments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aliments
     * const aliment = await prisma.aliment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AlimentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AlimentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aliment.
     * @param {AlimentUpsertArgs} args - Arguments to update or create a Aliment.
     * @example
     * // Update or create a Aliment
     * const aliment = await prisma.aliment.upsert({
     *   create: {
     *     // ... data to create a Aliment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aliment we want to update
     *   }
     * })
    **/
    upsert<T extends AlimentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AlimentUpsertArgs<ExtArgs>>
    ): Prisma__AlimentClient<$Result.GetResult<Prisma.$AlimentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Aliments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentCountArgs} args - Arguments to filter Aliments to count.
     * @example
     * // Count the number of Aliments
     * const count = await prisma.aliment.count({
     *   where: {
     *     // ... the filter for the Aliments we want to count
     *   }
     * })
    **/
    count<T extends AlimentCountArgs>(
      args?: Subset<T, AlimentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlimentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aliment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlimentAggregateArgs>(args: Subset<T, AlimentAggregateArgs>): Prisma.PrismaPromise<GetAlimentAggregateType<T>>

    /**
     * Group by Aliment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlimentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlimentGroupByArgs['orderBy'] }
        : { orderBy?: AlimentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlimentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlimentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Aliment model
   */
  readonly fields: AlimentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Aliment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlimentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Repas_Aliment_Repas_idToRepas<T extends RepasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RepasDefaultArgs<ExtArgs>>): Prisma__RepasClient<$Result.GetResult<Prisma.$RepasPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Aliments_indesirable<T extends Aliment$Aliments_indesirableArgs<ExtArgs> = {}>(args?: Subset<T, Aliment$Aliments_indesirableArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Aliments_indesirablePayload<ExtArgs>, T, 'findMany'> | Null>;

    Repas_Repas_Aliment_idToAliment<T extends Aliment$Repas_Repas_Aliment_idToAlimentArgs<ExtArgs> = {}>(args?: Subset<T, Aliment$Repas_Repas_Aliment_idToAlimentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepasPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Aliment model
   */ 
  interface AlimentFieldRefs {
    readonly Aliment_id: FieldRef<"Aliment", 'Int'>
    readonly Repas_id: FieldRef<"Aliment", 'Int'>
    readonly Aliment_Type: FieldRef<"Aliment", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Aliment findUnique
   */
  export type AlimentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliment
     */
    select?: AlimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentInclude<ExtArgs> | null
    /**
     * Filter, which Aliment to fetch.
     */
    where: AlimentWhereUniqueInput
  }


  /**
   * Aliment findUniqueOrThrow
   */
  export type AlimentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliment
     */
    select?: AlimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentInclude<ExtArgs> | null
    /**
     * Filter, which Aliment to fetch.
     */
    where: AlimentWhereUniqueInput
  }


  /**
   * Aliment findFirst
   */
  export type AlimentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliment
     */
    select?: AlimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentInclude<ExtArgs> | null
    /**
     * Filter, which Aliment to fetch.
     */
    where?: AlimentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aliments to fetch.
     */
    orderBy?: AlimentOrderByWithRelationInput | AlimentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aliments.
     */
    cursor?: AlimentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aliments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aliments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aliments.
     */
    distinct?: AlimentScalarFieldEnum | AlimentScalarFieldEnum[]
  }


  /**
   * Aliment findFirstOrThrow
   */
  export type AlimentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliment
     */
    select?: AlimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentInclude<ExtArgs> | null
    /**
     * Filter, which Aliment to fetch.
     */
    where?: AlimentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aliments to fetch.
     */
    orderBy?: AlimentOrderByWithRelationInput | AlimentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aliments.
     */
    cursor?: AlimentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aliments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aliments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aliments.
     */
    distinct?: AlimentScalarFieldEnum | AlimentScalarFieldEnum[]
  }


  /**
   * Aliment findMany
   */
  export type AlimentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliment
     */
    select?: AlimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentInclude<ExtArgs> | null
    /**
     * Filter, which Aliments to fetch.
     */
    where?: AlimentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aliments to fetch.
     */
    orderBy?: AlimentOrderByWithRelationInput | AlimentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Aliments.
     */
    cursor?: AlimentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aliments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aliments.
     */
    skip?: number
    distinct?: AlimentScalarFieldEnum | AlimentScalarFieldEnum[]
  }


  /**
   * Aliment create
   */
  export type AlimentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliment
     */
    select?: AlimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentInclude<ExtArgs> | null
    /**
     * The data needed to create a Aliment.
     */
    data: XOR<AlimentCreateInput, AlimentUncheckedCreateInput>
  }


  /**
   * Aliment createMany
   */
  export type AlimentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Aliments.
     */
    data: AlimentCreateManyInput | AlimentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Aliment update
   */
  export type AlimentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliment
     */
    select?: AlimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentInclude<ExtArgs> | null
    /**
     * The data needed to update a Aliment.
     */
    data: XOR<AlimentUpdateInput, AlimentUncheckedUpdateInput>
    /**
     * Choose, which Aliment to update.
     */
    where: AlimentWhereUniqueInput
  }


  /**
   * Aliment updateMany
   */
  export type AlimentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Aliments.
     */
    data: XOR<AlimentUpdateManyMutationInput, AlimentUncheckedUpdateManyInput>
    /**
     * Filter which Aliments to update
     */
    where?: AlimentWhereInput
  }


  /**
   * Aliment upsert
   */
  export type AlimentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliment
     */
    select?: AlimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentInclude<ExtArgs> | null
    /**
     * The filter to search for the Aliment to update in case it exists.
     */
    where: AlimentWhereUniqueInput
    /**
     * In case the Aliment found by the `where` argument doesn't exist, create a new Aliment with this data.
     */
    create: XOR<AlimentCreateInput, AlimentUncheckedCreateInput>
    /**
     * In case the Aliment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlimentUpdateInput, AlimentUncheckedUpdateInput>
  }


  /**
   * Aliment delete
   */
  export type AlimentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliment
     */
    select?: AlimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentInclude<ExtArgs> | null
    /**
     * Filter which Aliment to delete.
     */
    where: AlimentWhereUniqueInput
  }


  /**
   * Aliment deleteMany
   */
  export type AlimentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aliments to delete
     */
    where?: AlimentWhereInput
  }


  /**
   * Aliment.Aliments_indesirable
   */
  export type Aliment$Aliments_indesirableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliments_indesirable
     */
    select?: Aliments_indesirableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Aliments_indesirableInclude<ExtArgs> | null
    where?: Aliments_indesirableWhereInput
    orderBy?: Aliments_indesirableOrderByWithRelationInput | Aliments_indesirableOrderByWithRelationInput[]
    cursor?: Aliments_indesirableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Aliments_indesirableScalarFieldEnum | Aliments_indesirableScalarFieldEnum[]
  }


  /**
   * Aliment.Repas_Repas_Aliment_idToAliment
   */
  export type Aliment$Repas_Repas_Aliment_idToAlimentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repas
     */
    select?: RepasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepasInclude<ExtArgs> | null
    where?: RepasWhereInput
    orderBy?: RepasOrderByWithRelationInput | RepasOrderByWithRelationInput[]
    cursor?: RepasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepasScalarFieldEnum | RepasScalarFieldEnum[]
  }


  /**
   * Aliment without action
   */
  export type AlimentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliment
     */
    select?: AlimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentInclude<ExtArgs> | null
  }



  /**
   * Model Alimentation
   */

  export type AggregateAlimentation = {
    _count: AlimentationCountAggregateOutputType | null
    _avg: AlimentationAvgAggregateOutputType | null
    _sum: AlimentationSumAggregateOutputType | null
    _min: AlimentationMinAggregateOutputType | null
    _max: AlimentationMaxAggregateOutputType | null
  }

  export type AlimentationAvgAggregateOutputType = {
    Alimentation_id: number | null
    Utilisateur_id: number | null
    Maintien_Calorique: number | null
    Objectif_Calorique: number | null
    Objectif_Proteines: number | null
    Objectif_Glucides: number | null
    Objectif_Lipides: number | null
  }

  export type AlimentationSumAggregateOutputType = {
    Alimentation_id: number | null
    Utilisateur_id: number | null
    Maintien_Calorique: number | null
    Objectif_Calorique: number | null
    Objectif_Proteines: number | null
    Objectif_Glucides: number | null
    Objectif_Lipides: number | null
  }

  export type AlimentationMinAggregateOutputType = {
    Alimentation_id: number | null
    Utilisateur_id: number | null
    Maintien_Calorique: number | null
    Objectif_Calorique: number | null
    Objectif_Proteines: number | null
    Objectif_Glucides: number | null
    Objectif_Lipides: number | null
  }

  export type AlimentationMaxAggregateOutputType = {
    Alimentation_id: number | null
    Utilisateur_id: number | null
    Maintien_Calorique: number | null
    Objectif_Calorique: number | null
    Objectif_Proteines: number | null
    Objectif_Glucides: number | null
    Objectif_Lipides: number | null
  }

  export type AlimentationCountAggregateOutputType = {
    Alimentation_id: number
    Utilisateur_id: number
    Maintien_Calorique: number
    Objectif_Calorique: number
    Objectif_Proteines: number
    Objectif_Glucides: number
    Objectif_Lipides: number
    _all: number
  }


  export type AlimentationAvgAggregateInputType = {
    Alimentation_id?: true
    Utilisateur_id?: true
    Maintien_Calorique?: true
    Objectif_Calorique?: true
    Objectif_Proteines?: true
    Objectif_Glucides?: true
    Objectif_Lipides?: true
  }

  export type AlimentationSumAggregateInputType = {
    Alimentation_id?: true
    Utilisateur_id?: true
    Maintien_Calorique?: true
    Objectif_Calorique?: true
    Objectif_Proteines?: true
    Objectif_Glucides?: true
    Objectif_Lipides?: true
  }

  export type AlimentationMinAggregateInputType = {
    Alimentation_id?: true
    Utilisateur_id?: true
    Maintien_Calorique?: true
    Objectif_Calorique?: true
    Objectif_Proteines?: true
    Objectif_Glucides?: true
    Objectif_Lipides?: true
  }

  export type AlimentationMaxAggregateInputType = {
    Alimentation_id?: true
    Utilisateur_id?: true
    Maintien_Calorique?: true
    Objectif_Calorique?: true
    Objectif_Proteines?: true
    Objectif_Glucides?: true
    Objectif_Lipides?: true
  }

  export type AlimentationCountAggregateInputType = {
    Alimentation_id?: true
    Utilisateur_id?: true
    Maintien_Calorique?: true
    Objectif_Calorique?: true
    Objectif_Proteines?: true
    Objectif_Glucides?: true
    Objectif_Lipides?: true
    _all?: true
  }

  export type AlimentationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alimentation to aggregate.
     */
    where?: AlimentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alimentations to fetch.
     */
    orderBy?: AlimentationOrderByWithRelationInput | AlimentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlimentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alimentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alimentations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alimentations
    **/
    _count?: true | AlimentationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlimentationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlimentationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlimentationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlimentationMaxAggregateInputType
  }

  export type GetAlimentationAggregateType<T extends AlimentationAggregateArgs> = {
        [P in keyof T & keyof AggregateAlimentation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlimentation[P]>
      : GetScalarType<T[P], AggregateAlimentation[P]>
  }




  export type AlimentationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlimentationWhereInput
    orderBy?: AlimentationOrderByWithAggregationInput | AlimentationOrderByWithAggregationInput[]
    by: AlimentationScalarFieldEnum[] | AlimentationScalarFieldEnum
    having?: AlimentationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlimentationCountAggregateInputType | true
    _avg?: AlimentationAvgAggregateInputType
    _sum?: AlimentationSumAggregateInputType
    _min?: AlimentationMinAggregateInputType
    _max?: AlimentationMaxAggregateInputType
  }

  export type AlimentationGroupByOutputType = {
    Alimentation_id: number
    Utilisateur_id: number
    Maintien_Calorique: number
    Objectif_Calorique: number
    Objectif_Proteines: number
    Objectif_Glucides: number
    Objectif_Lipides: number
    _count: AlimentationCountAggregateOutputType | null
    _avg: AlimentationAvgAggregateOutputType | null
    _sum: AlimentationSumAggregateOutputType | null
    _min: AlimentationMinAggregateOutputType | null
    _max: AlimentationMaxAggregateOutputType | null
  }

  type GetAlimentationGroupByPayload<T extends AlimentationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlimentationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlimentationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlimentationGroupByOutputType[P]>
            : GetScalarType<T[P], AlimentationGroupByOutputType[P]>
        }
      >
    >


  export type AlimentationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Alimentation_id?: boolean
    Utilisateur_id?: boolean
    Maintien_Calorique?: boolean
    Objectif_Calorique?: boolean
    Objectif_Proteines?: boolean
    Objectif_Glucides?: boolean
    Objectif_Lipides?: boolean
    Utilisateur_Alimentation_Utilisateur_idToUtilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    Repas?: boolean | Alimentation$RepasArgs<ExtArgs>
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: boolean | Alimentation$Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationArgs<ExtArgs>
    _count?: boolean | AlimentationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alimentation"]>

  export type AlimentationSelectScalar = {
    Alimentation_id?: boolean
    Utilisateur_id?: boolean
    Maintien_Calorique?: boolean
    Objectif_Calorique?: boolean
    Objectif_Proteines?: boolean
    Objectif_Glucides?: boolean
    Objectif_Lipides?: boolean
  }

  export type AlimentationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Utilisateur_Alimentation_Utilisateur_idToUtilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    Repas?: boolean | Alimentation$RepasArgs<ExtArgs>
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: boolean | Alimentation$Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationArgs<ExtArgs>
    _count?: boolean | AlimentationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AlimentationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alimentation"
    objects: {
      Utilisateur_Alimentation_Utilisateur_idToUtilisateur: Prisma.$UtilisateurPayload<ExtArgs>
      Repas: Prisma.$RepasPayload<ExtArgs>[]
      Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation: Prisma.$UtilisateurPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Alimentation_id: number
      Utilisateur_id: number
      Maintien_Calorique: number
      Objectif_Calorique: number
      Objectif_Proteines: number
      Objectif_Glucides: number
      Objectif_Lipides: number
    }, ExtArgs["result"]["alimentation"]>
    composites: {}
  }


  type AlimentationGetPayload<S extends boolean | null | undefined | AlimentationDefaultArgs> = $Result.GetResult<Prisma.$AlimentationPayload, S>

  type AlimentationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlimentationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlimentationCountAggregateInputType | true
    }

  export interface AlimentationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alimentation'], meta: { name: 'Alimentation' } }
    /**
     * Find zero or one Alimentation that matches the filter.
     * @param {AlimentationFindUniqueArgs} args - Arguments to find a Alimentation
     * @example
     * // Get one Alimentation
     * const alimentation = await prisma.alimentation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AlimentationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AlimentationFindUniqueArgs<ExtArgs>>
    ): Prisma__AlimentationClient<$Result.GetResult<Prisma.$AlimentationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Alimentation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AlimentationFindUniqueOrThrowArgs} args - Arguments to find a Alimentation
     * @example
     * // Get one Alimentation
     * const alimentation = await prisma.alimentation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AlimentationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlimentationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AlimentationClient<$Result.GetResult<Prisma.$AlimentationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Alimentation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentationFindFirstArgs} args - Arguments to find a Alimentation
     * @example
     * // Get one Alimentation
     * const alimentation = await prisma.alimentation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AlimentationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AlimentationFindFirstArgs<ExtArgs>>
    ): Prisma__AlimentationClient<$Result.GetResult<Prisma.$AlimentationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Alimentation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentationFindFirstOrThrowArgs} args - Arguments to find a Alimentation
     * @example
     * // Get one Alimentation
     * const alimentation = await prisma.alimentation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AlimentationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlimentationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AlimentationClient<$Result.GetResult<Prisma.$AlimentationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Alimentations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alimentations
     * const alimentations = await prisma.alimentation.findMany()
     * 
     * // Get first 10 Alimentations
     * const alimentations = await prisma.alimentation.findMany({ take: 10 })
     * 
     * // Only select the `Alimentation_id`
     * const alimentationWithAlimentation_idOnly = await prisma.alimentation.findMany({ select: { Alimentation_id: true } })
     * 
    **/
    findMany<T extends AlimentationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlimentationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlimentationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Alimentation.
     * @param {AlimentationCreateArgs} args - Arguments to create a Alimentation.
     * @example
     * // Create one Alimentation
     * const Alimentation = await prisma.alimentation.create({
     *   data: {
     *     // ... data to create a Alimentation
     *   }
     * })
     * 
    **/
    create<T extends AlimentationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AlimentationCreateArgs<ExtArgs>>
    ): Prisma__AlimentationClient<$Result.GetResult<Prisma.$AlimentationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Alimentations.
     *     @param {AlimentationCreateManyArgs} args - Arguments to create many Alimentations.
     *     @example
     *     // Create many Alimentations
     *     const alimentation = await prisma.alimentation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AlimentationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlimentationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Alimentation.
     * @param {AlimentationDeleteArgs} args - Arguments to delete one Alimentation.
     * @example
     * // Delete one Alimentation
     * const Alimentation = await prisma.alimentation.delete({
     *   where: {
     *     // ... filter to delete one Alimentation
     *   }
     * })
     * 
    **/
    delete<T extends AlimentationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AlimentationDeleteArgs<ExtArgs>>
    ): Prisma__AlimentationClient<$Result.GetResult<Prisma.$AlimentationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Alimentation.
     * @param {AlimentationUpdateArgs} args - Arguments to update one Alimentation.
     * @example
     * // Update one Alimentation
     * const alimentation = await prisma.alimentation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AlimentationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AlimentationUpdateArgs<ExtArgs>>
    ): Prisma__AlimentationClient<$Result.GetResult<Prisma.$AlimentationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Alimentations.
     * @param {AlimentationDeleteManyArgs} args - Arguments to filter Alimentations to delete.
     * @example
     * // Delete a few Alimentations
     * const { count } = await prisma.alimentation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AlimentationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlimentationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alimentations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alimentations
     * const alimentation = await prisma.alimentation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AlimentationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AlimentationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alimentation.
     * @param {AlimentationUpsertArgs} args - Arguments to update or create a Alimentation.
     * @example
     * // Update or create a Alimentation
     * const alimentation = await prisma.alimentation.upsert({
     *   create: {
     *     // ... data to create a Alimentation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alimentation we want to update
     *   }
     * })
    **/
    upsert<T extends AlimentationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AlimentationUpsertArgs<ExtArgs>>
    ): Prisma__AlimentationClient<$Result.GetResult<Prisma.$AlimentationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Alimentations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentationCountArgs} args - Arguments to filter Alimentations to count.
     * @example
     * // Count the number of Alimentations
     * const count = await prisma.alimentation.count({
     *   where: {
     *     // ... the filter for the Alimentations we want to count
     *   }
     * })
    **/
    count<T extends AlimentationCountArgs>(
      args?: Subset<T, AlimentationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlimentationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alimentation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlimentationAggregateArgs>(args: Subset<T, AlimentationAggregateArgs>): Prisma.PrismaPromise<GetAlimentationAggregateType<T>>

    /**
     * Group by Alimentation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlimentationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlimentationGroupByArgs['orderBy'] }
        : { orderBy?: AlimentationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlimentationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlimentationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alimentation model
   */
  readonly fields: AlimentationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alimentation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlimentationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Utilisateur_Alimentation_Utilisateur_idToUtilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Repas<T extends Alimentation$RepasArgs<ExtArgs> = {}>(args?: Subset<T, Alimentation$RepasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepasPayload<ExtArgs>, T, 'findMany'> | Null>;

    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation<T extends Alimentation$Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationArgs<ExtArgs> = {}>(args?: Subset<T, Alimentation$Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Alimentation model
   */ 
  interface AlimentationFieldRefs {
    readonly Alimentation_id: FieldRef<"Alimentation", 'Int'>
    readonly Utilisateur_id: FieldRef<"Alimentation", 'Int'>
    readonly Maintien_Calorique: FieldRef<"Alimentation", 'Int'>
    readonly Objectif_Calorique: FieldRef<"Alimentation", 'Int'>
    readonly Objectif_Proteines: FieldRef<"Alimentation", 'Int'>
    readonly Objectif_Glucides: FieldRef<"Alimentation", 'Int'>
    readonly Objectif_Lipides: FieldRef<"Alimentation", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Alimentation findUnique
   */
  export type AlimentationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentation
     */
    select?: AlimentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentationInclude<ExtArgs> | null
    /**
     * Filter, which Alimentation to fetch.
     */
    where: AlimentationWhereUniqueInput
  }


  /**
   * Alimentation findUniqueOrThrow
   */
  export type AlimentationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentation
     */
    select?: AlimentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentationInclude<ExtArgs> | null
    /**
     * Filter, which Alimentation to fetch.
     */
    where: AlimentationWhereUniqueInput
  }


  /**
   * Alimentation findFirst
   */
  export type AlimentationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentation
     */
    select?: AlimentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentationInclude<ExtArgs> | null
    /**
     * Filter, which Alimentation to fetch.
     */
    where?: AlimentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alimentations to fetch.
     */
    orderBy?: AlimentationOrderByWithRelationInput | AlimentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alimentations.
     */
    cursor?: AlimentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alimentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alimentations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alimentations.
     */
    distinct?: AlimentationScalarFieldEnum | AlimentationScalarFieldEnum[]
  }


  /**
   * Alimentation findFirstOrThrow
   */
  export type AlimentationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentation
     */
    select?: AlimentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentationInclude<ExtArgs> | null
    /**
     * Filter, which Alimentation to fetch.
     */
    where?: AlimentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alimentations to fetch.
     */
    orderBy?: AlimentationOrderByWithRelationInput | AlimentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alimentations.
     */
    cursor?: AlimentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alimentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alimentations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alimentations.
     */
    distinct?: AlimentationScalarFieldEnum | AlimentationScalarFieldEnum[]
  }


  /**
   * Alimentation findMany
   */
  export type AlimentationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentation
     */
    select?: AlimentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentationInclude<ExtArgs> | null
    /**
     * Filter, which Alimentations to fetch.
     */
    where?: AlimentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alimentations to fetch.
     */
    orderBy?: AlimentationOrderByWithRelationInput | AlimentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alimentations.
     */
    cursor?: AlimentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alimentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alimentations.
     */
    skip?: number
    distinct?: AlimentationScalarFieldEnum | AlimentationScalarFieldEnum[]
  }


  /**
   * Alimentation create
   */
  export type AlimentationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentation
     */
    select?: AlimentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentationInclude<ExtArgs> | null
    /**
     * The data needed to create a Alimentation.
     */
    data: XOR<AlimentationCreateInput, AlimentationUncheckedCreateInput>
  }


  /**
   * Alimentation createMany
   */
  export type AlimentationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alimentations.
     */
    data: AlimentationCreateManyInput | AlimentationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Alimentation update
   */
  export type AlimentationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentation
     */
    select?: AlimentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentationInclude<ExtArgs> | null
    /**
     * The data needed to update a Alimentation.
     */
    data: XOR<AlimentationUpdateInput, AlimentationUncheckedUpdateInput>
    /**
     * Choose, which Alimentation to update.
     */
    where: AlimentationWhereUniqueInput
  }


  /**
   * Alimentation updateMany
   */
  export type AlimentationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alimentations.
     */
    data: XOR<AlimentationUpdateManyMutationInput, AlimentationUncheckedUpdateManyInput>
    /**
     * Filter which Alimentations to update
     */
    where?: AlimentationWhereInput
  }


  /**
   * Alimentation upsert
   */
  export type AlimentationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentation
     */
    select?: AlimentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentationInclude<ExtArgs> | null
    /**
     * The filter to search for the Alimentation to update in case it exists.
     */
    where: AlimentationWhereUniqueInput
    /**
     * In case the Alimentation found by the `where` argument doesn't exist, create a new Alimentation with this data.
     */
    create: XOR<AlimentationCreateInput, AlimentationUncheckedCreateInput>
    /**
     * In case the Alimentation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlimentationUpdateInput, AlimentationUncheckedUpdateInput>
  }


  /**
   * Alimentation delete
   */
  export type AlimentationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentation
     */
    select?: AlimentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentationInclude<ExtArgs> | null
    /**
     * Filter which Alimentation to delete.
     */
    where: AlimentationWhereUniqueInput
  }


  /**
   * Alimentation deleteMany
   */
  export type AlimentationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alimentations to delete
     */
    where?: AlimentationWhereInput
  }


  /**
   * Alimentation.Repas
   */
  export type Alimentation$RepasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repas
     */
    select?: RepasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepasInclude<ExtArgs> | null
    where?: RepasWhereInput
    orderBy?: RepasOrderByWithRelationInput | RepasOrderByWithRelationInput[]
    cursor?: RepasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepasScalarFieldEnum | RepasScalarFieldEnum[]
  }


  /**
   * Alimentation.Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation
   */
  export type Alimentation$Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilisateurInclude<ExtArgs> | null
    where?: UtilisateurWhereInput
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    cursor?: UtilisateurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }


  /**
   * Alimentation without action
   */
  export type AlimentationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentation
     */
    select?: AlimentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentationInclude<ExtArgs> | null
  }



  /**
   * Model Aliments_indesirable
   */

  export type AggregateAliments_indesirable = {
    _count: Aliments_indesirableCountAggregateOutputType | null
    _avg: Aliments_indesirableAvgAggregateOutputType | null
    _sum: Aliments_indesirableSumAggregateOutputType | null
    _min: Aliments_indesirableMinAggregateOutputType | null
    _max: Aliments_indesirableMaxAggregateOutputType | null
  }

  export type Aliments_indesirableAvgAggregateOutputType = {
    Aliments_indesirable_id: number | null
    Aliment_id: number | null
  }

  export type Aliments_indesirableSumAggregateOutputType = {
    Aliments_indesirable_id: number | null
    Aliment_id: number | null
  }

  export type Aliments_indesirableMinAggregateOutputType = {
    Aliments_indesirable_id: number | null
    Aliment_id: number | null
  }

  export type Aliments_indesirableMaxAggregateOutputType = {
    Aliments_indesirable_id: number | null
    Aliment_id: number | null
  }

  export type Aliments_indesirableCountAggregateOutputType = {
    Aliments_indesirable_id: number
    Aliment_id: number
    _all: number
  }


  export type Aliments_indesirableAvgAggregateInputType = {
    Aliments_indesirable_id?: true
    Aliment_id?: true
  }

  export type Aliments_indesirableSumAggregateInputType = {
    Aliments_indesirable_id?: true
    Aliment_id?: true
  }

  export type Aliments_indesirableMinAggregateInputType = {
    Aliments_indesirable_id?: true
    Aliment_id?: true
  }

  export type Aliments_indesirableMaxAggregateInputType = {
    Aliments_indesirable_id?: true
    Aliment_id?: true
  }

  export type Aliments_indesirableCountAggregateInputType = {
    Aliments_indesirable_id?: true
    Aliment_id?: true
    _all?: true
  }

  export type Aliments_indesirableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aliments_indesirable to aggregate.
     */
    where?: Aliments_indesirableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aliments_indesirables to fetch.
     */
    orderBy?: Aliments_indesirableOrderByWithRelationInput | Aliments_indesirableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Aliments_indesirableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aliments_indesirables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aliments_indesirables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Aliments_indesirables
    **/
    _count?: true | Aliments_indesirableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Aliments_indesirableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Aliments_indesirableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Aliments_indesirableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Aliments_indesirableMaxAggregateInputType
  }

  export type GetAliments_indesirableAggregateType<T extends Aliments_indesirableAggregateArgs> = {
        [P in keyof T & keyof AggregateAliments_indesirable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAliments_indesirable[P]>
      : GetScalarType<T[P], AggregateAliments_indesirable[P]>
  }




  export type Aliments_indesirableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Aliments_indesirableWhereInput
    orderBy?: Aliments_indesirableOrderByWithAggregationInput | Aliments_indesirableOrderByWithAggregationInput[]
    by: Aliments_indesirableScalarFieldEnum[] | Aliments_indesirableScalarFieldEnum
    having?: Aliments_indesirableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Aliments_indesirableCountAggregateInputType | true
    _avg?: Aliments_indesirableAvgAggregateInputType
    _sum?: Aliments_indesirableSumAggregateInputType
    _min?: Aliments_indesirableMinAggregateInputType
    _max?: Aliments_indesirableMaxAggregateInputType
  }

  export type Aliments_indesirableGroupByOutputType = {
    Aliments_indesirable_id: number
    Aliment_id: number
    _count: Aliments_indesirableCountAggregateOutputType | null
    _avg: Aliments_indesirableAvgAggregateOutputType | null
    _sum: Aliments_indesirableSumAggregateOutputType | null
    _min: Aliments_indesirableMinAggregateOutputType | null
    _max: Aliments_indesirableMaxAggregateOutputType | null
  }

  type GetAliments_indesirableGroupByPayload<T extends Aliments_indesirableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Aliments_indesirableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Aliments_indesirableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Aliments_indesirableGroupByOutputType[P]>
            : GetScalarType<T[P], Aliments_indesirableGroupByOutputType[P]>
        }
      >
    >


  export type Aliments_indesirableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Aliments_indesirable_id?: boolean
    Aliment_id?: boolean
    Aliment?: boolean | AlimentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aliments_indesirable"]>

  export type Aliments_indesirableSelectScalar = {
    Aliments_indesirable_id?: boolean
    Aliment_id?: boolean
  }

  export type Aliments_indesirableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Aliment?: boolean | AlimentDefaultArgs<ExtArgs>
  }


  export type $Aliments_indesirablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Aliments_indesirable"
    objects: {
      Aliment: Prisma.$AlimentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Aliments_indesirable_id: number
      Aliment_id: number
    }, ExtArgs["result"]["aliments_indesirable"]>
    composites: {}
  }


  type Aliments_indesirableGetPayload<S extends boolean | null | undefined | Aliments_indesirableDefaultArgs> = $Result.GetResult<Prisma.$Aliments_indesirablePayload, S>

  type Aliments_indesirableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Aliments_indesirableFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Aliments_indesirableCountAggregateInputType | true
    }

  export interface Aliments_indesirableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Aliments_indesirable'], meta: { name: 'Aliments_indesirable' } }
    /**
     * Find zero or one Aliments_indesirable that matches the filter.
     * @param {Aliments_indesirableFindUniqueArgs} args - Arguments to find a Aliments_indesirable
     * @example
     * // Get one Aliments_indesirable
     * const aliments_indesirable = await prisma.aliments_indesirable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Aliments_indesirableFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Aliments_indesirableFindUniqueArgs<ExtArgs>>
    ): Prisma__Aliments_indesirableClient<$Result.GetResult<Prisma.$Aliments_indesirablePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Aliments_indesirable that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Aliments_indesirableFindUniqueOrThrowArgs} args - Arguments to find a Aliments_indesirable
     * @example
     * // Get one Aliments_indesirable
     * const aliments_indesirable = await prisma.aliments_indesirable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Aliments_indesirableFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Aliments_indesirableFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Aliments_indesirableClient<$Result.GetResult<Prisma.$Aliments_indesirablePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Aliments_indesirable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aliments_indesirableFindFirstArgs} args - Arguments to find a Aliments_indesirable
     * @example
     * // Get one Aliments_indesirable
     * const aliments_indesirable = await prisma.aliments_indesirable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Aliments_indesirableFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Aliments_indesirableFindFirstArgs<ExtArgs>>
    ): Prisma__Aliments_indesirableClient<$Result.GetResult<Prisma.$Aliments_indesirablePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Aliments_indesirable that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aliments_indesirableFindFirstOrThrowArgs} args - Arguments to find a Aliments_indesirable
     * @example
     * // Get one Aliments_indesirable
     * const aliments_indesirable = await prisma.aliments_indesirable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Aliments_indesirableFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Aliments_indesirableFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Aliments_indesirableClient<$Result.GetResult<Prisma.$Aliments_indesirablePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Aliments_indesirables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aliments_indesirableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aliments_indesirables
     * const aliments_indesirables = await prisma.aliments_indesirable.findMany()
     * 
     * // Get first 10 Aliments_indesirables
     * const aliments_indesirables = await prisma.aliments_indesirable.findMany({ take: 10 })
     * 
     * // Only select the `Aliments_indesirable_id`
     * const aliments_indesirableWithAliments_indesirable_idOnly = await prisma.aliments_indesirable.findMany({ select: { Aliments_indesirable_id: true } })
     * 
    **/
    findMany<T extends Aliments_indesirableFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Aliments_indesirableFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Aliments_indesirablePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Aliments_indesirable.
     * @param {Aliments_indesirableCreateArgs} args - Arguments to create a Aliments_indesirable.
     * @example
     * // Create one Aliments_indesirable
     * const Aliments_indesirable = await prisma.aliments_indesirable.create({
     *   data: {
     *     // ... data to create a Aliments_indesirable
     *   }
     * })
     * 
    **/
    create<T extends Aliments_indesirableCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Aliments_indesirableCreateArgs<ExtArgs>>
    ): Prisma__Aliments_indesirableClient<$Result.GetResult<Prisma.$Aliments_indesirablePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Aliments_indesirables.
     *     @param {Aliments_indesirableCreateManyArgs} args - Arguments to create many Aliments_indesirables.
     *     @example
     *     // Create many Aliments_indesirables
     *     const aliments_indesirable = await prisma.aliments_indesirable.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Aliments_indesirableCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Aliments_indesirableCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Aliments_indesirable.
     * @param {Aliments_indesirableDeleteArgs} args - Arguments to delete one Aliments_indesirable.
     * @example
     * // Delete one Aliments_indesirable
     * const Aliments_indesirable = await prisma.aliments_indesirable.delete({
     *   where: {
     *     // ... filter to delete one Aliments_indesirable
     *   }
     * })
     * 
    **/
    delete<T extends Aliments_indesirableDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Aliments_indesirableDeleteArgs<ExtArgs>>
    ): Prisma__Aliments_indesirableClient<$Result.GetResult<Prisma.$Aliments_indesirablePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Aliments_indesirable.
     * @param {Aliments_indesirableUpdateArgs} args - Arguments to update one Aliments_indesirable.
     * @example
     * // Update one Aliments_indesirable
     * const aliments_indesirable = await prisma.aliments_indesirable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Aliments_indesirableUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Aliments_indesirableUpdateArgs<ExtArgs>>
    ): Prisma__Aliments_indesirableClient<$Result.GetResult<Prisma.$Aliments_indesirablePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Aliments_indesirables.
     * @param {Aliments_indesirableDeleteManyArgs} args - Arguments to filter Aliments_indesirables to delete.
     * @example
     * // Delete a few Aliments_indesirables
     * const { count } = await prisma.aliments_indesirable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Aliments_indesirableDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Aliments_indesirableDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aliments_indesirables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aliments_indesirableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aliments_indesirables
     * const aliments_indesirable = await prisma.aliments_indesirable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Aliments_indesirableUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Aliments_indesirableUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aliments_indesirable.
     * @param {Aliments_indesirableUpsertArgs} args - Arguments to update or create a Aliments_indesirable.
     * @example
     * // Update or create a Aliments_indesirable
     * const aliments_indesirable = await prisma.aliments_indesirable.upsert({
     *   create: {
     *     // ... data to create a Aliments_indesirable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aliments_indesirable we want to update
     *   }
     * })
    **/
    upsert<T extends Aliments_indesirableUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Aliments_indesirableUpsertArgs<ExtArgs>>
    ): Prisma__Aliments_indesirableClient<$Result.GetResult<Prisma.$Aliments_indesirablePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Aliments_indesirables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aliments_indesirableCountArgs} args - Arguments to filter Aliments_indesirables to count.
     * @example
     * // Count the number of Aliments_indesirables
     * const count = await prisma.aliments_indesirable.count({
     *   where: {
     *     // ... the filter for the Aliments_indesirables we want to count
     *   }
     * })
    **/
    count<T extends Aliments_indesirableCountArgs>(
      args?: Subset<T, Aliments_indesirableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Aliments_indesirableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aliments_indesirable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aliments_indesirableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Aliments_indesirableAggregateArgs>(args: Subset<T, Aliments_indesirableAggregateArgs>): Prisma.PrismaPromise<GetAliments_indesirableAggregateType<T>>

    /**
     * Group by Aliments_indesirable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aliments_indesirableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Aliments_indesirableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Aliments_indesirableGroupByArgs['orderBy'] }
        : { orderBy?: Aliments_indesirableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Aliments_indesirableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAliments_indesirableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Aliments_indesirable model
   */
  readonly fields: Aliments_indesirableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Aliments_indesirable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Aliments_indesirableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Aliment<T extends AlimentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlimentDefaultArgs<ExtArgs>>): Prisma__AlimentClient<$Result.GetResult<Prisma.$AlimentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Aliments_indesirable model
   */ 
  interface Aliments_indesirableFieldRefs {
    readonly Aliments_indesirable_id: FieldRef<"Aliments_indesirable", 'Int'>
    readonly Aliment_id: FieldRef<"Aliments_indesirable", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Aliments_indesirable findUnique
   */
  export type Aliments_indesirableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliments_indesirable
     */
    select?: Aliments_indesirableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Aliments_indesirableInclude<ExtArgs> | null
    /**
     * Filter, which Aliments_indesirable to fetch.
     */
    where: Aliments_indesirableWhereUniqueInput
  }


  /**
   * Aliments_indesirable findUniqueOrThrow
   */
  export type Aliments_indesirableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliments_indesirable
     */
    select?: Aliments_indesirableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Aliments_indesirableInclude<ExtArgs> | null
    /**
     * Filter, which Aliments_indesirable to fetch.
     */
    where: Aliments_indesirableWhereUniqueInput
  }


  /**
   * Aliments_indesirable findFirst
   */
  export type Aliments_indesirableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliments_indesirable
     */
    select?: Aliments_indesirableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Aliments_indesirableInclude<ExtArgs> | null
    /**
     * Filter, which Aliments_indesirable to fetch.
     */
    where?: Aliments_indesirableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aliments_indesirables to fetch.
     */
    orderBy?: Aliments_indesirableOrderByWithRelationInput | Aliments_indesirableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aliments_indesirables.
     */
    cursor?: Aliments_indesirableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aliments_indesirables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aliments_indesirables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aliments_indesirables.
     */
    distinct?: Aliments_indesirableScalarFieldEnum | Aliments_indesirableScalarFieldEnum[]
  }


  /**
   * Aliments_indesirable findFirstOrThrow
   */
  export type Aliments_indesirableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliments_indesirable
     */
    select?: Aliments_indesirableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Aliments_indesirableInclude<ExtArgs> | null
    /**
     * Filter, which Aliments_indesirable to fetch.
     */
    where?: Aliments_indesirableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aliments_indesirables to fetch.
     */
    orderBy?: Aliments_indesirableOrderByWithRelationInput | Aliments_indesirableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aliments_indesirables.
     */
    cursor?: Aliments_indesirableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aliments_indesirables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aliments_indesirables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aliments_indesirables.
     */
    distinct?: Aliments_indesirableScalarFieldEnum | Aliments_indesirableScalarFieldEnum[]
  }


  /**
   * Aliments_indesirable findMany
   */
  export type Aliments_indesirableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliments_indesirable
     */
    select?: Aliments_indesirableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Aliments_indesirableInclude<ExtArgs> | null
    /**
     * Filter, which Aliments_indesirables to fetch.
     */
    where?: Aliments_indesirableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aliments_indesirables to fetch.
     */
    orderBy?: Aliments_indesirableOrderByWithRelationInput | Aliments_indesirableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Aliments_indesirables.
     */
    cursor?: Aliments_indesirableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aliments_indesirables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aliments_indesirables.
     */
    skip?: number
    distinct?: Aliments_indesirableScalarFieldEnum | Aliments_indesirableScalarFieldEnum[]
  }


  /**
   * Aliments_indesirable create
   */
  export type Aliments_indesirableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliments_indesirable
     */
    select?: Aliments_indesirableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Aliments_indesirableInclude<ExtArgs> | null
    /**
     * The data needed to create a Aliments_indesirable.
     */
    data: XOR<Aliments_indesirableCreateInput, Aliments_indesirableUncheckedCreateInput>
  }


  /**
   * Aliments_indesirable createMany
   */
  export type Aliments_indesirableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Aliments_indesirables.
     */
    data: Aliments_indesirableCreateManyInput | Aliments_indesirableCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Aliments_indesirable update
   */
  export type Aliments_indesirableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliments_indesirable
     */
    select?: Aliments_indesirableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Aliments_indesirableInclude<ExtArgs> | null
    /**
     * The data needed to update a Aliments_indesirable.
     */
    data: XOR<Aliments_indesirableUpdateInput, Aliments_indesirableUncheckedUpdateInput>
    /**
     * Choose, which Aliments_indesirable to update.
     */
    where: Aliments_indesirableWhereUniqueInput
  }


  /**
   * Aliments_indesirable updateMany
   */
  export type Aliments_indesirableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Aliments_indesirables.
     */
    data: XOR<Aliments_indesirableUpdateManyMutationInput, Aliments_indesirableUncheckedUpdateManyInput>
    /**
     * Filter which Aliments_indesirables to update
     */
    where?: Aliments_indesirableWhereInput
  }


  /**
   * Aliments_indesirable upsert
   */
  export type Aliments_indesirableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliments_indesirable
     */
    select?: Aliments_indesirableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Aliments_indesirableInclude<ExtArgs> | null
    /**
     * The filter to search for the Aliments_indesirable to update in case it exists.
     */
    where: Aliments_indesirableWhereUniqueInput
    /**
     * In case the Aliments_indesirable found by the `where` argument doesn't exist, create a new Aliments_indesirable with this data.
     */
    create: XOR<Aliments_indesirableCreateInput, Aliments_indesirableUncheckedCreateInput>
    /**
     * In case the Aliments_indesirable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Aliments_indesirableUpdateInput, Aliments_indesirableUncheckedUpdateInput>
  }


  /**
   * Aliments_indesirable delete
   */
  export type Aliments_indesirableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliments_indesirable
     */
    select?: Aliments_indesirableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Aliments_indesirableInclude<ExtArgs> | null
    /**
     * Filter which Aliments_indesirable to delete.
     */
    where: Aliments_indesirableWhereUniqueInput
  }


  /**
   * Aliments_indesirable deleteMany
   */
  export type Aliments_indesirableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aliments_indesirables to delete
     */
    where?: Aliments_indesirableWhereInput
  }


  /**
   * Aliments_indesirable without action
   */
  export type Aliments_indesirableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliments_indesirable
     */
    select?: Aliments_indesirableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Aliments_indesirableInclude<ExtArgs> | null
  }



  /**
   * Model Exercices
   */

  export type AggregateExercices = {
    _count: ExercicesCountAggregateOutputType | null
    _avg: ExercicesAvgAggregateOutputType | null
    _sum: ExercicesSumAggregateOutputType | null
    _min: ExercicesMinAggregateOutputType | null
    _max: ExercicesMaxAggregateOutputType | null
  }

  export type ExercicesAvgAggregateOutputType = {
    Exercice_id: number | null
    Temps_repos: number | null
    Repetitions_Serie1: number | null
    Repetitions_Serie2: number | null
    Repetitions_Serie3: number | null
    Repetitions_Serie4: number | null
  }

  export type ExercicesSumAggregateOutputType = {
    Exercice_id: number | null
    Temps_repos: number | null
    Repetitions_Serie1: number | null
    Repetitions_Serie2: number | null
    Repetitions_Serie3: number | null
    Repetitions_Serie4: number | null
  }

  export type ExercicesMinAggregateOutputType = {
    Exercice_id: number | null
    Exercice_nom: string | null
    Exercice_type: string | null
    Temps_repos: number | null
    Repetitions_Serie1: number | null
    Repetitions_Serie2: number | null
    Repetitions_Serie3: number | null
    Repetitions_Serie4: number | null
    Exercice_Description: string | null
  }

  export type ExercicesMaxAggregateOutputType = {
    Exercice_id: number | null
    Exercice_nom: string | null
    Exercice_type: string | null
    Temps_repos: number | null
    Repetitions_Serie1: number | null
    Repetitions_Serie2: number | null
    Repetitions_Serie3: number | null
    Repetitions_Serie4: number | null
    Exercice_Description: string | null
  }

  export type ExercicesCountAggregateOutputType = {
    Exercice_id: number
    Exercice_nom: number
    Exercice_type: number
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: number
    _all: number
  }


  export type ExercicesAvgAggregateInputType = {
    Exercice_id?: true
    Temps_repos?: true
    Repetitions_Serie1?: true
    Repetitions_Serie2?: true
    Repetitions_Serie3?: true
    Repetitions_Serie4?: true
  }

  export type ExercicesSumAggregateInputType = {
    Exercice_id?: true
    Temps_repos?: true
    Repetitions_Serie1?: true
    Repetitions_Serie2?: true
    Repetitions_Serie3?: true
    Repetitions_Serie4?: true
  }

  export type ExercicesMinAggregateInputType = {
    Exercice_id?: true
    Exercice_nom?: true
    Exercice_type?: true
    Temps_repos?: true
    Repetitions_Serie1?: true
    Repetitions_Serie2?: true
    Repetitions_Serie3?: true
    Repetitions_Serie4?: true
    Exercice_Description?: true
  }

  export type ExercicesMaxAggregateInputType = {
    Exercice_id?: true
    Exercice_nom?: true
    Exercice_type?: true
    Temps_repos?: true
    Repetitions_Serie1?: true
    Repetitions_Serie2?: true
    Repetitions_Serie3?: true
    Repetitions_Serie4?: true
    Exercice_Description?: true
  }

  export type ExercicesCountAggregateInputType = {
    Exercice_id?: true
    Exercice_nom?: true
    Exercice_type?: true
    Temps_repos?: true
    Repetitions_Serie1?: true
    Repetitions_Serie2?: true
    Repetitions_Serie3?: true
    Repetitions_Serie4?: true
    Exercice_Description?: true
    _all?: true
  }

  export type ExercicesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercices to aggregate.
     */
    where?: ExercicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercices to fetch.
     */
    orderBy?: ExercicesOrderByWithRelationInput | ExercicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExercicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercices
    **/
    _count?: true | ExercicesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExercicesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExercicesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExercicesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExercicesMaxAggregateInputType
  }

  export type GetExercicesAggregateType<T extends ExercicesAggregateArgs> = {
        [P in keyof T & keyof AggregateExercices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercices[P]>
      : GetScalarType<T[P], AggregateExercices[P]>
  }




  export type ExercicesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExercicesWhereInput
    orderBy?: ExercicesOrderByWithAggregationInput | ExercicesOrderByWithAggregationInput[]
    by: ExercicesScalarFieldEnum[] | ExercicesScalarFieldEnum
    having?: ExercicesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExercicesCountAggregateInputType | true
    _avg?: ExercicesAvgAggregateInputType
    _sum?: ExercicesSumAggregateInputType
    _min?: ExercicesMinAggregateInputType
    _max?: ExercicesMaxAggregateInputType
  }

  export type ExercicesGroupByOutputType = {
    Exercice_id: number
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
    _count: ExercicesCountAggregateOutputType | null
    _avg: ExercicesAvgAggregateOutputType | null
    _sum: ExercicesSumAggregateOutputType | null
    _min: ExercicesMinAggregateOutputType | null
    _max: ExercicesMaxAggregateOutputType | null
  }

  type GetExercicesGroupByPayload<T extends ExercicesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExercicesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExercicesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExercicesGroupByOutputType[P]>
            : GetScalarType<T[P], ExercicesGroupByOutputType[P]>
        }
      >
    >


  export type ExercicesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Exercice_id?: boolean
    Exercice_nom?: boolean
    Exercice_type?: boolean
    Temps_repos?: boolean
    Repetitions_Serie1?: boolean
    Repetitions_Serie2?: boolean
    Repetitions_Serie3?: boolean
    Repetitions_Serie4?: boolean
    Exercice_Description?: boolean
    Historique_Sport?: boolean | Exercices$Historique_SportArgs<ExtArgs>
    Seances_Seances_Exercice1_idToExercices?: boolean | Exercices$Seances_Seances_Exercice1_idToExercicesArgs<ExtArgs>
    Seances_Seances_Exercice2_idToExercices?: boolean | Exercices$Seances_Seances_Exercice2_idToExercicesArgs<ExtArgs>
    Seances_Seances_Exercice3_idToExercices?: boolean | Exercices$Seances_Seances_Exercice3_idToExercicesArgs<ExtArgs>
    Seances_Seances_Exercice4_idToExercices?: boolean | Exercices$Seances_Seances_Exercice4_idToExercicesArgs<ExtArgs>
    _count?: boolean | ExercicesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercices"]>

  export type ExercicesSelectScalar = {
    Exercice_id?: boolean
    Exercice_nom?: boolean
    Exercice_type?: boolean
    Temps_repos?: boolean
    Repetitions_Serie1?: boolean
    Repetitions_Serie2?: boolean
    Repetitions_Serie3?: boolean
    Repetitions_Serie4?: boolean
    Exercice_Description?: boolean
  }

  export type ExercicesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Historique_Sport?: boolean | Exercices$Historique_SportArgs<ExtArgs>
    Seances_Seances_Exercice1_idToExercices?: boolean | Exercices$Seances_Seances_Exercice1_idToExercicesArgs<ExtArgs>
    Seances_Seances_Exercice2_idToExercices?: boolean | Exercices$Seances_Seances_Exercice2_idToExercicesArgs<ExtArgs>
    Seances_Seances_Exercice3_idToExercices?: boolean | Exercices$Seances_Seances_Exercice3_idToExercicesArgs<ExtArgs>
    Seances_Seances_Exercice4_idToExercices?: boolean | Exercices$Seances_Seances_Exercice4_idToExercicesArgs<ExtArgs>
    _count?: boolean | ExercicesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ExercicesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exercices"
    objects: {
      Historique_Sport: Prisma.$Historique_SportPayload<ExtArgs>[]
      Seances_Seances_Exercice1_idToExercices: Prisma.$SeancesPayload<ExtArgs>[]
      Seances_Seances_Exercice2_idToExercices: Prisma.$SeancesPayload<ExtArgs>[]
      Seances_Seances_Exercice3_idToExercices: Prisma.$SeancesPayload<ExtArgs>[]
      Seances_Seances_Exercice4_idToExercices: Prisma.$SeancesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Exercice_id: number
      Exercice_nom: string
      Exercice_type: string
      Temps_repos: number
      Repetitions_Serie1: number
      Repetitions_Serie2: number
      Repetitions_Serie3: number
      Repetitions_Serie4: number
      Exercice_Description: string
    }, ExtArgs["result"]["exercices"]>
    composites: {}
  }


  type ExercicesGetPayload<S extends boolean | null | undefined | ExercicesDefaultArgs> = $Result.GetResult<Prisma.$ExercicesPayload, S>

  type ExercicesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExercicesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExercicesCountAggregateInputType | true
    }

  export interface ExercicesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercices'], meta: { name: 'Exercices' } }
    /**
     * Find zero or one Exercices that matches the filter.
     * @param {ExercicesFindUniqueArgs} args - Arguments to find a Exercices
     * @example
     * // Get one Exercices
     * const exercices = await prisma.exercices.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExercicesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExercicesFindUniqueArgs<ExtArgs>>
    ): Prisma__ExercicesClient<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exercices that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExercicesFindUniqueOrThrowArgs} args - Arguments to find a Exercices
     * @example
     * // Get one Exercices
     * const exercices = await prisma.exercices.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExercicesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercicesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExercicesClient<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exercices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicesFindFirstArgs} args - Arguments to find a Exercices
     * @example
     * // Get one Exercices
     * const exercices = await prisma.exercices.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExercicesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercicesFindFirstArgs<ExtArgs>>
    ): Prisma__ExercicesClient<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exercices that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicesFindFirstOrThrowArgs} args - Arguments to find a Exercices
     * @example
     * // Get one Exercices
     * const exercices = await prisma.exercices.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExercicesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercicesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExercicesClient<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exercices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercices
     * const exercices = await prisma.exercices.findMany()
     * 
     * // Get first 10 Exercices
     * const exercices = await prisma.exercices.findMany({ take: 10 })
     * 
     * // Only select the `Exercice_id`
     * const exercicesWithExercice_idOnly = await prisma.exercices.findMany({ select: { Exercice_id: true } })
     * 
    **/
    findMany<T extends ExercicesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercicesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exercices.
     * @param {ExercicesCreateArgs} args - Arguments to create a Exercices.
     * @example
     * // Create one Exercices
     * const Exercices = await prisma.exercices.create({
     *   data: {
     *     // ... data to create a Exercices
     *   }
     * })
     * 
    **/
    create<T extends ExercicesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExercicesCreateArgs<ExtArgs>>
    ): Prisma__ExercicesClient<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exercices.
     *     @param {ExercicesCreateManyArgs} args - Arguments to create many Exercices.
     *     @example
     *     // Create many Exercices
     *     const exercices = await prisma.exercices.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExercicesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercicesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exercices.
     * @param {ExercicesDeleteArgs} args - Arguments to delete one Exercices.
     * @example
     * // Delete one Exercices
     * const Exercices = await prisma.exercices.delete({
     *   where: {
     *     // ... filter to delete one Exercices
     *   }
     * })
     * 
    **/
    delete<T extends ExercicesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExercicesDeleteArgs<ExtArgs>>
    ): Prisma__ExercicesClient<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exercices.
     * @param {ExercicesUpdateArgs} args - Arguments to update one Exercices.
     * @example
     * // Update one Exercices
     * const exercices = await prisma.exercices.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExercicesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExercicesUpdateArgs<ExtArgs>>
    ): Prisma__ExercicesClient<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exercices.
     * @param {ExercicesDeleteManyArgs} args - Arguments to filter Exercices to delete.
     * @example
     * // Delete a few Exercices
     * const { count } = await prisma.exercices.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExercicesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercicesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercices
     * const exercices = await prisma.exercices.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExercicesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExercicesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exercices.
     * @param {ExercicesUpsertArgs} args - Arguments to update or create a Exercices.
     * @example
     * // Update or create a Exercices
     * const exercices = await prisma.exercices.upsert({
     *   create: {
     *     // ... data to create a Exercices
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercices we want to update
     *   }
     * })
    **/
    upsert<T extends ExercicesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExercicesUpsertArgs<ExtArgs>>
    ): Prisma__ExercicesClient<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Exercices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicesCountArgs} args - Arguments to filter Exercices to count.
     * @example
     * // Count the number of Exercices
     * const count = await prisma.exercices.count({
     *   where: {
     *     // ... the filter for the Exercices we want to count
     *   }
     * })
    **/
    count<T extends ExercicesCountArgs>(
      args?: Subset<T, ExercicesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExercicesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExercicesAggregateArgs>(args: Subset<T, ExercicesAggregateArgs>): Prisma.PrismaPromise<GetExercicesAggregateType<T>>

    /**
     * Group by Exercices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExercicesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExercicesGroupByArgs['orderBy'] }
        : { orderBy?: ExercicesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExercicesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExercicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercices model
   */
  readonly fields: ExercicesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercices.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExercicesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Historique_Sport<T extends Exercices$Historique_SportArgs<ExtArgs> = {}>(args?: Subset<T, Exercices$Historique_SportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Historique_SportPayload<ExtArgs>, T, 'findMany'> | Null>;

    Seances_Seances_Exercice1_idToExercices<T extends Exercices$Seances_Seances_Exercice1_idToExercicesArgs<ExtArgs> = {}>(args?: Subset<T, Exercices$Seances_Seances_Exercice1_idToExercicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'findMany'> | Null>;

    Seances_Seances_Exercice2_idToExercices<T extends Exercices$Seances_Seances_Exercice2_idToExercicesArgs<ExtArgs> = {}>(args?: Subset<T, Exercices$Seances_Seances_Exercice2_idToExercicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'findMany'> | Null>;

    Seances_Seances_Exercice3_idToExercices<T extends Exercices$Seances_Seances_Exercice3_idToExercicesArgs<ExtArgs> = {}>(args?: Subset<T, Exercices$Seances_Seances_Exercice3_idToExercicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'findMany'> | Null>;

    Seances_Seances_Exercice4_idToExercices<T extends Exercices$Seances_Seances_Exercice4_idToExercicesArgs<ExtArgs> = {}>(args?: Subset<T, Exercices$Seances_Seances_Exercice4_idToExercicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Exercices model
   */ 
  interface ExercicesFieldRefs {
    readonly Exercice_id: FieldRef<"Exercices", 'Int'>
    readonly Exercice_nom: FieldRef<"Exercices", 'String'>
    readonly Exercice_type: FieldRef<"Exercices", 'String'>
    readonly Temps_repos: FieldRef<"Exercices", 'Int'>
    readonly Repetitions_Serie1: FieldRef<"Exercices", 'Int'>
    readonly Repetitions_Serie2: FieldRef<"Exercices", 'Int'>
    readonly Repetitions_Serie3: FieldRef<"Exercices", 'Int'>
    readonly Repetitions_Serie4: FieldRef<"Exercices", 'Int'>
    readonly Exercice_Description: FieldRef<"Exercices", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Exercices findUnique
   */
  export type ExercicesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercices
     */
    select?: ExercicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicesInclude<ExtArgs> | null
    /**
     * Filter, which Exercices to fetch.
     */
    where: ExercicesWhereUniqueInput
  }


  /**
   * Exercices findUniqueOrThrow
   */
  export type ExercicesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercices
     */
    select?: ExercicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicesInclude<ExtArgs> | null
    /**
     * Filter, which Exercices to fetch.
     */
    where: ExercicesWhereUniqueInput
  }


  /**
   * Exercices findFirst
   */
  export type ExercicesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercices
     */
    select?: ExercicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicesInclude<ExtArgs> | null
    /**
     * Filter, which Exercices to fetch.
     */
    where?: ExercicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercices to fetch.
     */
    orderBy?: ExercicesOrderByWithRelationInput | ExercicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercices.
     */
    cursor?: ExercicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercices.
     */
    distinct?: ExercicesScalarFieldEnum | ExercicesScalarFieldEnum[]
  }


  /**
   * Exercices findFirstOrThrow
   */
  export type ExercicesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercices
     */
    select?: ExercicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicesInclude<ExtArgs> | null
    /**
     * Filter, which Exercices to fetch.
     */
    where?: ExercicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercices to fetch.
     */
    orderBy?: ExercicesOrderByWithRelationInput | ExercicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercices.
     */
    cursor?: ExercicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercices.
     */
    distinct?: ExercicesScalarFieldEnum | ExercicesScalarFieldEnum[]
  }


  /**
   * Exercices findMany
   */
  export type ExercicesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercices
     */
    select?: ExercicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicesInclude<ExtArgs> | null
    /**
     * Filter, which Exercices to fetch.
     */
    where?: ExercicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercices to fetch.
     */
    orderBy?: ExercicesOrderByWithRelationInput | ExercicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercices.
     */
    cursor?: ExercicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercices.
     */
    skip?: number
    distinct?: ExercicesScalarFieldEnum | ExercicesScalarFieldEnum[]
  }


  /**
   * Exercices create
   */
  export type ExercicesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercices
     */
    select?: ExercicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicesInclude<ExtArgs> | null
    /**
     * The data needed to create a Exercices.
     */
    data: XOR<ExercicesCreateInput, ExercicesUncheckedCreateInput>
  }


  /**
   * Exercices createMany
   */
  export type ExercicesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercices.
     */
    data: ExercicesCreateManyInput | ExercicesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Exercices update
   */
  export type ExercicesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercices
     */
    select?: ExercicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicesInclude<ExtArgs> | null
    /**
     * The data needed to update a Exercices.
     */
    data: XOR<ExercicesUpdateInput, ExercicesUncheckedUpdateInput>
    /**
     * Choose, which Exercices to update.
     */
    where: ExercicesWhereUniqueInput
  }


  /**
   * Exercices updateMany
   */
  export type ExercicesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercices.
     */
    data: XOR<ExercicesUpdateManyMutationInput, ExercicesUncheckedUpdateManyInput>
    /**
     * Filter which Exercices to update
     */
    where?: ExercicesWhereInput
  }


  /**
   * Exercices upsert
   */
  export type ExercicesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercices
     */
    select?: ExercicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicesInclude<ExtArgs> | null
    /**
     * The filter to search for the Exercices to update in case it exists.
     */
    where: ExercicesWhereUniqueInput
    /**
     * In case the Exercices found by the `where` argument doesn't exist, create a new Exercices with this data.
     */
    create: XOR<ExercicesCreateInput, ExercicesUncheckedCreateInput>
    /**
     * In case the Exercices was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExercicesUpdateInput, ExercicesUncheckedUpdateInput>
  }


  /**
   * Exercices delete
   */
  export type ExercicesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercices
     */
    select?: ExercicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicesInclude<ExtArgs> | null
    /**
     * Filter which Exercices to delete.
     */
    where: ExercicesWhereUniqueInput
  }


  /**
   * Exercices deleteMany
   */
  export type ExercicesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercices to delete
     */
    where?: ExercicesWhereInput
  }


  /**
   * Exercices.Historique_Sport
   */
  export type Exercices$Historique_SportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sport
     */
    select?: Historique_SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SportInclude<ExtArgs> | null
    where?: Historique_SportWhereInput
    orderBy?: Historique_SportOrderByWithRelationInput | Historique_SportOrderByWithRelationInput[]
    cursor?: Historique_SportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Historique_SportScalarFieldEnum | Historique_SportScalarFieldEnum[]
  }


  /**
   * Exercices.Seances_Seances_Exercice1_idToExercices
   */
  export type Exercices$Seances_Seances_Exercice1_idToExercicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
    where?: SeancesWhereInput
    orderBy?: SeancesOrderByWithRelationInput | SeancesOrderByWithRelationInput[]
    cursor?: SeancesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeancesScalarFieldEnum | SeancesScalarFieldEnum[]
  }


  /**
   * Exercices.Seances_Seances_Exercice2_idToExercices
   */
  export type Exercices$Seances_Seances_Exercice2_idToExercicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
    where?: SeancesWhereInput
    orderBy?: SeancesOrderByWithRelationInput | SeancesOrderByWithRelationInput[]
    cursor?: SeancesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeancesScalarFieldEnum | SeancesScalarFieldEnum[]
  }


  /**
   * Exercices.Seances_Seances_Exercice3_idToExercices
   */
  export type Exercices$Seances_Seances_Exercice3_idToExercicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
    where?: SeancesWhereInput
    orderBy?: SeancesOrderByWithRelationInput | SeancesOrderByWithRelationInput[]
    cursor?: SeancesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeancesScalarFieldEnum | SeancesScalarFieldEnum[]
  }


  /**
   * Exercices.Seances_Seances_Exercice4_idToExercices
   */
  export type Exercices$Seances_Seances_Exercice4_idToExercicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
    where?: SeancesWhereInput
    orderBy?: SeancesOrderByWithRelationInput | SeancesOrderByWithRelationInput[]
    cursor?: SeancesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeancesScalarFieldEnum | SeancesScalarFieldEnum[]
  }


  /**
   * Exercices without action
   */
  export type ExercicesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercices
     */
    select?: ExercicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicesInclude<ExtArgs> | null
  }



  /**
   * Model Historique_Sante
   */

  export type AggregateHistorique_Sante = {
    _count: Historique_SanteCountAggregateOutputType | null
    _avg: Historique_SanteAvgAggregateOutputType | null
    _sum: Historique_SanteSumAggregateOutputType | null
    _min: Historique_SanteMinAggregateOutputType | null
    _max: Historique_SanteMaxAggregateOutputType | null
  }

  export type Historique_SanteAvgAggregateOutputType = {
    Historique_Sante_id: number | null
    Objectif_Sante_id: number | null
    Poids: number | null
    Nombre_pas: number | null
    Sommeil: number | null
    Eau: number | null
  }

  export type Historique_SanteSumAggregateOutputType = {
    Historique_Sante_id: number | null
    Objectif_Sante_id: number | null
    Poids: number | null
    Nombre_pas: number | null
    Sommeil: number | null
    Eau: number | null
  }

  export type Historique_SanteMinAggregateOutputType = {
    Historique_Sante_id: number | null
    Objectif_Sante_id: number | null
    Poids: number | null
    Date: Date | null
    Nombre_pas: number | null
    Sommeil: number | null
    Eau: number | null
  }

  export type Historique_SanteMaxAggregateOutputType = {
    Historique_Sante_id: number | null
    Objectif_Sante_id: number | null
    Poids: number | null
    Date: Date | null
    Nombre_pas: number | null
    Sommeil: number | null
    Eau: number | null
  }

  export type Historique_SanteCountAggregateOutputType = {
    Historique_Sante_id: number
    Objectif_Sante_id: number
    Poids: number
    Date: number
    Nombre_pas: number
    Sommeil: number
    Eau: number
    _all: number
  }


  export type Historique_SanteAvgAggregateInputType = {
    Historique_Sante_id?: true
    Objectif_Sante_id?: true
    Poids?: true
    Nombre_pas?: true
    Sommeil?: true
    Eau?: true
  }

  export type Historique_SanteSumAggregateInputType = {
    Historique_Sante_id?: true
    Objectif_Sante_id?: true
    Poids?: true
    Nombre_pas?: true
    Sommeil?: true
    Eau?: true
  }

  export type Historique_SanteMinAggregateInputType = {
    Historique_Sante_id?: true
    Objectif_Sante_id?: true
    Poids?: true
    Date?: true
    Nombre_pas?: true
    Sommeil?: true
    Eau?: true
  }

  export type Historique_SanteMaxAggregateInputType = {
    Historique_Sante_id?: true
    Objectif_Sante_id?: true
    Poids?: true
    Date?: true
    Nombre_pas?: true
    Sommeil?: true
    Eau?: true
  }

  export type Historique_SanteCountAggregateInputType = {
    Historique_Sante_id?: true
    Objectif_Sante_id?: true
    Poids?: true
    Date?: true
    Nombre_pas?: true
    Sommeil?: true
    Eau?: true
    _all?: true
  }

  export type Historique_SanteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Historique_Sante to aggregate.
     */
    where?: Historique_SanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historique_Santes to fetch.
     */
    orderBy?: Historique_SanteOrderByWithRelationInput | Historique_SanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Historique_SanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historique_Santes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historique_Santes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Historique_Santes
    **/
    _count?: true | Historique_SanteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Historique_SanteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Historique_SanteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Historique_SanteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Historique_SanteMaxAggregateInputType
  }

  export type GetHistorique_SanteAggregateType<T extends Historique_SanteAggregateArgs> = {
        [P in keyof T & keyof AggregateHistorique_Sante]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistorique_Sante[P]>
      : GetScalarType<T[P], AggregateHistorique_Sante[P]>
  }




  export type Historique_SanteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Historique_SanteWhereInput
    orderBy?: Historique_SanteOrderByWithAggregationInput | Historique_SanteOrderByWithAggregationInput[]
    by: Historique_SanteScalarFieldEnum[] | Historique_SanteScalarFieldEnum
    having?: Historique_SanteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Historique_SanteCountAggregateInputType | true
    _avg?: Historique_SanteAvgAggregateInputType
    _sum?: Historique_SanteSumAggregateInputType
    _min?: Historique_SanteMinAggregateInputType
    _max?: Historique_SanteMaxAggregateInputType
  }

  export type Historique_SanteGroupByOutputType = {
    Historique_Sante_id: number
    Objectif_Sante_id: number
    Poids: number
    Date: Date
    Nombre_pas: number
    Sommeil: number
    Eau: number
    _count: Historique_SanteCountAggregateOutputType | null
    _avg: Historique_SanteAvgAggregateOutputType | null
    _sum: Historique_SanteSumAggregateOutputType | null
    _min: Historique_SanteMinAggregateOutputType | null
    _max: Historique_SanteMaxAggregateOutputType | null
  }

  type GetHistorique_SanteGroupByPayload<T extends Historique_SanteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Historique_SanteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Historique_SanteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Historique_SanteGroupByOutputType[P]>
            : GetScalarType<T[P], Historique_SanteGroupByOutputType[P]>
        }
      >
    >


  export type Historique_SanteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Historique_Sante_id?: boolean
    Objectif_Sante_id?: boolean
    Poids?: boolean
    Date?: boolean
    Nombre_pas?: boolean
    Sommeil?: boolean
    Eau?: boolean
    Objectif_Sante?: boolean | Objectif_SanteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historique_Sante"]>

  export type Historique_SanteSelectScalar = {
    Historique_Sante_id?: boolean
    Objectif_Sante_id?: boolean
    Poids?: boolean
    Date?: boolean
    Nombre_pas?: boolean
    Sommeil?: boolean
    Eau?: boolean
  }

  export type Historique_SanteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Objectif_Sante?: boolean | Objectif_SanteDefaultArgs<ExtArgs>
  }


  export type $Historique_SantePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Historique_Sante"
    objects: {
      Objectif_Sante: Prisma.$Objectif_SantePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Historique_Sante_id: number
      Objectif_Sante_id: number
      Poids: number
      Date: Date
      Nombre_pas: number
      Sommeil: number
      Eau: number
    }, ExtArgs["result"]["historique_Sante"]>
    composites: {}
  }


  type Historique_SanteGetPayload<S extends boolean | null | undefined | Historique_SanteDefaultArgs> = $Result.GetResult<Prisma.$Historique_SantePayload, S>

  type Historique_SanteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Historique_SanteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Historique_SanteCountAggregateInputType | true
    }

  export interface Historique_SanteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Historique_Sante'], meta: { name: 'Historique_Sante' } }
    /**
     * Find zero or one Historique_Sante that matches the filter.
     * @param {Historique_SanteFindUniqueArgs} args - Arguments to find a Historique_Sante
     * @example
     * // Get one Historique_Sante
     * const historique_Sante = await prisma.historique_Sante.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Historique_SanteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Historique_SanteFindUniqueArgs<ExtArgs>>
    ): Prisma__Historique_SanteClient<$Result.GetResult<Prisma.$Historique_SantePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Historique_Sante that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Historique_SanteFindUniqueOrThrowArgs} args - Arguments to find a Historique_Sante
     * @example
     * // Get one Historique_Sante
     * const historique_Sante = await prisma.historique_Sante.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Historique_SanteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Historique_SanteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Historique_SanteClient<$Result.GetResult<Prisma.$Historique_SantePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Historique_Sante that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SanteFindFirstArgs} args - Arguments to find a Historique_Sante
     * @example
     * // Get one Historique_Sante
     * const historique_Sante = await prisma.historique_Sante.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Historique_SanteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Historique_SanteFindFirstArgs<ExtArgs>>
    ): Prisma__Historique_SanteClient<$Result.GetResult<Prisma.$Historique_SantePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Historique_Sante that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SanteFindFirstOrThrowArgs} args - Arguments to find a Historique_Sante
     * @example
     * // Get one Historique_Sante
     * const historique_Sante = await prisma.historique_Sante.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Historique_SanteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Historique_SanteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Historique_SanteClient<$Result.GetResult<Prisma.$Historique_SantePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Historique_Santes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SanteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Historique_Santes
     * const historique_Santes = await prisma.historique_Sante.findMany()
     * 
     * // Get first 10 Historique_Santes
     * const historique_Santes = await prisma.historique_Sante.findMany({ take: 10 })
     * 
     * // Only select the `Historique_Sante_id`
     * const historique_SanteWithHistorique_Sante_idOnly = await prisma.historique_Sante.findMany({ select: { Historique_Sante_id: true } })
     * 
    **/
    findMany<T extends Historique_SanteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Historique_SanteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Historique_SantePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Historique_Sante.
     * @param {Historique_SanteCreateArgs} args - Arguments to create a Historique_Sante.
     * @example
     * // Create one Historique_Sante
     * const Historique_Sante = await prisma.historique_Sante.create({
     *   data: {
     *     // ... data to create a Historique_Sante
     *   }
     * })
     * 
    **/
    create<T extends Historique_SanteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Historique_SanteCreateArgs<ExtArgs>>
    ): Prisma__Historique_SanteClient<$Result.GetResult<Prisma.$Historique_SantePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Historique_Santes.
     *     @param {Historique_SanteCreateManyArgs} args - Arguments to create many Historique_Santes.
     *     @example
     *     // Create many Historique_Santes
     *     const historique_Sante = await prisma.historique_Sante.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Historique_SanteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Historique_SanteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Historique_Sante.
     * @param {Historique_SanteDeleteArgs} args - Arguments to delete one Historique_Sante.
     * @example
     * // Delete one Historique_Sante
     * const Historique_Sante = await prisma.historique_Sante.delete({
     *   where: {
     *     // ... filter to delete one Historique_Sante
     *   }
     * })
     * 
    **/
    delete<T extends Historique_SanteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Historique_SanteDeleteArgs<ExtArgs>>
    ): Prisma__Historique_SanteClient<$Result.GetResult<Prisma.$Historique_SantePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Historique_Sante.
     * @param {Historique_SanteUpdateArgs} args - Arguments to update one Historique_Sante.
     * @example
     * // Update one Historique_Sante
     * const historique_Sante = await prisma.historique_Sante.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Historique_SanteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Historique_SanteUpdateArgs<ExtArgs>>
    ): Prisma__Historique_SanteClient<$Result.GetResult<Prisma.$Historique_SantePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Historique_Santes.
     * @param {Historique_SanteDeleteManyArgs} args - Arguments to filter Historique_Santes to delete.
     * @example
     * // Delete a few Historique_Santes
     * const { count } = await prisma.historique_Sante.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Historique_SanteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Historique_SanteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Historique_Santes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SanteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Historique_Santes
     * const historique_Sante = await prisma.historique_Sante.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Historique_SanteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Historique_SanteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Historique_Sante.
     * @param {Historique_SanteUpsertArgs} args - Arguments to update or create a Historique_Sante.
     * @example
     * // Update or create a Historique_Sante
     * const historique_Sante = await prisma.historique_Sante.upsert({
     *   create: {
     *     // ... data to create a Historique_Sante
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Historique_Sante we want to update
     *   }
     * })
    **/
    upsert<T extends Historique_SanteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Historique_SanteUpsertArgs<ExtArgs>>
    ): Prisma__Historique_SanteClient<$Result.GetResult<Prisma.$Historique_SantePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Historique_Santes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SanteCountArgs} args - Arguments to filter Historique_Santes to count.
     * @example
     * // Count the number of Historique_Santes
     * const count = await prisma.historique_Sante.count({
     *   where: {
     *     // ... the filter for the Historique_Santes we want to count
     *   }
     * })
    **/
    count<T extends Historique_SanteCountArgs>(
      args?: Subset<T, Historique_SanteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Historique_SanteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Historique_Sante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SanteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Historique_SanteAggregateArgs>(args: Subset<T, Historique_SanteAggregateArgs>): Prisma.PrismaPromise<GetHistorique_SanteAggregateType<T>>

    /**
     * Group by Historique_Sante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SanteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Historique_SanteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Historique_SanteGroupByArgs['orderBy'] }
        : { orderBy?: Historique_SanteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Historique_SanteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistorique_SanteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Historique_Sante model
   */
  readonly fields: Historique_SanteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Historique_Sante.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Historique_SanteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Objectif_Sante<T extends Objectif_SanteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Objectif_SanteDefaultArgs<ExtArgs>>): Prisma__Objectif_SanteClient<$Result.GetResult<Prisma.$Objectif_SantePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Historique_Sante model
   */ 
  interface Historique_SanteFieldRefs {
    readonly Historique_Sante_id: FieldRef<"Historique_Sante", 'Int'>
    readonly Objectif_Sante_id: FieldRef<"Historique_Sante", 'Int'>
    readonly Poids: FieldRef<"Historique_Sante", 'Int'>
    readonly Date: FieldRef<"Historique_Sante", 'DateTime'>
    readonly Nombre_pas: FieldRef<"Historique_Sante", 'Int'>
    readonly Sommeil: FieldRef<"Historique_Sante", 'Int'>
    readonly Eau: FieldRef<"Historique_Sante", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Historique_Sante findUnique
   */
  export type Historique_SanteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sante
     */
    select?: Historique_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SanteInclude<ExtArgs> | null
    /**
     * Filter, which Historique_Sante to fetch.
     */
    where: Historique_SanteWhereUniqueInput
  }


  /**
   * Historique_Sante findUniqueOrThrow
   */
  export type Historique_SanteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sante
     */
    select?: Historique_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SanteInclude<ExtArgs> | null
    /**
     * Filter, which Historique_Sante to fetch.
     */
    where: Historique_SanteWhereUniqueInput
  }


  /**
   * Historique_Sante findFirst
   */
  export type Historique_SanteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sante
     */
    select?: Historique_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SanteInclude<ExtArgs> | null
    /**
     * Filter, which Historique_Sante to fetch.
     */
    where?: Historique_SanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historique_Santes to fetch.
     */
    orderBy?: Historique_SanteOrderByWithRelationInput | Historique_SanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Historique_Santes.
     */
    cursor?: Historique_SanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historique_Santes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historique_Santes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Historique_Santes.
     */
    distinct?: Historique_SanteScalarFieldEnum | Historique_SanteScalarFieldEnum[]
  }


  /**
   * Historique_Sante findFirstOrThrow
   */
  export type Historique_SanteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sante
     */
    select?: Historique_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SanteInclude<ExtArgs> | null
    /**
     * Filter, which Historique_Sante to fetch.
     */
    where?: Historique_SanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historique_Santes to fetch.
     */
    orderBy?: Historique_SanteOrderByWithRelationInput | Historique_SanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Historique_Santes.
     */
    cursor?: Historique_SanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historique_Santes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historique_Santes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Historique_Santes.
     */
    distinct?: Historique_SanteScalarFieldEnum | Historique_SanteScalarFieldEnum[]
  }


  /**
   * Historique_Sante findMany
   */
  export type Historique_SanteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sante
     */
    select?: Historique_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SanteInclude<ExtArgs> | null
    /**
     * Filter, which Historique_Santes to fetch.
     */
    where?: Historique_SanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historique_Santes to fetch.
     */
    orderBy?: Historique_SanteOrderByWithRelationInput | Historique_SanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Historique_Santes.
     */
    cursor?: Historique_SanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historique_Santes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historique_Santes.
     */
    skip?: number
    distinct?: Historique_SanteScalarFieldEnum | Historique_SanteScalarFieldEnum[]
  }


  /**
   * Historique_Sante create
   */
  export type Historique_SanteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sante
     */
    select?: Historique_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SanteInclude<ExtArgs> | null
    /**
     * The data needed to create a Historique_Sante.
     */
    data: XOR<Historique_SanteCreateInput, Historique_SanteUncheckedCreateInput>
  }


  /**
   * Historique_Sante createMany
   */
  export type Historique_SanteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Historique_Santes.
     */
    data: Historique_SanteCreateManyInput | Historique_SanteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Historique_Sante update
   */
  export type Historique_SanteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sante
     */
    select?: Historique_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SanteInclude<ExtArgs> | null
    /**
     * The data needed to update a Historique_Sante.
     */
    data: XOR<Historique_SanteUpdateInput, Historique_SanteUncheckedUpdateInput>
    /**
     * Choose, which Historique_Sante to update.
     */
    where: Historique_SanteWhereUniqueInput
  }


  /**
   * Historique_Sante updateMany
   */
  export type Historique_SanteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Historique_Santes.
     */
    data: XOR<Historique_SanteUpdateManyMutationInput, Historique_SanteUncheckedUpdateManyInput>
    /**
     * Filter which Historique_Santes to update
     */
    where?: Historique_SanteWhereInput
  }


  /**
   * Historique_Sante upsert
   */
  export type Historique_SanteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sante
     */
    select?: Historique_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SanteInclude<ExtArgs> | null
    /**
     * The filter to search for the Historique_Sante to update in case it exists.
     */
    where: Historique_SanteWhereUniqueInput
    /**
     * In case the Historique_Sante found by the `where` argument doesn't exist, create a new Historique_Sante with this data.
     */
    create: XOR<Historique_SanteCreateInput, Historique_SanteUncheckedCreateInput>
    /**
     * In case the Historique_Sante was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Historique_SanteUpdateInput, Historique_SanteUncheckedUpdateInput>
  }


  /**
   * Historique_Sante delete
   */
  export type Historique_SanteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sante
     */
    select?: Historique_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SanteInclude<ExtArgs> | null
    /**
     * Filter which Historique_Sante to delete.
     */
    where: Historique_SanteWhereUniqueInput
  }


  /**
   * Historique_Sante deleteMany
   */
  export type Historique_SanteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Historique_Santes to delete
     */
    where?: Historique_SanteWhereInput
  }


  /**
   * Historique_Sante without action
   */
  export type Historique_SanteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sante
     */
    select?: Historique_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SanteInclude<ExtArgs> | null
  }



  /**
   * Model Historique_Sport
   */

  export type AggregateHistorique_Sport = {
    _count: Historique_SportCountAggregateOutputType | null
    _avg: Historique_SportAvgAggregateOutputType | null
    _sum: Historique_SportSumAggregateOutputType | null
    _min: Historique_SportMinAggregateOutputType | null
    _max: Historique_SportMaxAggregateOutputType | null
  }

  export type Historique_SportAvgAggregateOutputType = {
    Historique_id: number | null
    Utilisateur_id: number | null
    Exercice_id: number | null
    Poids_Serie1: number | null
    Poids_Serie2: number | null
    Poids_Serie3: number | null
    Poids_serie4: number | null
    Repetitions: number | null
    Serie: number | null
  }

  export type Historique_SportSumAggregateOutputType = {
    Historique_id: number | null
    Utilisateur_id: number | null
    Exercice_id: number | null
    Poids_Serie1: number | null
    Poids_Serie2: number | null
    Poids_Serie3: number | null
    Poids_serie4: number | null
    Repetitions: number | null
    Serie: number | null
  }

  export type Historique_SportMinAggregateOutputType = {
    Historique_id: number | null
    Utilisateur_id: number | null
    Exercice_id: number | null
    Date: Date | null
    Poids_Serie1: number | null
    Poids_Serie2: number | null
    Poids_Serie3: number | null
    Poids_serie4: number | null
    Repetitions: number | null
    Note: string | null
    Serie: number | null
  }

  export type Historique_SportMaxAggregateOutputType = {
    Historique_id: number | null
    Utilisateur_id: number | null
    Exercice_id: number | null
    Date: Date | null
    Poids_Serie1: number | null
    Poids_Serie2: number | null
    Poids_Serie3: number | null
    Poids_serie4: number | null
    Repetitions: number | null
    Note: string | null
    Serie: number | null
  }

  export type Historique_SportCountAggregateOutputType = {
    Historique_id: number
    Utilisateur_id: number
    Exercice_id: number
    Date: number
    Poids_Serie1: number
    Poids_Serie2: number
    Poids_Serie3: number
    Poids_serie4: number
    Repetitions: number
    Note: number
    Serie: number
    _all: number
  }


  export type Historique_SportAvgAggregateInputType = {
    Historique_id?: true
    Utilisateur_id?: true
    Exercice_id?: true
    Poids_Serie1?: true
    Poids_Serie2?: true
    Poids_Serie3?: true
    Poids_serie4?: true
    Repetitions?: true
    Serie?: true
  }

  export type Historique_SportSumAggregateInputType = {
    Historique_id?: true
    Utilisateur_id?: true
    Exercice_id?: true
    Poids_Serie1?: true
    Poids_Serie2?: true
    Poids_Serie3?: true
    Poids_serie4?: true
    Repetitions?: true
    Serie?: true
  }

  export type Historique_SportMinAggregateInputType = {
    Historique_id?: true
    Utilisateur_id?: true
    Exercice_id?: true
    Date?: true
    Poids_Serie1?: true
    Poids_Serie2?: true
    Poids_Serie3?: true
    Poids_serie4?: true
    Repetitions?: true
    Note?: true
    Serie?: true
  }

  export type Historique_SportMaxAggregateInputType = {
    Historique_id?: true
    Utilisateur_id?: true
    Exercice_id?: true
    Date?: true
    Poids_Serie1?: true
    Poids_Serie2?: true
    Poids_Serie3?: true
    Poids_serie4?: true
    Repetitions?: true
    Note?: true
    Serie?: true
  }

  export type Historique_SportCountAggregateInputType = {
    Historique_id?: true
    Utilisateur_id?: true
    Exercice_id?: true
    Date?: true
    Poids_Serie1?: true
    Poids_Serie2?: true
    Poids_Serie3?: true
    Poids_serie4?: true
    Repetitions?: true
    Note?: true
    Serie?: true
    _all?: true
  }

  export type Historique_SportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Historique_Sport to aggregate.
     */
    where?: Historique_SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historique_Sports to fetch.
     */
    orderBy?: Historique_SportOrderByWithRelationInput | Historique_SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Historique_SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historique_Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historique_Sports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Historique_Sports
    **/
    _count?: true | Historique_SportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Historique_SportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Historique_SportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Historique_SportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Historique_SportMaxAggregateInputType
  }

  export type GetHistorique_SportAggregateType<T extends Historique_SportAggregateArgs> = {
        [P in keyof T & keyof AggregateHistorique_Sport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistorique_Sport[P]>
      : GetScalarType<T[P], AggregateHistorique_Sport[P]>
  }




  export type Historique_SportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Historique_SportWhereInput
    orderBy?: Historique_SportOrderByWithAggregationInput | Historique_SportOrderByWithAggregationInput[]
    by: Historique_SportScalarFieldEnum[] | Historique_SportScalarFieldEnum
    having?: Historique_SportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Historique_SportCountAggregateInputType | true
    _avg?: Historique_SportAvgAggregateInputType
    _sum?: Historique_SportSumAggregateInputType
    _min?: Historique_SportMinAggregateInputType
    _max?: Historique_SportMaxAggregateInputType
  }

  export type Historique_SportGroupByOutputType = {
    Historique_id: number
    Utilisateur_id: number
    Exercice_id: number
    Date: Date
    Poids_Serie1: number
    Poids_Serie2: number
    Poids_Serie3: number
    Poids_serie4: number
    Repetitions: number
    Note: string
    Serie: number
    _count: Historique_SportCountAggregateOutputType | null
    _avg: Historique_SportAvgAggregateOutputType | null
    _sum: Historique_SportSumAggregateOutputType | null
    _min: Historique_SportMinAggregateOutputType | null
    _max: Historique_SportMaxAggregateOutputType | null
  }

  type GetHistorique_SportGroupByPayload<T extends Historique_SportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Historique_SportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Historique_SportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Historique_SportGroupByOutputType[P]>
            : GetScalarType<T[P], Historique_SportGroupByOutputType[P]>
        }
      >
    >


  export type Historique_SportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Historique_id?: boolean
    Utilisateur_id?: boolean
    Exercice_id?: boolean
    Date?: boolean
    Poids_Serie1?: boolean
    Poids_Serie2?: boolean
    Poids_Serie3?: boolean
    Poids_serie4?: boolean
    Repetitions?: boolean
    Note?: boolean
    Serie?: boolean
    Utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    Exercices?: boolean | ExercicesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historique_Sport"]>

  export type Historique_SportSelectScalar = {
    Historique_id?: boolean
    Utilisateur_id?: boolean
    Exercice_id?: boolean
    Date?: boolean
    Poids_Serie1?: boolean
    Poids_Serie2?: boolean
    Poids_Serie3?: boolean
    Poids_serie4?: boolean
    Repetitions?: boolean
    Note?: boolean
    Serie?: boolean
  }

  export type Historique_SportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    Exercices?: boolean | ExercicesDefaultArgs<ExtArgs>
  }


  export type $Historique_SportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Historique_Sport"
    objects: {
      Utilisateur: Prisma.$UtilisateurPayload<ExtArgs>
      Exercices: Prisma.$ExercicesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Historique_id: number
      Utilisateur_id: number
      Exercice_id: number
      Date: Date
      Poids_Serie1: number
      Poids_Serie2: number
      Poids_Serie3: number
      Poids_serie4: number
      Repetitions: number
      Note: string
      Serie: number
    }, ExtArgs["result"]["historique_Sport"]>
    composites: {}
  }


  type Historique_SportGetPayload<S extends boolean | null | undefined | Historique_SportDefaultArgs> = $Result.GetResult<Prisma.$Historique_SportPayload, S>

  type Historique_SportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Historique_SportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Historique_SportCountAggregateInputType | true
    }

  export interface Historique_SportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Historique_Sport'], meta: { name: 'Historique_Sport' } }
    /**
     * Find zero or one Historique_Sport that matches the filter.
     * @param {Historique_SportFindUniqueArgs} args - Arguments to find a Historique_Sport
     * @example
     * // Get one Historique_Sport
     * const historique_Sport = await prisma.historique_Sport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Historique_SportFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Historique_SportFindUniqueArgs<ExtArgs>>
    ): Prisma__Historique_SportClient<$Result.GetResult<Prisma.$Historique_SportPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Historique_Sport that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Historique_SportFindUniqueOrThrowArgs} args - Arguments to find a Historique_Sport
     * @example
     * // Get one Historique_Sport
     * const historique_Sport = await prisma.historique_Sport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Historique_SportFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Historique_SportFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Historique_SportClient<$Result.GetResult<Prisma.$Historique_SportPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Historique_Sport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SportFindFirstArgs} args - Arguments to find a Historique_Sport
     * @example
     * // Get one Historique_Sport
     * const historique_Sport = await prisma.historique_Sport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Historique_SportFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Historique_SportFindFirstArgs<ExtArgs>>
    ): Prisma__Historique_SportClient<$Result.GetResult<Prisma.$Historique_SportPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Historique_Sport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SportFindFirstOrThrowArgs} args - Arguments to find a Historique_Sport
     * @example
     * // Get one Historique_Sport
     * const historique_Sport = await prisma.historique_Sport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Historique_SportFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Historique_SportFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Historique_SportClient<$Result.GetResult<Prisma.$Historique_SportPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Historique_Sports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SportFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Historique_Sports
     * const historique_Sports = await prisma.historique_Sport.findMany()
     * 
     * // Get first 10 Historique_Sports
     * const historique_Sports = await prisma.historique_Sport.findMany({ take: 10 })
     * 
     * // Only select the `Historique_id`
     * const historique_SportWithHistorique_idOnly = await prisma.historique_Sport.findMany({ select: { Historique_id: true } })
     * 
    **/
    findMany<T extends Historique_SportFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Historique_SportFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Historique_SportPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Historique_Sport.
     * @param {Historique_SportCreateArgs} args - Arguments to create a Historique_Sport.
     * @example
     * // Create one Historique_Sport
     * const Historique_Sport = await prisma.historique_Sport.create({
     *   data: {
     *     // ... data to create a Historique_Sport
     *   }
     * })
     * 
    **/
    create<T extends Historique_SportCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Historique_SportCreateArgs<ExtArgs>>
    ): Prisma__Historique_SportClient<$Result.GetResult<Prisma.$Historique_SportPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Historique_Sports.
     *     @param {Historique_SportCreateManyArgs} args - Arguments to create many Historique_Sports.
     *     @example
     *     // Create many Historique_Sports
     *     const historique_Sport = await prisma.historique_Sport.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Historique_SportCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Historique_SportCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Historique_Sport.
     * @param {Historique_SportDeleteArgs} args - Arguments to delete one Historique_Sport.
     * @example
     * // Delete one Historique_Sport
     * const Historique_Sport = await prisma.historique_Sport.delete({
     *   where: {
     *     // ... filter to delete one Historique_Sport
     *   }
     * })
     * 
    **/
    delete<T extends Historique_SportDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Historique_SportDeleteArgs<ExtArgs>>
    ): Prisma__Historique_SportClient<$Result.GetResult<Prisma.$Historique_SportPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Historique_Sport.
     * @param {Historique_SportUpdateArgs} args - Arguments to update one Historique_Sport.
     * @example
     * // Update one Historique_Sport
     * const historique_Sport = await prisma.historique_Sport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Historique_SportUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Historique_SportUpdateArgs<ExtArgs>>
    ): Prisma__Historique_SportClient<$Result.GetResult<Prisma.$Historique_SportPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Historique_Sports.
     * @param {Historique_SportDeleteManyArgs} args - Arguments to filter Historique_Sports to delete.
     * @example
     * // Delete a few Historique_Sports
     * const { count } = await prisma.historique_Sport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Historique_SportDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Historique_SportDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Historique_Sports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Historique_Sports
     * const historique_Sport = await prisma.historique_Sport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Historique_SportUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Historique_SportUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Historique_Sport.
     * @param {Historique_SportUpsertArgs} args - Arguments to update or create a Historique_Sport.
     * @example
     * // Update or create a Historique_Sport
     * const historique_Sport = await prisma.historique_Sport.upsert({
     *   create: {
     *     // ... data to create a Historique_Sport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Historique_Sport we want to update
     *   }
     * })
    **/
    upsert<T extends Historique_SportUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Historique_SportUpsertArgs<ExtArgs>>
    ): Prisma__Historique_SportClient<$Result.GetResult<Prisma.$Historique_SportPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Historique_Sports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SportCountArgs} args - Arguments to filter Historique_Sports to count.
     * @example
     * // Count the number of Historique_Sports
     * const count = await prisma.historique_Sport.count({
     *   where: {
     *     // ... the filter for the Historique_Sports we want to count
     *   }
     * })
    **/
    count<T extends Historique_SportCountArgs>(
      args?: Subset<T, Historique_SportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Historique_SportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Historique_Sport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Historique_SportAggregateArgs>(args: Subset<T, Historique_SportAggregateArgs>): Prisma.PrismaPromise<GetHistorique_SportAggregateType<T>>

    /**
     * Group by Historique_Sport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historique_SportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Historique_SportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Historique_SportGroupByArgs['orderBy'] }
        : { orderBy?: Historique_SportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Historique_SportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistorique_SportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Historique_Sport model
   */
  readonly fields: Historique_SportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Historique_Sport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Historique_SportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Utilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Exercices<T extends ExercicesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExercicesDefaultArgs<ExtArgs>>): Prisma__ExercicesClient<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Historique_Sport model
   */ 
  interface Historique_SportFieldRefs {
    readonly Historique_id: FieldRef<"Historique_Sport", 'Int'>
    readonly Utilisateur_id: FieldRef<"Historique_Sport", 'Int'>
    readonly Exercice_id: FieldRef<"Historique_Sport", 'Int'>
    readonly Date: FieldRef<"Historique_Sport", 'DateTime'>
    readonly Poids_Serie1: FieldRef<"Historique_Sport", 'Int'>
    readonly Poids_Serie2: FieldRef<"Historique_Sport", 'Int'>
    readonly Poids_Serie3: FieldRef<"Historique_Sport", 'Int'>
    readonly Poids_serie4: FieldRef<"Historique_Sport", 'Int'>
    readonly Repetitions: FieldRef<"Historique_Sport", 'Int'>
    readonly Note: FieldRef<"Historique_Sport", 'String'>
    readonly Serie: FieldRef<"Historique_Sport", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Historique_Sport findUnique
   */
  export type Historique_SportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sport
     */
    select?: Historique_SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SportInclude<ExtArgs> | null
    /**
     * Filter, which Historique_Sport to fetch.
     */
    where: Historique_SportWhereUniqueInput
  }


  /**
   * Historique_Sport findUniqueOrThrow
   */
  export type Historique_SportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sport
     */
    select?: Historique_SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SportInclude<ExtArgs> | null
    /**
     * Filter, which Historique_Sport to fetch.
     */
    where: Historique_SportWhereUniqueInput
  }


  /**
   * Historique_Sport findFirst
   */
  export type Historique_SportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sport
     */
    select?: Historique_SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SportInclude<ExtArgs> | null
    /**
     * Filter, which Historique_Sport to fetch.
     */
    where?: Historique_SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historique_Sports to fetch.
     */
    orderBy?: Historique_SportOrderByWithRelationInput | Historique_SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Historique_Sports.
     */
    cursor?: Historique_SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historique_Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historique_Sports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Historique_Sports.
     */
    distinct?: Historique_SportScalarFieldEnum | Historique_SportScalarFieldEnum[]
  }


  /**
   * Historique_Sport findFirstOrThrow
   */
  export type Historique_SportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sport
     */
    select?: Historique_SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SportInclude<ExtArgs> | null
    /**
     * Filter, which Historique_Sport to fetch.
     */
    where?: Historique_SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historique_Sports to fetch.
     */
    orderBy?: Historique_SportOrderByWithRelationInput | Historique_SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Historique_Sports.
     */
    cursor?: Historique_SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historique_Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historique_Sports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Historique_Sports.
     */
    distinct?: Historique_SportScalarFieldEnum | Historique_SportScalarFieldEnum[]
  }


  /**
   * Historique_Sport findMany
   */
  export type Historique_SportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sport
     */
    select?: Historique_SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SportInclude<ExtArgs> | null
    /**
     * Filter, which Historique_Sports to fetch.
     */
    where?: Historique_SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historique_Sports to fetch.
     */
    orderBy?: Historique_SportOrderByWithRelationInput | Historique_SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Historique_Sports.
     */
    cursor?: Historique_SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historique_Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historique_Sports.
     */
    skip?: number
    distinct?: Historique_SportScalarFieldEnum | Historique_SportScalarFieldEnum[]
  }


  /**
   * Historique_Sport create
   */
  export type Historique_SportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sport
     */
    select?: Historique_SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SportInclude<ExtArgs> | null
    /**
     * The data needed to create a Historique_Sport.
     */
    data: XOR<Historique_SportCreateInput, Historique_SportUncheckedCreateInput>
  }


  /**
   * Historique_Sport createMany
   */
  export type Historique_SportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Historique_Sports.
     */
    data: Historique_SportCreateManyInput | Historique_SportCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Historique_Sport update
   */
  export type Historique_SportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sport
     */
    select?: Historique_SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SportInclude<ExtArgs> | null
    /**
     * The data needed to update a Historique_Sport.
     */
    data: XOR<Historique_SportUpdateInput, Historique_SportUncheckedUpdateInput>
    /**
     * Choose, which Historique_Sport to update.
     */
    where: Historique_SportWhereUniqueInput
  }


  /**
   * Historique_Sport updateMany
   */
  export type Historique_SportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Historique_Sports.
     */
    data: XOR<Historique_SportUpdateManyMutationInput, Historique_SportUncheckedUpdateManyInput>
    /**
     * Filter which Historique_Sports to update
     */
    where?: Historique_SportWhereInput
  }


  /**
   * Historique_Sport upsert
   */
  export type Historique_SportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sport
     */
    select?: Historique_SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SportInclude<ExtArgs> | null
    /**
     * The filter to search for the Historique_Sport to update in case it exists.
     */
    where: Historique_SportWhereUniqueInput
    /**
     * In case the Historique_Sport found by the `where` argument doesn't exist, create a new Historique_Sport with this data.
     */
    create: XOR<Historique_SportCreateInput, Historique_SportUncheckedCreateInput>
    /**
     * In case the Historique_Sport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Historique_SportUpdateInput, Historique_SportUncheckedUpdateInput>
  }


  /**
   * Historique_Sport delete
   */
  export type Historique_SportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sport
     */
    select?: Historique_SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SportInclude<ExtArgs> | null
    /**
     * Filter which Historique_Sport to delete.
     */
    where: Historique_SportWhereUniqueInput
  }


  /**
   * Historique_Sport deleteMany
   */
  export type Historique_SportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Historique_Sports to delete
     */
    where?: Historique_SportWhereInput
  }


  /**
   * Historique_Sport without action
   */
  export type Historique_SportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sport
     */
    select?: Historique_SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SportInclude<ExtArgs> | null
  }



  /**
   * Model Objectif_Sante
   */

  export type AggregateObjectif_Sante = {
    _count: Objectif_SanteCountAggregateOutputType | null
    _avg: Objectif_SanteAvgAggregateOutputType | null
    _sum: Objectif_SanteSumAggregateOutputType | null
    _min: Objectif_SanteMinAggregateOutputType | null
    _max: Objectif_SanteMaxAggregateOutputType | null
  }

  export type Objectif_SanteAvgAggregateOutputType = {
    Objectif_Sante_id: number | null
    Objectif_Nombre_pas: number | null
    Objectif_Poids: number | null
    Objectif_Sommeil: number | null
    Objectif_Eau: number | null
  }

  export type Objectif_SanteSumAggregateOutputType = {
    Objectif_Sante_id: number | null
    Objectif_Nombre_pas: number | null
    Objectif_Poids: number | null
    Objectif_Sommeil: number | null
    Objectif_Eau: number | null
  }

  export type Objectif_SanteMinAggregateOutputType = {
    Objectif_Sante_id: number | null
    Objectif_Nombre_pas: number | null
    Objectif_Poids: number | null
    Objectif_Sommeil: number | null
    Objectif_Eau: number | null
  }

  export type Objectif_SanteMaxAggregateOutputType = {
    Objectif_Sante_id: number | null
    Objectif_Nombre_pas: number | null
    Objectif_Poids: number | null
    Objectif_Sommeil: number | null
    Objectif_Eau: number | null
  }

  export type Objectif_SanteCountAggregateOutputType = {
    Objectif_Sante_id: number
    Objectif_Nombre_pas: number
    Objectif_Poids: number
    Objectif_Sommeil: number
    Objectif_Eau: number
    _all: number
  }


  export type Objectif_SanteAvgAggregateInputType = {
    Objectif_Sante_id?: true
    Objectif_Nombre_pas?: true
    Objectif_Poids?: true
    Objectif_Sommeil?: true
    Objectif_Eau?: true
  }

  export type Objectif_SanteSumAggregateInputType = {
    Objectif_Sante_id?: true
    Objectif_Nombre_pas?: true
    Objectif_Poids?: true
    Objectif_Sommeil?: true
    Objectif_Eau?: true
  }

  export type Objectif_SanteMinAggregateInputType = {
    Objectif_Sante_id?: true
    Objectif_Nombre_pas?: true
    Objectif_Poids?: true
    Objectif_Sommeil?: true
    Objectif_Eau?: true
  }

  export type Objectif_SanteMaxAggregateInputType = {
    Objectif_Sante_id?: true
    Objectif_Nombre_pas?: true
    Objectif_Poids?: true
    Objectif_Sommeil?: true
    Objectif_Eau?: true
  }

  export type Objectif_SanteCountAggregateInputType = {
    Objectif_Sante_id?: true
    Objectif_Nombre_pas?: true
    Objectif_Poids?: true
    Objectif_Sommeil?: true
    Objectif_Eau?: true
    _all?: true
  }

  export type Objectif_SanteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Objectif_Sante to aggregate.
     */
    where?: Objectif_SanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objectif_Santes to fetch.
     */
    orderBy?: Objectif_SanteOrderByWithRelationInput | Objectif_SanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Objectif_SanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objectif_Santes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objectif_Santes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Objectif_Santes
    **/
    _count?: true | Objectif_SanteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Objectif_SanteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Objectif_SanteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Objectif_SanteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Objectif_SanteMaxAggregateInputType
  }

  export type GetObjectif_SanteAggregateType<T extends Objectif_SanteAggregateArgs> = {
        [P in keyof T & keyof AggregateObjectif_Sante]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateObjectif_Sante[P]>
      : GetScalarType<T[P], AggregateObjectif_Sante[P]>
  }




  export type Objectif_SanteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Objectif_SanteWhereInput
    orderBy?: Objectif_SanteOrderByWithAggregationInput | Objectif_SanteOrderByWithAggregationInput[]
    by: Objectif_SanteScalarFieldEnum[] | Objectif_SanteScalarFieldEnum
    having?: Objectif_SanteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Objectif_SanteCountAggregateInputType | true
    _avg?: Objectif_SanteAvgAggregateInputType
    _sum?: Objectif_SanteSumAggregateInputType
    _min?: Objectif_SanteMinAggregateInputType
    _max?: Objectif_SanteMaxAggregateInputType
  }

  export type Objectif_SanteGroupByOutputType = {
    Objectif_Sante_id: number
    Objectif_Nombre_pas: number
    Objectif_Poids: number
    Objectif_Sommeil: number
    Objectif_Eau: number
    _count: Objectif_SanteCountAggregateOutputType | null
    _avg: Objectif_SanteAvgAggregateOutputType | null
    _sum: Objectif_SanteSumAggregateOutputType | null
    _min: Objectif_SanteMinAggregateOutputType | null
    _max: Objectif_SanteMaxAggregateOutputType | null
  }

  type GetObjectif_SanteGroupByPayload<T extends Objectif_SanteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Objectif_SanteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Objectif_SanteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Objectif_SanteGroupByOutputType[P]>
            : GetScalarType<T[P], Objectif_SanteGroupByOutputType[P]>
        }
      >
    >


  export type Objectif_SanteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Objectif_Sante_id?: boolean
    Objectif_Nombre_pas?: boolean
    Objectif_Poids?: boolean
    Objectif_Sommeil?: boolean
    Objectif_Eau?: boolean
    Historique_Sante?: boolean | Objectif_Sante$Historique_SanteArgs<ExtArgs>
    Sante?: boolean | Objectif_Sante$SanteArgs<ExtArgs>
    _count?: boolean | Objectif_SanteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["objectif_Sante"]>

  export type Objectif_SanteSelectScalar = {
    Objectif_Sante_id?: boolean
    Objectif_Nombre_pas?: boolean
    Objectif_Poids?: boolean
    Objectif_Sommeil?: boolean
    Objectif_Eau?: boolean
  }

  export type Objectif_SanteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Historique_Sante?: boolean | Objectif_Sante$Historique_SanteArgs<ExtArgs>
    Sante?: boolean | Objectif_Sante$SanteArgs<ExtArgs>
    _count?: boolean | Objectif_SanteCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $Objectif_SantePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Objectif_Sante"
    objects: {
      Historique_Sante: Prisma.$Historique_SantePayload<ExtArgs>[]
      Sante: Prisma.$SantePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Objectif_Sante_id: number
      Objectif_Nombre_pas: number
      Objectif_Poids: number
      Objectif_Sommeil: number
      Objectif_Eau: number
    }, ExtArgs["result"]["objectif_Sante"]>
    composites: {}
  }


  type Objectif_SanteGetPayload<S extends boolean | null | undefined | Objectif_SanteDefaultArgs> = $Result.GetResult<Prisma.$Objectif_SantePayload, S>

  type Objectif_SanteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Objectif_SanteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Objectif_SanteCountAggregateInputType | true
    }

  export interface Objectif_SanteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Objectif_Sante'], meta: { name: 'Objectif_Sante' } }
    /**
     * Find zero or one Objectif_Sante that matches the filter.
     * @param {Objectif_SanteFindUniqueArgs} args - Arguments to find a Objectif_Sante
     * @example
     * // Get one Objectif_Sante
     * const objectif_Sante = await prisma.objectif_Sante.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Objectif_SanteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Objectif_SanteFindUniqueArgs<ExtArgs>>
    ): Prisma__Objectif_SanteClient<$Result.GetResult<Prisma.$Objectif_SantePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Objectif_Sante that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Objectif_SanteFindUniqueOrThrowArgs} args - Arguments to find a Objectif_Sante
     * @example
     * // Get one Objectif_Sante
     * const objectif_Sante = await prisma.objectif_Sante.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Objectif_SanteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Objectif_SanteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Objectif_SanteClient<$Result.GetResult<Prisma.$Objectif_SantePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Objectif_Sante that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Objectif_SanteFindFirstArgs} args - Arguments to find a Objectif_Sante
     * @example
     * // Get one Objectif_Sante
     * const objectif_Sante = await prisma.objectif_Sante.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Objectif_SanteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Objectif_SanteFindFirstArgs<ExtArgs>>
    ): Prisma__Objectif_SanteClient<$Result.GetResult<Prisma.$Objectif_SantePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Objectif_Sante that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Objectif_SanteFindFirstOrThrowArgs} args - Arguments to find a Objectif_Sante
     * @example
     * // Get one Objectif_Sante
     * const objectif_Sante = await prisma.objectif_Sante.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Objectif_SanteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Objectif_SanteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Objectif_SanteClient<$Result.GetResult<Prisma.$Objectif_SantePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Objectif_Santes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Objectif_SanteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Objectif_Santes
     * const objectif_Santes = await prisma.objectif_Sante.findMany()
     * 
     * // Get first 10 Objectif_Santes
     * const objectif_Santes = await prisma.objectif_Sante.findMany({ take: 10 })
     * 
     * // Only select the `Objectif_Sante_id`
     * const objectif_SanteWithObjectif_Sante_idOnly = await prisma.objectif_Sante.findMany({ select: { Objectif_Sante_id: true } })
     * 
    **/
    findMany<T extends Objectif_SanteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Objectif_SanteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Objectif_SantePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Objectif_Sante.
     * @param {Objectif_SanteCreateArgs} args - Arguments to create a Objectif_Sante.
     * @example
     * // Create one Objectif_Sante
     * const Objectif_Sante = await prisma.objectif_Sante.create({
     *   data: {
     *     // ... data to create a Objectif_Sante
     *   }
     * })
     * 
    **/
    create<T extends Objectif_SanteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Objectif_SanteCreateArgs<ExtArgs>>
    ): Prisma__Objectif_SanteClient<$Result.GetResult<Prisma.$Objectif_SantePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Objectif_Santes.
     *     @param {Objectif_SanteCreateManyArgs} args - Arguments to create many Objectif_Santes.
     *     @example
     *     // Create many Objectif_Santes
     *     const objectif_Sante = await prisma.objectif_Sante.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Objectif_SanteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Objectif_SanteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Objectif_Sante.
     * @param {Objectif_SanteDeleteArgs} args - Arguments to delete one Objectif_Sante.
     * @example
     * // Delete one Objectif_Sante
     * const Objectif_Sante = await prisma.objectif_Sante.delete({
     *   where: {
     *     // ... filter to delete one Objectif_Sante
     *   }
     * })
     * 
    **/
    delete<T extends Objectif_SanteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Objectif_SanteDeleteArgs<ExtArgs>>
    ): Prisma__Objectif_SanteClient<$Result.GetResult<Prisma.$Objectif_SantePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Objectif_Sante.
     * @param {Objectif_SanteUpdateArgs} args - Arguments to update one Objectif_Sante.
     * @example
     * // Update one Objectif_Sante
     * const objectif_Sante = await prisma.objectif_Sante.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Objectif_SanteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Objectif_SanteUpdateArgs<ExtArgs>>
    ): Prisma__Objectif_SanteClient<$Result.GetResult<Prisma.$Objectif_SantePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Objectif_Santes.
     * @param {Objectif_SanteDeleteManyArgs} args - Arguments to filter Objectif_Santes to delete.
     * @example
     * // Delete a few Objectif_Santes
     * const { count } = await prisma.objectif_Sante.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Objectif_SanteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Objectif_SanteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Objectif_Santes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Objectif_SanteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Objectif_Santes
     * const objectif_Sante = await prisma.objectif_Sante.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Objectif_SanteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Objectif_SanteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Objectif_Sante.
     * @param {Objectif_SanteUpsertArgs} args - Arguments to update or create a Objectif_Sante.
     * @example
     * // Update or create a Objectif_Sante
     * const objectif_Sante = await prisma.objectif_Sante.upsert({
     *   create: {
     *     // ... data to create a Objectif_Sante
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Objectif_Sante we want to update
     *   }
     * })
    **/
    upsert<T extends Objectif_SanteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Objectif_SanteUpsertArgs<ExtArgs>>
    ): Prisma__Objectif_SanteClient<$Result.GetResult<Prisma.$Objectif_SantePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Objectif_Santes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Objectif_SanteCountArgs} args - Arguments to filter Objectif_Santes to count.
     * @example
     * // Count the number of Objectif_Santes
     * const count = await prisma.objectif_Sante.count({
     *   where: {
     *     // ... the filter for the Objectif_Santes we want to count
     *   }
     * })
    **/
    count<T extends Objectif_SanteCountArgs>(
      args?: Subset<T, Objectif_SanteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Objectif_SanteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Objectif_Sante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Objectif_SanteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Objectif_SanteAggregateArgs>(args: Subset<T, Objectif_SanteAggregateArgs>): Prisma.PrismaPromise<GetObjectif_SanteAggregateType<T>>

    /**
     * Group by Objectif_Sante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Objectif_SanteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Objectif_SanteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Objectif_SanteGroupByArgs['orderBy'] }
        : { orderBy?: Objectif_SanteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Objectif_SanteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetObjectif_SanteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Objectif_Sante model
   */
  readonly fields: Objectif_SanteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Objectif_Sante.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Objectif_SanteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Historique_Sante<T extends Objectif_Sante$Historique_SanteArgs<ExtArgs> = {}>(args?: Subset<T, Objectif_Sante$Historique_SanteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Historique_SantePayload<ExtArgs>, T, 'findMany'> | Null>;

    Sante<T extends Objectif_Sante$SanteArgs<ExtArgs> = {}>(args?: Subset<T, Objectif_Sante$SanteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SantePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Objectif_Sante model
   */ 
  interface Objectif_SanteFieldRefs {
    readonly Objectif_Sante_id: FieldRef<"Objectif_Sante", 'Int'>
    readonly Objectif_Nombre_pas: FieldRef<"Objectif_Sante", 'Int'>
    readonly Objectif_Poids: FieldRef<"Objectif_Sante", 'Int'>
    readonly Objectif_Sommeil: FieldRef<"Objectif_Sante", 'Int'>
    readonly Objectif_Eau: FieldRef<"Objectif_Sante", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Objectif_Sante findUnique
   */
  export type Objectif_SanteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectif_Sante
     */
    select?: Objectif_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Objectif_SanteInclude<ExtArgs> | null
    /**
     * Filter, which Objectif_Sante to fetch.
     */
    where: Objectif_SanteWhereUniqueInput
  }


  /**
   * Objectif_Sante findUniqueOrThrow
   */
  export type Objectif_SanteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectif_Sante
     */
    select?: Objectif_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Objectif_SanteInclude<ExtArgs> | null
    /**
     * Filter, which Objectif_Sante to fetch.
     */
    where: Objectif_SanteWhereUniqueInput
  }


  /**
   * Objectif_Sante findFirst
   */
  export type Objectif_SanteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectif_Sante
     */
    select?: Objectif_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Objectif_SanteInclude<ExtArgs> | null
    /**
     * Filter, which Objectif_Sante to fetch.
     */
    where?: Objectif_SanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objectif_Santes to fetch.
     */
    orderBy?: Objectif_SanteOrderByWithRelationInput | Objectif_SanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Objectif_Santes.
     */
    cursor?: Objectif_SanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objectif_Santes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objectif_Santes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Objectif_Santes.
     */
    distinct?: Objectif_SanteScalarFieldEnum | Objectif_SanteScalarFieldEnum[]
  }


  /**
   * Objectif_Sante findFirstOrThrow
   */
  export type Objectif_SanteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectif_Sante
     */
    select?: Objectif_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Objectif_SanteInclude<ExtArgs> | null
    /**
     * Filter, which Objectif_Sante to fetch.
     */
    where?: Objectif_SanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objectif_Santes to fetch.
     */
    orderBy?: Objectif_SanteOrderByWithRelationInput | Objectif_SanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Objectif_Santes.
     */
    cursor?: Objectif_SanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objectif_Santes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objectif_Santes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Objectif_Santes.
     */
    distinct?: Objectif_SanteScalarFieldEnum | Objectif_SanteScalarFieldEnum[]
  }


  /**
   * Objectif_Sante findMany
   */
  export type Objectif_SanteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectif_Sante
     */
    select?: Objectif_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Objectif_SanteInclude<ExtArgs> | null
    /**
     * Filter, which Objectif_Santes to fetch.
     */
    where?: Objectif_SanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objectif_Santes to fetch.
     */
    orderBy?: Objectif_SanteOrderByWithRelationInput | Objectif_SanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Objectif_Santes.
     */
    cursor?: Objectif_SanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objectif_Santes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objectif_Santes.
     */
    skip?: number
    distinct?: Objectif_SanteScalarFieldEnum | Objectif_SanteScalarFieldEnum[]
  }


  /**
   * Objectif_Sante create
   */
  export type Objectif_SanteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectif_Sante
     */
    select?: Objectif_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Objectif_SanteInclude<ExtArgs> | null
    /**
     * The data needed to create a Objectif_Sante.
     */
    data: XOR<Objectif_SanteCreateInput, Objectif_SanteUncheckedCreateInput>
  }


  /**
   * Objectif_Sante createMany
   */
  export type Objectif_SanteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Objectif_Santes.
     */
    data: Objectif_SanteCreateManyInput | Objectif_SanteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Objectif_Sante update
   */
  export type Objectif_SanteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectif_Sante
     */
    select?: Objectif_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Objectif_SanteInclude<ExtArgs> | null
    /**
     * The data needed to update a Objectif_Sante.
     */
    data: XOR<Objectif_SanteUpdateInput, Objectif_SanteUncheckedUpdateInput>
    /**
     * Choose, which Objectif_Sante to update.
     */
    where: Objectif_SanteWhereUniqueInput
  }


  /**
   * Objectif_Sante updateMany
   */
  export type Objectif_SanteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Objectif_Santes.
     */
    data: XOR<Objectif_SanteUpdateManyMutationInput, Objectif_SanteUncheckedUpdateManyInput>
    /**
     * Filter which Objectif_Santes to update
     */
    where?: Objectif_SanteWhereInput
  }


  /**
   * Objectif_Sante upsert
   */
  export type Objectif_SanteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectif_Sante
     */
    select?: Objectif_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Objectif_SanteInclude<ExtArgs> | null
    /**
     * The filter to search for the Objectif_Sante to update in case it exists.
     */
    where: Objectif_SanteWhereUniqueInput
    /**
     * In case the Objectif_Sante found by the `where` argument doesn't exist, create a new Objectif_Sante with this data.
     */
    create: XOR<Objectif_SanteCreateInput, Objectif_SanteUncheckedCreateInput>
    /**
     * In case the Objectif_Sante was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Objectif_SanteUpdateInput, Objectif_SanteUncheckedUpdateInput>
  }


  /**
   * Objectif_Sante delete
   */
  export type Objectif_SanteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectif_Sante
     */
    select?: Objectif_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Objectif_SanteInclude<ExtArgs> | null
    /**
     * Filter which Objectif_Sante to delete.
     */
    where: Objectif_SanteWhereUniqueInput
  }


  /**
   * Objectif_Sante deleteMany
   */
  export type Objectif_SanteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Objectif_Santes to delete
     */
    where?: Objectif_SanteWhereInput
  }


  /**
   * Objectif_Sante.Historique_Sante
   */
  export type Objectif_Sante$Historique_SanteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sante
     */
    select?: Historique_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SanteInclude<ExtArgs> | null
    where?: Historique_SanteWhereInput
    orderBy?: Historique_SanteOrderByWithRelationInput | Historique_SanteOrderByWithRelationInput[]
    cursor?: Historique_SanteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Historique_SanteScalarFieldEnum | Historique_SanteScalarFieldEnum[]
  }


  /**
   * Objectif_Sante.Sante
   */
  export type Objectif_Sante$SanteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sante
     */
    select?: SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SanteInclude<ExtArgs> | null
    where?: SanteWhereInput
    orderBy?: SanteOrderByWithRelationInput | SanteOrderByWithRelationInput[]
    cursor?: SanteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SanteScalarFieldEnum | SanteScalarFieldEnum[]
  }


  /**
   * Objectif_Sante without action
   */
  export type Objectif_SanteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectif_Sante
     */
    select?: Objectif_SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Objectif_SanteInclude<ExtArgs> | null
  }



  /**
   * Model Repas
   */

  export type AggregateRepas = {
    _count: RepasCountAggregateOutputType | null
    _avg: RepasAvgAggregateOutputType | null
    _sum: RepasSumAggregateOutputType | null
    _min: RepasMinAggregateOutputType | null
    _max: RepasMaxAggregateOutputType | null
  }

  export type RepasAvgAggregateOutputType = {
    Repas_id: number | null
    Alimentation_id: number | null
    Aliment_id: number | null
    Quantite: number | null
    Glucides: number | null
    Calories: number | null
    Lipides: number | null
    Proteines: number | null
  }

  export type RepasSumAggregateOutputType = {
    Repas_id: number | null
    Alimentation_id: number | null
    Aliment_id: number | null
    Quantite: number | null
    Glucides: number | null
    Calories: number | null
    Lipides: number | null
    Proteines: number | null
  }

  export type RepasMinAggregateOutputType = {
    Repas_id: number | null
    Alimentation_id: number | null
    Aliment_id: number | null
    Quantite: number | null
    Glucides: number | null
    Calories: number | null
    Lipides: number | null
    Proteines: number | null
    Description: string | null
    Duree: Date | null
    Image: string | null
    Difficulte: string | null
    Saison: string | null
  }

  export type RepasMaxAggregateOutputType = {
    Repas_id: number | null
    Alimentation_id: number | null
    Aliment_id: number | null
    Quantite: number | null
    Glucides: number | null
    Calories: number | null
    Lipides: number | null
    Proteines: number | null
    Description: string | null
    Duree: Date | null
    Image: string | null
    Difficulte: string | null
    Saison: string | null
  }

  export type RepasCountAggregateOutputType = {
    Repas_id: number
    Alimentation_id: number
    Aliment_id: number
    Quantite: number
    Glucides: number
    Calories: number
    Lipides: number
    Proteines: number
    Description: number
    Duree: number
    Image: number
    Difficulte: number
    Saison: number
    _all: number
  }


  export type RepasAvgAggregateInputType = {
    Repas_id?: true
    Alimentation_id?: true
    Aliment_id?: true
    Quantite?: true
    Glucides?: true
    Calories?: true
    Lipides?: true
    Proteines?: true
  }

  export type RepasSumAggregateInputType = {
    Repas_id?: true
    Alimentation_id?: true
    Aliment_id?: true
    Quantite?: true
    Glucides?: true
    Calories?: true
    Lipides?: true
    Proteines?: true
  }

  export type RepasMinAggregateInputType = {
    Repas_id?: true
    Alimentation_id?: true
    Aliment_id?: true
    Quantite?: true
    Glucides?: true
    Calories?: true
    Lipides?: true
    Proteines?: true
    Description?: true
    Duree?: true
    Image?: true
    Difficulte?: true
    Saison?: true
  }

  export type RepasMaxAggregateInputType = {
    Repas_id?: true
    Alimentation_id?: true
    Aliment_id?: true
    Quantite?: true
    Glucides?: true
    Calories?: true
    Lipides?: true
    Proteines?: true
    Description?: true
    Duree?: true
    Image?: true
    Difficulte?: true
    Saison?: true
  }

  export type RepasCountAggregateInputType = {
    Repas_id?: true
    Alimentation_id?: true
    Aliment_id?: true
    Quantite?: true
    Glucides?: true
    Calories?: true
    Lipides?: true
    Proteines?: true
    Description?: true
    Duree?: true
    Image?: true
    Difficulte?: true
    Saison?: true
    _all?: true
  }

  export type RepasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Repas to aggregate.
     */
    where?: RepasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repas to fetch.
     */
    orderBy?: RepasOrderByWithRelationInput | RepasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RepasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Repas
    **/
    _count?: true | RepasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RepasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RepasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RepasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RepasMaxAggregateInputType
  }

  export type GetRepasAggregateType<T extends RepasAggregateArgs> = {
        [P in keyof T & keyof AggregateRepas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRepas[P]>
      : GetScalarType<T[P], AggregateRepas[P]>
  }




  export type RepasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepasWhereInput
    orderBy?: RepasOrderByWithAggregationInput | RepasOrderByWithAggregationInput[]
    by: RepasScalarFieldEnum[] | RepasScalarFieldEnum
    having?: RepasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RepasCountAggregateInputType | true
    _avg?: RepasAvgAggregateInputType
    _sum?: RepasSumAggregateInputType
    _min?: RepasMinAggregateInputType
    _max?: RepasMaxAggregateInputType
  }

  export type RepasGroupByOutputType = {
    Repas_id: number
    Alimentation_id: number
    Aliment_id: number
    Quantite: number
    Glucides: number
    Calories: number
    Lipides: number
    Proteines: number
    Description: string
    Duree: Date
    Image: string
    Difficulte: string
    Saison: string
    _count: RepasCountAggregateOutputType | null
    _avg: RepasAvgAggregateOutputType | null
    _sum: RepasSumAggregateOutputType | null
    _min: RepasMinAggregateOutputType | null
    _max: RepasMaxAggregateOutputType | null
  }

  type GetRepasGroupByPayload<T extends RepasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RepasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RepasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RepasGroupByOutputType[P]>
            : GetScalarType<T[P], RepasGroupByOutputType[P]>
        }
      >
    >


  export type RepasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Repas_id?: boolean
    Alimentation_id?: boolean
    Aliment_id?: boolean
    Quantite?: boolean
    Glucides?: boolean
    Calories?: boolean
    Lipides?: boolean
    Proteines?: boolean
    Description?: boolean
    Duree?: boolean
    Image?: boolean
    Difficulte?: boolean
    Saison?: boolean
    Aliment_Aliment_Repas_idToRepas?: boolean | Repas$Aliment_Aliment_Repas_idToRepasArgs<ExtArgs>
    Aliment_Repas_Aliment_idToAliment?: boolean | AlimentDefaultArgs<ExtArgs>
    Alimentation?: boolean | AlimentationDefaultArgs<ExtArgs>
    _count?: boolean | RepasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repas"]>

  export type RepasSelectScalar = {
    Repas_id?: boolean
    Alimentation_id?: boolean
    Aliment_id?: boolean
    Quantite?: boolean
    Glucides?: boolean
    Calories?: boolean
    Lipides?: boolean
    Proteines?: boolean
    Description?: boolean
    Duree?: boolean
    Image?: boolean
    Difficulte?: boolean
    Saison?: boolean
  }

  export type RepasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Aliment_Aliment_Repas_idToRepas?: boolean | Repas$Aliment_Aliment_Repas_idToRepasArgs<ExtArgs>
    Aliment_Repas_Aliment_idToAliment?: boolean | AlimentDefaultArgs<ExtArgs>
    Alimentation?: boolean | AlimentationDefaultArgs<ExtArgs>
    _count?: boolean | RepasCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RepasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Repas"
    objects: {
      Aliment_Aliment_Repas_idToRepas: Prisma.$AlimentPayload<ExtArgs>[]
      Aliment_Repas_Aliment_idToAliment: Prisma.$AlimentPayload<ExtArgs>
      Alimentation: Prisma.$AlimentationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Repas_id: number
      Alimentation_id: number
      Aliment_id: number
      Quantite: number
      Glucides: number
      Calories: number
      Lipides: number
      Proteines: number
      Description: string
      Duree: Date
      Image: string
      Difficulte: string
      Saison: string
    }, ExtArgs["result"]["repas"]>
    composites: {}
  }


  type RepasGetPayload<S extends boolean | null | undefined | RepasDefaultArgs> = $Result.GetResult<Prisma.$RepasPayload, S>

  type RepasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RepasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RepasCountAggregateInputType | true
    }

  export interface RepasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Repas'], meta: { name: 'Repas' } }
    /**
     * Find zero or one Repas that matches the filter.
     * @param {RepasFindUniqueArgs} args - Arguments to find a Repas
     * @example
     * // Get one Repas
     * const repas = await prisma.repas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RepasFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RepasFindUniqueArgs<ExtArgs>>
    ): Prisma__RepasClient<$Result.GetResult<Prisma.$RepasPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Repas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RepasFindUniqueOrThrowArgs} args - Arguments to find a Repas
     * @example
     * // Get one Repas
     * const repas = await prisma.repas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RepasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RepasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RepasClient<$Result.GetResult<Prisma.$RepasPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Repas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepasFindFirstArgs} args - Arguments to find a Repas
     * @example
     * // Get one Repas
     * const repas = await prisma.repas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RepasFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RepasFindFirstArgs<ExtArgs>>
    ): Prisma__RepasClient<$Result.GetResult<Prisma.$RepasPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Repas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepasFindFirstOrThrowArgs} args - Arguments to find a Repas
     * @example
     * // Get one Repas
     * const repas = await prisma.repas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RepasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RepasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RepasClient<$Result.GetResult<Prisma.$RepasPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Repas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Repas
     * const repas = await prisma.repas.findMany()
     * 
     * // Get first 10 Repas
     * const repas = await prisma.repas.findMany({ take: 10 })
     * 
     * // Only select the `Repas_id`
     * const repasWithRepas_idOnly = await prisma.repas.findMany({ select: { Repas_id: true } })
     * 
    **/
    findMany<T extends RepasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RepasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepasPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Repas.
     * @param {RepasCreateArgs} args - Arguments to create a Repas.
     * @example
     * // Create one Repas
     * const Repas = await prisma.repas.create({
     *   data: {
     *     // ... data to create a Repas
     *   }
     * })
     * 
    **/
    create<T extends RepasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RepasCreateArgs<ExtArgs>>
    ): Prisma__RepasClient<$Result.GetResult<Prisma.$RepasPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Repas.
     *     @param {RepasCreateManyArgs} args - Arguments to create many Repas.
     *     @example
     *     // Create many Repas
     *     const repas = await prisma.repas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RepasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RepasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Repas.
     * @param {RepasDeleteArgs} args - Arguments to delete one Repas.
     * @example
     * // Delete one Repas
     * const Repas = await prisma.repas.delete({
     *   where: {
     *     // ... filter to delete one Repas
     *   }
     * })
     * 
    **/
    delete<T extends RepasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RepasDeleteArgs<ExtArgs>>
    ): Prisma__RepasClient<$Result.GetResult<Prisma.$RepasPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Repas.
     * @param {RepasUpdateArgs} args - Arguments to update one Repas.
     * @example
     * // Update one Repas
     * const repas = await prisma.repas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RepasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RepasUpdateArgs<ExtArgs>>
    ): Prisma__RepasClient<$Result.GetResult<Prisma.$RepasPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Repas.
     * @param {RepasDeleteManyArgs} args - Arguments to filter Repas to delete.
     * @example
     * // Delete a few Repas
     * const { count } = await prisma.repas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RepasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RepasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Repas
     * const repas = await prisma.repas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RepasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RepasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Repas.
     * @param {RepasUpsertArgs} args - Arguments to update or create a Repas.
     * @example
     * // Update or create a Repas
     * const repas = await prisma.repas.upsert({
     *   create: {
     *     // ... data to create a Repas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Repas we want to update
     *   }
     * })
    **/
    upsert<T extends RepasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RepasUpsertArgs<ExtArgs>>
    ): Prisma__RepasClient<$Result.GetResult<Prisma.$RepasPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Repas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepasCountArgs} args - Arguments to filter Repas to count.
     * @example
     * // Count the number of Repas
     * const count = await prisma.repas.count({
     *   where: {
     *     // ... the filter for the Repas we want to count
     *   }
     * })
    **/
    count<T extends RepasCountArgs>(
      args?: Subset<T, RepasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RepasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Repas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RepasAggregateArgs>(args: Subset<T, RepasAggregateArgs>): Prisma.PrismaPromise<GetRepasAggregateType<T>>

    /**
     * Group by Repas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RepasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RepasGroupByArgs['orderBy'] }
        : { orderBy?: RepasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RepasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Repas model
   */
  readonly fields: RepasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Repas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RepasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Aliment_Aliment_Repas_idToRepas<T extends Repas$Aliment_Aliment_Repas_idToRepasArgs<ExtArgs> = {}>(args?: Subset<T, Repas$Aliment_Aliment_Repas_idToRepasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlimentPayload<ExtArgs>, T, 'findMany'> | Null>;

    Aliment_Repas_Aliment_idToAliment<T extends AlimentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlimentDefaultArgs<ExtArgs>>): Prisma__AlimentClient<$Result.GetResult<Prisma.$AlimentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Alimentation<T extends AlimentationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlimentationDefaultArgs<ExtArgs>>): Prisma__AlimentationClient<$Result.GetResult<Prisma.$AlimentationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Repas model
   */ 
  interface RepasFieldRefs {
    readonly Repas_id: FieldRef<"Repas", 'Int'>
    readonly Alimentation_id: FieldRef<"Repas", 'Int'>
    readonly Aliment_id: FieldRef<"Repas", 'Int'>
    readonly Quantite: FieldRef<"Repas", 'Int'>
    readonly Glucides: FieldRef<"Repas", 'Int'>
    readonly Calories: FieldRef<"Repas", 'Int'>
    readonly Lipides: FieldRef<"Repas", 'Int'>
    readonly Proteines: FieldRef<"Repas", 'Int'>
    readonly Description: FieldRef<"Repas", 'String'>
    readonly Duree: FieldRef<"Repas", 'DateTime'>
    readonly Image: FieldRef<"Repas", 'String'>
    readonly Difficulte: FieldRef<"Repas", 'String'>
    readonly Saison: FieldRef<"Repas", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Repas findUnique
   */
  export type RepasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repas
     */
    select?: RepasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepasInclude<ExtArgs> | null
    /**
     * Filter, which Repas to fetch.
     */
    where: RepasWhereUniqueInput
  }


  /**
   * Repas findUniqueOrThrow
   */
  export type RepasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repas
     */
    select?: RepasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepasInclude<ExtArgs> | null
    /**
     * Filter, which Repas to fetch.
     */
    where: RepasWhereUniqueInput
  }


  /**
   * Repas findFirst
   */
  export type RepasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repas
     */
    select?: RepasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepasInclude<ExtArgs> | null
    /**
     * Filter, which Repas to fetch.
     */
    where?: RepasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repas to fetch.
     */
    orderBy?: RepasOrderByWithRelationInput | RepasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Repas.
     */
    cursor?: RepasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Repas.
     */
    distinct?: RepasScalarFieldEnum | RepasScalarFieldEnum[]
  }


  /**
   * Repas findFirstOrThrow
   */
  export type RepasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repas
     */
    select?: RepasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepasInclude<ExtArgs> | null
    /**
     * Filter, which Repas to fetch.
     */
    where?: RepasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repas to fetch.
     */
    orderBy?: RepasOrderByWithRelationInput | RepasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Repas.
     */
    cursor?: RepasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Repas.
     */
    distinct?: RepasScalarFieldEnum | RepasScalarFieldEnum[]
  }


  /**
   * Repas findMany
   */
  export type RepasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repas
     */
    select?: RepasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepasInclude<ExtArgs> | null
    /**
     * Filter, which Repas to fetch.
     */
    where?: RepasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repas to fetch.
     */
    orderBy?: RepasOrderByWithRelationInput | RepasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Repas.
     */
    cursor?: RepasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repas.
     */
    skip?: number
    distinct?: RepasScalarFieldEnum | RepasScalarFieldEnum[]
  }


  /**
   * Repas create
   */
  export type RepasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repas
     */
    select?: RepasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepasInclude<ExtArgs> | null
    /**
     * The data needed to create a Repas.
     */
    data: XOR<RepasCreateInput, RepasUncheckedCreateInput>
  }


  /**
   * Repas createMany
   */
  export type RepasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Repas.
     */
    data: RepasCreateManyInput | RepasCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Repas update
   */
  export type RepasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repas
     */
    select?: RepasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepasInclude<ExtArgs> | null
    /**
     * The data needed to update a Repas.
     */
    data: XOR<RepasUpdateInput, RepasUncheckedUpdateInput>
    /**
     * Choose, which Repas to update.
     */
    where: RepasWhereUniqueInput
  }


  /**
   * Repas updateMany
   */
  export type RepasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Repas.
     */
    data: XOR<RepasUpdateManyMutationInput, RepasUncheckedUpdateManyInput>
    /**
     * Filter which Repas to update
     */
    where?: RepasWhereInput
  }


  /**
   * Repas upsert
   */
  export type RepasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repas
     */
    select?: RepasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepasInclude<ExtArgs> | null
    /**
     * The filter to search for the Repas to update in case it exists.
     */
    where: RepasWhereUniqueInput
    /**
     * In case the Repas found by the `where` argument doesn't exist, create a new Repas with this data.
     */
    create: XOR<RepasCreateInput, RepasUncheckedCreateInput>
    /**
     * In case the Repas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RepasUpdateInput, RepasUncheckedUpdateInput>
  }


  /**
   * Repas delete
   */
  export type RepasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repas
     */
    select?: RepasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepasInclude<ExtArgs> | null
    /**
     * Filter which Repas to delete.
     */
    where: RepasWhereUniqueInput
  }


  /**
   * Repas deleteMany
   */
  export type RepasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Repas to delete
     */
    where?: RepasWhereInput
  }


  /**
   * Repas.Aliment_Aliment_Repas_idToRepas
   */
  export type Repas$Aliment_Aliment_Repas_idToRepasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aliment
     */
    select?: AlimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentInclude<ExtArgs> | null
    where?: AlimentWhereInput
    orderBy?: AlimentOrderByWithRelationInput | AlimentOrderByWithRelationInput[]
    cursor?: AlimentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlimentScalarFieldEnum | AlimentScalarFieldEnum[]
  }


  /**
   * Repas without action
   */
  export type RepasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repas
     */
    select?: RepasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepasInclude<ExtArgs> | null
  }



  /**
   * Model Sante
   */

  export type AggregateSante = {
    _count: SanteCountAggregateOutputType | null
    _avg: SanteAvgAggregateOutputType | null
    _sum: SanteSumAggregateOutputType | null
    _min: SanteMinAggregateOutputType | null
    _max: SanteMaxAggregateOutputType | null
  }

  export type SanteAvgAggregateOutputType = {
    Sante_id: number | null
    Objectif_Sante_id: number | null
  }

  export type SanteSumAggregateOutputType = {
    Sante_id: number | null
    Objectif_Sante_id: number | null
  }

  export type SanteMinAggregateOutputType = {
    Sante_id: number | null
    Objectif_Sante_id: number | null
  }

  export type SanteMaxAggregateOutputType = {
    Sante_id: number | null
    Objectif_Sante_id: number | null
  }

  export type SanteCountAggregateOutputType = {
    Sante_id: number
    Objectif_Sante_id: number
    _all: number
  }


  export type SanteAvgAggregateInputType = {
    Sante_id?: true
    Objectif_Sante_id?: true
  }

  export type SanteSumAggregateInputType = {
    Sante_id?: true
    Objectif_Sante_id?: true
  }

  export type SanteMinAggregateInputType = {
    Sante_id?: true
    Objectif_Sante_id?: true
  }

  export type SanteMaxAggregateInputType = {
    Sante_id?: true
    Objectif_Sante_id?: true
  }

  export type SanteCountAggregateInputType = {
    Sante_id?: true
    Objectif_Sante_id?: true
    _all?: true
  }

  export type SanteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sante to aggregate.
     */
    where?: SanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Santes to fetch.
     */
    orderBy?: SanteOrderByWithRelationInput | SanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Santes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Santes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Santes
    **/
    _count?: true | SanteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SanteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SanteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SanteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SanteMaxAggregateInputType
  }

  export type GetSanteAggregateType<T extends SanteAggregateArgs> = {
        [P in keyof T & keyof AggregateSante]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSante[P]>
      : GetScalarType<T[P], AggregateSante[P]>
  }




  export type SanteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SanteWhereInput
    orderBy?: SanteOrderByWithAggregationInput | SanteOrderByWithAggregationInput[]
    by: SanteScalarFieldEnum[] | SanteScalarFieldEnum
    having?: SanteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SanteCountAggregateInputType | true
    _avg?: SanteAvgAggregateInputType
    _sum?: SanteSumAggregateInputType
    _min?: SanteMinAggregateInputType
    _max?: SanteMaxAggregateInputType
  }

  export type SanteGroupByOutputType = {
    Sante_id: number
    Objectif_Sante_id: number
    _count: SanteCountAggregateOutputType | null
    _avg: SanteAvgAggregateOutputType | null
    _sum: SanteSumAggregateOutputType | null
    _min: SanteMinAggregateOutputType | null
    _max: SanteMaxAggregateOutputType | null
  }

  type GetSanteGroupByPayload<T extends SanteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SanteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SanteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SanteGroupByOutputType[P]>
            : GetScalarType<T[P], SanteGroupByOutputType[P]>
        }
      >
    >


  export type SanteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Sante_id?: boolean
    Objectif_Sante_id?: boolean
    Objectif_Sante?: boolean | Objectif_SanteDefaultArgs<ExtArgs>
    Utilisateur?: boolean | Sante$UtilisateurArgs<ExtArgs>
    _count?: boolean | SanteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sante"]>

  export type SanteSelectScalar = {
    Sante_id?: boolean
    Objectif_Sante_id?: boolean
  }

  export type SanteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Objectif_Sante?: boolean | Objectif_SanteDefaultArgs<ExtArgs>
    Utilisateur?: boolean | Sante$UtilisateurArgs<ExtArgs>
    _count?: boolean | SanteCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SantePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sante"
    objects: {
      Objectif_Sante: Prisma.$Objectif_SantePayload<ExtArgs>
      Utilisateur: Prisma.$UtilisateurPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Sante_id: number
      Objectif_Sante_id: number
    }, ExtArgs["result"]["sante"]>
    composites: {}
  }


  type SanteGetPayload<S extends boolean | null | undefined | SanteDefaultArgs> = $Result.GetResult<Prisma.$SantePayload, S>

  type SanteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SanteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SanteCountAggregateInputType | true
    }

  export interface SanteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sante'], meta: { name: 'Sante' } }
    /**
     * Find zero or one Sante that matches the filter.
     * @param {SanteFindUniqueArgs} args - Arguments to find a Sante
     * @example
     * // Get one Sante
     * const sante = await prisma.sante.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SanteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SanteFindUniqueArgs<ExtArgs>>
    ): Prisma__SanteClient<$Result.GetResult<Prisma.$SantePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sante that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SanteFindUniqueOrThrowArgs} args - Arguments to find a Sante
     * @example
     * // Get one Sante
     * const sante = await prisma.sante.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SanteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SanteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SanteClient<$Result.GetResult<Prisma.$SantePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sante that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanteFindFirstArgs} args - Arguments to find a Sante
     * @example
     * // Get one Sante
     * const sante = await prisma.sante.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SanteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SanteFindFirstArgs<ExtArgs>>
    ): Prisma__SanteClient<$Result.GetResult<Prisma.$SantePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sante that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanteFindFirstOrThrowArgs} args - Arguments to find a Sante
     * @example
     * // Get one Sante
     * const sante = await prisma.sante.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SanteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SanteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SanteClient<$Result.GetResult<Prisma.$SantePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Santes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Santes
     * const santes = await prisma.sante.findMany()
     * 
     * // Get first 10 Santes
     * const santes = await prisma.sante.findMany({ take: 10 })
     * 
     * // Only select the `Sante_id`
     * const santeWithSante_idOnly = await prisma.sante.findMany({ select: { Sante_id: true } })
     * 
    **/
    findMany<T extends SanteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SanteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SantePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sante.
     * @param {SanteCreateArgs} args - Arguments to create a Sante.
     * @example
     * // Create one Sante
     * const Sante = await prisma.sante.create({
     *   data: {
     *     // ... data to create a Sante
     *   }
     * })
     * 
    **/
    create<T extends SanteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SanteCreateArgs<ExtArgs>>
    ): Prisma__SanteClient<$Result.GetResult<Prisma.$SantePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Santes.
     *     @param {SanteCreateManyArgs} args - Arguments to create many Santes.
     *     @example
     *     // Create many Santes
     *     const sante = await prisma.sante.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SanteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SanteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sante.
     * @param {SanteDeleteArgs} args - Arguments to delete one Sante.
     * @example
     * // Delete one Sante
     * const Sante = await prisma.sante.delete({
     *   where: {
     *     // ... filter to delete one Sante
     *   }
     * })
     * 
    **/
    delete<T extends SanteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SanteDeleteArgs<ExtArgs>>
    ): Prisma__SanteClient<$Result.GetResult<Prisma.$SantePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sante.
     * @param {SanteUpdateArgs} args - Arguments to update one Sante.
     * @example
     * // Update one Sante
     * const sante = await prisma.sante.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SanteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SanteUpdateArgs<ExtArgs>>
    ): Prisma__SanteClient<$Result.GetResult<Prisma.$SantePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Santes.
     * @param {SanteDeleteManyArgs} args - Arguments to filter Santes to delete.
     * @example
     * // Delete a few Santes
     * const { count } = await prisma.sante.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SanteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SanteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Santes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Santes
     * const sante = await prisma.sante.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SanteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SanteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sante.
     * @param {SanteUpsertArgs} args - Arguments to update or create a Sante.
     * @example
     * // Update or create a Sante
     * const sante = await prisma.sante.upsert({
     *   create: {
     *     // ... data to create a Sante
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sante we want to update
     *   }
     * })
    **/
    upsert<T extends SanteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SanteUpsertArgs<ExtArgs>>
    ): Prisma__SanteClient<$Result.GetResult<Prisma.$SantePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Santes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanteCountArgs} args - Arguments to filter Santes to count.
     * @example
     * // Count the number of Santes
     * const count = await prisma.sante.count({
     *   where: {
     *     // ... the filter for the Santes we want to count
     *   }
     * })
    **/
    count<T extends SanteCountArgs>(
      args?: Subset<T, SanteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SanteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SanteAggregateArgs>(args: Subset<T, SanteAggregateArgs>): Prisma.PrismaPromise<GetSanteAggregateType<T>>

    /**
     * Group by Sante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SanteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SanteGroupByArgs['orderBy'] }
        : { orderBy?: SanteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SanteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSanteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sante model
   */
  readonly fields: SanteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sante.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SanteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Objectif_Sante<T extends Objectif_SanteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Objectif_SanteDefaultArgs<ExtArgs>>): Prisma__Objectif_SanteClient<$Result.GetResult<Prisma.$Objectif_SantePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Utilisateur<T extends Sante$UtilisateurArgs<ExtArgs> = {}>(args?: Subset<T, Sante$UtilisateurArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Sante model
   */ 
  interface SanteFieldRefs {
    readonly Sante_id: FieldRef<"Sante", 'Int'>
    readonly Objectif_Sante_id: FieldRef<"Sante", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Sante findUnique
   */
  export type SanteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sante
     */
    select?: SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SanteInclude<ExtArgs> | null
    /**
     * Filter, which Sante to fetch.
     */
    where: SanteWhereUniqueInput
  }


  /**
   * Sante findUniqueOrThrow
   */
  export type SanteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sante
     */
    select?: SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SanteInclude<ExtArgs> | null
    /**
     * Filter, which Sante to fetch.
     */
    where: SanteWhereUniqueInput
  }


  /**
   * Sante findFirst
   */
  export type SanteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sante
     */
    select?: SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SanteInclude<ExtArgs> | null
    /**
     * Filter, which Sante to fetch.
     */
    where?: SanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Santes to fetch.
     */
    orderBy?: SanteOrderByWithRelationInput | SanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Santes.
     */
    cursor?: SanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Santes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Santes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Santes.
     */
    distinct?: SanteScalarFieldEnum | SanteScalarFieldEnum[]
  }


  /**
   * Sante findFirstOrThrow
   */
  export type SanteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sante
     */
    select?: SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SanteInclude<ExtArgs> | null
    /**
     * Filter, which Sante to fetch.
     */
    where?: SanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Santes to fetch.
     */
    orderBy?: SanteOrderByWithRelationInput | SanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Santes.
     */
    cursor?: SanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Santes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Santes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Santes.
     */
    distinct?: SanteScalarFieldEnum | SanteScalarFieldEnum[]
  }


  /**
   * Sante findMany
   */
  export type SanteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sante
     */
    select?: SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SanteInclude<ExtArgs> | null
    /**
     * Filter, which Santes to fetch.
     */
    where?: SanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Santes to fetch.
     */
    orderBy?: SanteOrderByWithRelationInput | SanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Santes.
     */
    cursor?: SanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Santes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Santes.
     */
    skip?: number
    distinct?: SanteScalarFieldEnum | SanteScalarFieldEnum[]
  }


  /**
   * Sante create
   */
  export type SanteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sante
     */
    select?: SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SanteInclude<ExtArgs> | null
    /**
     * The data needed to create a Sante.
     */
    data: XOR<SanteCreateInput, SanteUncheckedCreateInput>
  }


  /**
   * Sante createMany
   */
  export type SanteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Santes.
     */
    data: SanteCreateManyInput | SanteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Sante update
   */
  export type SanteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sante
     */
    select?: SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SanteInclude<ExtArgs> | null
    /**
     * The data needed to update a Sante.
     */
    data: XOR<SanteUpdateInput, SanteUncheckedUpdateInput>
    /**
     * Choose, which Sante to update.
     */
    where: SanteWhereUniqueInput
  }


  /**
   * Sante updateMany
   */
  export type SanteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Santes.
     */
    data: XOR<SanteUpdateManyMutationInput, SanteUncheckedUpdateManyInput>
    /**
     * Filter which Santes to update
     */
    where?: SanteWhereInput
  }


  /**
   * Sante upsert
   */
  export type SanteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sante
     */
    select?: SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SanteInclude<ExtArgs> | null
    /**
     * The filter to search for the Sante to update in case it exists.
     */
    where: SanteWhereUniqueInput
    /**
     * In case the Sante found by the `where` argument doesn't exist, create a new Sante with this data.
     */
    create: XOR<SanteCreateInput, SanteUncheckedCreateInput>
    /**
     * In case the Sante was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SanteUpdateInput, SanteUncheckedUpdateInput>
  }


  /**
   * Sante delete
   */
  export type SanteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sante
     */
    select?: SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SanteInclude<ExtArgs> | null
    /**
     * Filter which Sante to delete.
     */
    where: SanteWhereUniqueInput
  }


  /**
   * Sante deleteMany
   */
  export type SanteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Santes to delete
     */
    where?: SanteWhereInput
  }


  /**
   * Sante.Utilisateur
   */
  export type Sante$UtilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilisateurInclude<ExtArgs> | null
    where?: UtilisateurWhereInput
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    cursor?: UtilisateurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }


  /**
   * Sante without action
   */
  export type SanteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sante
     */
    select?: SanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SanteInclude<ExtArgs> | null
  }



  /**
   * Model Seances
   */

  export type AggregateSeances = {
    _count: SeancesCountAggregateOutputType | null
    _avg: SeancesAvgAggregateOutputType | null
    _sum: SeancesSumAggregateOutputType | null
    _min: SeancesMinAggregateOutputType | null
    _max: SeancesMaxAggregateOutputType | null
  }

  export type SeancesAvgAggregateOutputType = {
    Seance_id: number | null
    Exercice1_id: number | null
    Exercice2_id: number | null
    Exercice3_id: number | null
    Exercice4_id: number | null
    Nombre_Points_Seance: number | null
  }

  export type SeancesSumAggregateOutputType = {
    Seance_id: number | null
    Exercice1_id: number | null
    Exercice2_id: number | null
    Exercice3_id: number | null
    Exercice4_id: number | null
    Nombre_Points_Seance: number | null
  }

  export type SeancesMinAggregateOutputType = {
    Seance_id: number | null
    Exercice1_id: number | null
    Exercice2_id: number | null
    Exercice3_id: number | null
    Exercice4_id: number | null
    Nombre_Points_Seance: number | null
    Commentaire: string | null
    Nom_Seances: string | null
  }

  export type SeancesMaxAggregateOutputType = {
    Seance_id: number | null
    Exercice1_id: number | null
    Exercice2_id: number | null
    Exercice3_id: number | null
    Exercice4_id: number | null
    Nombre_Points_Seance: number | null
    Commentaire: string | null
    Nom_Seances: string | null
  }

  export type SeancesCountAggregateOutputType = {
    Seance_id: number
    Exercice1_id: number
    Exercice2_id: number
    Exercice3_id: number
    Exercice4_id: number
    Nombre_Points_Seance: number
    Commentaire: number
    Nom_Seances: number
    _all: number
  }


  export type SeancesAvgAggregateInputType = {
    Seance_id?: true
    Exercice1_id?: true
    Exercice2_id?: true
    Exercice3_id?: true
    Exercice4_id?: true
    Nombre_Points_Seance?: true
  }

  export type SeancesSumAggregateInputType = {
    Seance_id?: true
    Exercice1_id?: true
    Exercice2_id?: true
    Exercice3_id?: true
    Exercice4_id?: true
    Nombre_Points_Seance?: true
  }

  export type SeancesMinAggregateInputType = {
    Seance_id?: true
    Exercice1_id?: true
    Exercice2_id?: true
    Exercice3_id?: true
    Exercice4_id?: true
    Nombre_Points_Seance?: true
    Commentaire?: true
    Nom_Seances?: true
  }

  export type SeancesMaxAggregateInputType = {
    Seance_id?: true
    Exercice1_id?: true
    Exercice2_id?: true
    Exercice3_id?: true
    Exercice4_id?: true
    Nombre_Points_Seance?: true
    Commentaire?: true
    Nom_Seances?: true
  }

  export type SeancesCountAggregateInputType = {
    Seance_id?: true
    Exercice1_id?: true
    Exercice2_id?: true
    Exercice3_id?: true
    Exercice4_id?: true
    Nombre_Points_Seance?: true
    Commentaire?: true
    Nom_Seances?: true
    _all?: true
  }

  export type SeancesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seances to aggregate.
     */
    where?: SeancesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seances to fetch.
     */
    orderBy?: SeancesOrderByWithRelationInput | SeancesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeancesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seances
    **/
    _count?: true | SeancesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeancesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeancesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeancesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeancesMaxAggregateInputType
  }

  export type GetSeancesAggregateType<T extends SeancesAggregateArgs> = {
        [P in keyof T & keyof AggregateSeances]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeances[P]>
      : GetScalarType<T[P], AggregateSeances[P]>
  }




  export type SeancesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeancesWhereInput
    orderBy?: SeancesOrderByWithAggregationInput | SeancesOrderByWithAggregationInput[]
    by: SeancesScalarFieldEnum[] | SeancesScalarFieldEnum
    having?: SeancesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeancesCountAggregateInputType | true
    _avg?: SeancesAvgAggregateInputType
    _sum?: SeancesSumAggregateInputType
    _min?: SeancesMinAggregateInputType
    _max?: SeancesMaxAggregateInputType
  }

  export type SeancesGroupByOutputType = {
    Seance_id: number
    Exercice1_id: number
    Exercice2_id: number
    Exercice3_id: number
    Exercice4_id: number
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
    _count: SeancesCountAggregateOutputType | null
    _avg: SeancesAvgAggregateOutputType | null
    _sum: SeancesSumAggregateOutputType | null
    _min: SeancesMinAggregateOutputType | null
    _max: SeancesMaxAggregateOutputType | null
  }

  type GetSeancesGroupByPayload<T extends SeancesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeancesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeancesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeancesGroupByOutputType[P]>
            : GetScalarType<T[P], SeancesGroupByOutputType[P]>
        }
      >
    >


  export type SeancesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Seance_id?: boolean
    Exercice1_id?: boolean
    Exercice2_id?: boolean
    Exercice3_id?: boolean
    Exercice4_id?: boolean
    Nombre_Points_Seance?: boolean
    Commentaire?: boolean
    Nom_Seances?: boolean
    Exercices_Seances_Exercice1_idToExercices?: boolean | ExercicesDefaultArgs<ExtArgs>
    Exercices_Seances_Exercice2_idToExercices?: boolean | ExercicesDefaultArgs<ExtArgs>
    Exercices_Seances_Exercice3_idToExercices?: boolean | ExercicesDefaultArgs<ExtArgs>
    Exercices_Seances_Exercice4_idToExercices?: boolean | ExercicesDefaultArgs<ExtArgs>
    Sport?: boolean | Seances$SportArgs<ExtArgs>
    _count?: boolean | SeancesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seances"]>

  export type SeancesSelectScalar = {
    Seance_id?: boolean
    Exercice1_id?: boolean
    Exercice2_id?: boolean
    Exercice3_id?: boolean
    Exercice4_id?: boolean
    Nombre_Points_Seance?: boolean
    Commentaire?: boolean
    Nom_Seances?: boolean
  }

  export type SeancesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Exercices_Seances_Exercice1_idToExercices?: boolean | ExercicesDefaultArgs<ExtArgs>
    Exercices_Seances_Exercice2_idToExercices?: boolean | ExercicesDefaultArgs<ExtArgs>
    Exercices_Seances_Exercice3_idToExercices?: boolean | ExercicesDefaultArgs<ExtArgs>
    Exercices_Seances_Exercice4_idToExercices?: boolean | ExercicesDefaultArgs<ExtArgs>
    Sport?: boolean | Seances$SportArgs<ExtArgs>
    _count?: boolean | SeancesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SeancesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Seances"
    objects: {
      Exercices_Seances_Exercice1_idToExercices: Prisma.$ExercicesPayload<ExtArgs>
      Exercices_Seances_Exercice2_idToExercices: Prisma.$ExercicesPayload<ExtArgs>
      Exercices_Seances_Exercice3_idToExercices: Prisma.$ExercicesPayload<ExtArgs>
      Exercices_Seances_Exercice4_idToExercices: Prisma.$ExercicesPayload<ExtArgs>
      Sport: Prisma.$SportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Seance_id: number
      Exercice1_id: number
      Exercice2_id: number
      Exercice3_id: number
      Exercice4_id: number
      Nombre_Points_Seance: number
      Commentaire: string
      Nom_Seances: string
    }, ExtArgs["result"]["seances"]>
    composites: {}
  }


  type SeancesGetPayload<S extends boolean | null | undefined | SeancesDefaultArgs> = $Result.GetResult<Prisma.$SeancesPayload, S>

  type SeancesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeancesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeancesCountAggregateInputType | true
    }

  export interface SeancesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Seances'], meta: { name: 'Seances' } }
    /**
     * Find zero or one Seances that matches the filter.
     * @param {SeancesFindUniqueArgs} args - Arguments to find a Seances
     * @example
     * // Get one Seances
     * const seances = await prisma.seances.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SeancesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SeancesFindUniqueArgs<ExtArgs>>
    ): Prisma__SeancesClient<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Seances that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SeancesFindUniqueOrThrowArgs} args - Arguments to find a Seances
     * @example
     * // Get one Seances
     * const seances = await prisma.seances.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SeancesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SeancesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SeancesClient<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Seances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeancesFindFirstArgs} args - Arguments to find a Seances
     * @example
     * // Get one Seances
     * const seances = await prisma.seances.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SeancesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SeancesFindFirstArgs<ExtArgs>>
    ): Prisma__SeancesClient<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Seances that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeancesFindFirstOrThrowArgs} args - Arguments to find a Seances
     * @example
     * // Get one Seances
     * const seances = await prisma.seances.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SeancesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SeancesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SeancesClient<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Seances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeancesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seances
     * const seances = await prisma.seances.findMany()
     * 
     * // Get first 10 Seances
     * const seances = await prisma.seances.findMany({ take: 10 })
     * 
     * // Only select the `Seance_id`
     * const seancesWithSeance_idOnly = await prisma.seances.findMany({ select: { Seance_id: true } })
     * 
    **/
    findMany<T extends SeancesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SeancesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Seances.
     * @param {SeancesCreateArgs} args - Arguments to create a Seances.
     * @example
     * // Create one Seances
     * const Seances = await prisma.seances.create({
     *   data: {
     *     // ... data to create a Seances
     *   }
     * })
     * 
    **/
    create<T extends SeancesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SeancesCreateArgs<ExtArgs>>
    ): Prisma__SeancesClient<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Seances.
     *     @param {SeancesCreateManyArgs} args - Arguments to create many Seances.
     *     @example
     *     // Create many Seances
     *     const seances = await prisma.seances.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SeancesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SeancesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Seances.
     * @param {SeancesDeleteArgs} args - Arguments to delete one Seances.
     * @example
     * // Delete one Seances
     * const Seances = await prisma.seances.delete({
     *   where: {
     *     // ... filter to delete one Seances
     *   }
     * })
     * 
    **/
    delete<T extends SeancesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SeancesDeleteArgs<ExtArgs>>
    ): Prisma__SeancesClient<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Seances.
     * @param {SeancesUpdateArgs} args - Arguments to update one Seances.
     * @example
     * // Update one Seances
     * const seances = await prisma.seances.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SeancesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SeancesUpdateArgs<ExtArgs>>
    ): Prisma__SeancesClient<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Seances.
     * @param {SeancesDeleteManyArgs} args - Arguments to filter Seances to delete.
     * @example
     * // Delete a few Seances
     * const { count } = await prisma.seances.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SeancesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SeancesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeancesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seances
     * const seances = await prisma.seances.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SeancesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SeancesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Seances.
     * @param {SeancesUpsertArgs} args - Arguments to update or create a Seances.
     * @example
     * // Update or create a Seances
     * const seances = await prisma.seances.upsert({
     *   create: {
     *     // ... data to create a Seances
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seances we want to update
     *   }
     * })
    **/
    upsert<T extends SeancesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SeancesUpsertArgs<ExtArgs>>
    ): Prisma__SeancesClient<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Seances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeancesCountArgs} args - Arguments to filter Seances to count.
     * @example
     * // Count the number of Seances
     * const count = await prisma.seances.count({
     *   where: {
     *     // ... the filter for the Seances we want to count
     *   }
     * })
    **/
    count<T extends SeancesCountArgs>(
      args?: Subset<T, SeancesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeancesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeancesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeancesAggregateArgs>(args: Subset<T, SeancesAggregateArgs>): Prisma.PrismaPromise<GetSeancesAggregateType<T>>

    /**
     * Group by Seances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeancesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeancesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeancesGroupByArgs['orderBy'] }
        : { orderBy?: SeancesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeancesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeancesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Seances model
   */
  readonly fields: SeancesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Seances.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeancesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Exercices_Seances_Exercice1_idToExercices<T extends ExercicesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExercicesDefaultArgs<ExtArgs>>): Prisma__ExercicesClient<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Exercices_Seances_Exercice2_idToExercices<T extends ExercicesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExercicesDefaultArgs<ExtArgs>>): Prisma__ExercicesClient<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Exercices_Seances_Exercice3_idToExercices<T extends ExercicesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExercicesDefaultArgs<ExtArgs>>): Prisma__ExercicesClient<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Exercices_Seances_Exercice4_idToExercices<T extends ExercicesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExercicesDefaultArgs<ExtArgs>>): Prisma__ExercicesClient<$Result.GetResult<Prisma.$ExercicesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Sport<T extends Seances$SportArgs<ExtArgs> = {}>(args?: Subset<T, Seances$SportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Seances model
   */ 
  interface SeancesFieldRefs {
    readonly Seance_id: FieldRef<"Seances", 'Int'>
    readonly Exercice1_id: FieldRef<"Seances", 'Int'>
    readonly Exercice2_id: FieldRef<"Seances", 'Int'>
    readonly Exercice3_id: FieldRef<"Seances", 'Int'>
    readonly Exercice4_id: FieldRef<"Seances", 'Int'>
    readonly Nombre_Points_Seance: FieldRef<"Seances", 'Int'>
    readonly Commentaire: FieldRef<"Seances", 'String'>
    readonly Nom_Seances: FieldRef<"Seances", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Seances findUnique
   */
  export type SeancesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
    /**
     * Filter, which Seances to fetch.
     */
    where: SeancesWhereUniqueInput
  }


  /**
   * Seances findUniqueOrThrow
   */
  export type SeancesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
    /**
     * Filter, which Seances to fetch.
     */
    where: SeancesWhereUniqueInput
  }


  /**
   * Seances findFirst
   */
  export type SeancesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
    /**
     * Filter, which Seances to fetch.
     */
    where?: SeancesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seances to fetch.
     */
    orderBy?: SeancesOrderByWithRelationInput | SeancesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seances.
     */
    cursor?: SeancesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seances.
     */
    distinct?: SeancesScalarFieldEnum | SeancesScalarFieldEnum[]
  }


  /**
   * Seances findFirstOrThrow
   */
  export type SeancesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
    /**
     * Filter, which Seances to fetch.
     */
    where?: SeancesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seances to fetch.
     */
    orderBy?: SeancesOrderByWithRelationInput | SeancesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seances.
     */
    cursor?: SeancesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seances.
     */
    distinct?: SeancesScalarFieldEnum | SeancesScalarFieldEnum[]
  }


  /**
   * Seances findMany
   */
  export type SeancesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
    /**
     * Filter, which Seances to fetch.
     */
    where?: SeancesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seances to fetch.
     */
    orderBy?: SeancesOrderByWithRelationInput | SeancesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seances.
     */
    cursor?: SeancesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seances.
     */
    skip?: number
    distinct?: SeancesScalarFieldEnum | SeancesScalarFieldEnum[]
  }


  /**
   * Seances create
   */
  export type SeancesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
    /**
     * The data needed to create a Seances.
     */
    data: XOR<SeancesCreateInput, SeancesUncheckedCreateInput>
  }


  /**
   * Seances createMany
   */
  export type SeancesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Seances.
     */
    data: SeancesCreateManyInput | SeancesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Seances update
   */
  export type SeancesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
    /**
     * The data needed to update a Seances.
     */
    data: XOR<SeancesUpdateInput, SeancesUncheckedUpdateInput>
    /**
     * Choose, which Seances to update.
     */
    where: SeancesWhereUniqueInput
  }


  /**
   * Seances updateMany
   */
  export type SeancesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Seances.
     */
    data: XOR<SeancesUpdateManyMutationInput, SeancesUncheckedUpdateManyInput>
    /**
     * Filter which Seances to update
     */
    where?: SeancesWhereInput
  }


  /**
   * Seances upsert
   */
  export type SeancesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
    /**
     * The filter to search for the Seances to update in case it exists.
     */
    where: SeancesWhereUniqueInput
    /**
     * In case the Seances found by the `where` argument doesn't exist, create a new Seances with this data.
     */
    create: XOR<SeancesCreateInput, SeancesUncheckedCreateInput>
    /**
     * In case the Seances was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeancesUpdateInput, SeancesUncheckedUpdateInput>
  }


  /**
   * Seances delete
   */
  export type SeancesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
    /**
     * Filter which Seances to delete.
     */
    where: SeancesWhereUniqueInput
  }


  /**
   * Seances deleteMany
   */
  export type SeancesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seances to delete
     */
    where?: SeancesWhereInput
  }


  /**
   * Seances.Sport
   */
  export type Seances$SportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SportInclude<ExtArgs> | null
    where?: SportWhereInput
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    cursor?: SportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SportScalarFieldEnum | SportScalarFieldEnum[]
  }


  /**
   * Seances without action
   */
  export type SeancesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seances
     */
    select?: SeancesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeancesInclude<ExtArgs> | null
  }



  /**
   * Model Sport
   */

  export type AggregateSport = {
    _count: SportCountAggregateOutputType | null
    _avg: SportAvgAggregateOutputType | null
    _sum: SportSumAggregateOutputType | null
    _min: SportMinAggregateOutputType | null
    _max: SportMaxAggregateOutputType | null
  }

  export type SportAvgAggregateOutputType = {
    Sport_id: number | null
    Objectif_Sport: number | null
    Seance_id: number | null
    Utilisateur_id: number | null
  }

  export type SportSumAggregateOutputType = {
    Sport_id: number | null
    Objectif_Sport: number | null
    Seance_id: number | null
    Utilisateur_id: number | null
  }

  export type SportMinAggregateOutputType = {
    Sport_id: number | null
    Niveau_Sport: string | null
    Objectif_Sport: number | null
    Seance_id: number | null
    Utilisateur_id: number | null
  }

  export type SportMaxAggregateOutputType = {
    Sport_id: number | null
    Niveau_Sport: string | null
    Objectif_Sport: number | null
    Seance_id: number | null
    Utilisateur_id: number | null
  }

  export type SportCountAggregateOutputType = {
    Sport_id: number
    Niveau_Sport: number
    Objectif_Sport: number
    Seance_id: number
    Utilisateur_id: number
    _all: number
  }


  export type SportAvgAggregateInputType = {
    Sport_id?: true
    Objectif_Sport?: true
    Seance_id?: true
    Utilisateur_id?: true
  }

  export type SportSumAggregateInputType = {
    Sport_id?: true
    Objectif_Sport?: true
    Seance_id?: true
    Utilisateur_id?: true
  }

  export type SportMinAggregateInputType = {
    Sport_id?: true
    Niveau_Sport?: true
    Objectif_Sport?: true
    Seance_id?: true
    Utilisateur_id?: true
  }

  export type SportMaxAggregateInputType = {
    Sport_id?: true
    Niveau_Sport?: true
    Objectif_Sport?: true
    Seance_id?: true
    Utilisateur_id?: true
  }

  export type SportCountAggregateInputType = {
    Sport_id?: true
    Niveau_Sport?: true
    Objectif_Sport?: true
    Seance_id?: true
    Utilisateur_id?: true
    _all?: true
  }

  export type SportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sport to aggregate.
     */
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     */
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sports
    **/
    _count?: true | SportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SportMaxAggregateInputType
  }

  export type GetSportAggregateType<T extends SportAggregateArgs> = {
        [P in keyof T & keyof AggregateSport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSport[P]>
      : GetScalarType<T[P], AggregateSport[P]>
  }




  export type SportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SportWhereInput
    orderBy?: SportOrderByWithAggregationInput | SportOrderByWithAggregationInput[]
    by: SportScalarFieldEnum[] | SportScalarFieldEnum
    having?: SportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SportCountAggregateInputType | true
    _avg?: SportAvgAggregateInputType
    _sum?: SportSumAggregateInputType
    _min?: SportMinAggregateInputType
    _max?: SportMaxAggregateInputType
  }

  export type SportGroupByOutputType = {
    Sport_id: number
    Niveau_Sport: string
    Objectif_Sport: number
    Seance_id: number
    Utilisateur_id: number
    _count: SportCountAggregateOutputType | null
    _avg: SportAvgAggregateOutputType | null
    _sum: SportSumAggregateOutputType | null
    _min: SportMinAggregateOutputType | null
    _max: SportMaxAggregateOutputType | null
  }

  type GetSportGroupByPayload<T extends SportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SportGroupByOutputType[P]>
            : GetScalarType<T[P], SportGroupByOutputType[P]>
        }
      >
    >


  export type SportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Sport_id?: boolean
    Niveau_Sport?: boolean
    Objectif_Sport?: boolean
    Seance_id?: boolean
    Utilisateur_id?: boolean
    Seances?: boolean | SeancesDefaultArgs<ExtArgs>
    Utilisateur_Sport_Utilisateur_idToUtilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: boolean | Sport$Utilisateur_Utilisateur_Objectif_Sport_idToSportArgs<ExtArgs>
    _count?: boolean | SportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sport"]>

  export type SportSelectScalar = {
    Sport_id?: boolean
    Niveau_Sport?: boolean
    Objectif_Sport?: boolean
    Seance_id?: boolean
    Utilisateur_id?: boolean
  }

  export type SportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Seances?: boolean | SeancesDefaultArgs<ExtArgs>
    Utilisateur_Sport_Utilisateur_idToUtilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: boolean | Sport$Utilisateur_Utilisateur_Objectif_Sport_idToSportArgs<ExtArgs>
    _count?: boolean | SportCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sport"
    objects: {
      Seances: Prisma.$SeancesPayload<ExtArgs>
      Utilisateur_Sport_Utilisateur_idToUtilisateur: Prisma.$UtilisateurPayload<ExtArgs>
      Utilisateur_Utilisateur_Objectif_Sport_idToSport: Prisma.$UtilisateurPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Sport_id: number
      Niveau_Sport: string
      Objectif_Sport: number
      Seance_id: number
      Utilisateur_id: number
    }, ExtArgs["result"]["sport"]>
    composites: {}
  }


  type SportGetPayload<S extends boolean | null | undefined | SportDefaultArgs> = $Result.GetResult<Prisma.$SportPayload, S>

  type SportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SportCountAggregateInputType | true
    }

  export interface SportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sport'], meta: { name: 'Sport' } }
    /**
     * Find zero or one Sport that matches the filter.
     * @param {SportFindUniqueArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SportFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SportFindUniqueArgs<ExtArgs>>
    ): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sport that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SportFindUniqueOrThrowArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SportFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SportFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportFindFirstArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SportFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SportFindFirstArgs<ExtArgs>>
    ): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportFindFirstOrThrowArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SportFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SportFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sports
     * const sports = await prisma.sport.findMany()
     * 
     * // Get first 10 Sports
     * const sports = await prisma.sport.findMany({ take: 10 })
     * 
     * // Only select the `Sport_id`
     * const sportWithSport_idOnly = await prisma.sport.findMany({ select: { Sport_id: true } })
     * 
    **/
    findMany<T extends SportFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SportFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sport.
     * @param {SportCreateArgs} args - Arguments to create a Sport.
     * @example
     * // Create one Sport
     * const Sport = await prisma.sport.create({
     *   data: {
     *     // ... data to create a Sport
     *   }
     * })
     * 
    **/
    create<T extends SportCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SportCreateArgs<ExtArgs>>
    ): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sports.
     *     @param {SportCreateManyArgs} args - Arguments to create many Sports.
     *     @example
     *     // Create many Sports
     *     const sport = await prisma.sport.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SportCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SportCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sport.
     * @param {SportDeleteArgs} args - Arguments to delete one Sport.
     * @example
     * // Delete one Sport
     * const Sport = await prisma.sport.delete({
     *   where: {
     *     // ... filter to delete one Sport
     *   }
     * })
     * 
    **/
    delete<T extends SportDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SportDeleteArgs<ExtArgs>>
    ): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sport.
     * @param {SportUpdateArgs} args - Arguments to update one Sport.
     * @example
     * // Update one Sport
     * const sport = await prisma.sport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SportUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SportUpdateArgs<ExtArgs>>
    ): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sports.
     * @param {SportDeleteManyArgs} args - Arguments to filter Sports to delete.
     * @example
     * // Delete a few Sports
     * const { count } = await prisma.sport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SportDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SportDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sports
     * const sport = await prisma.sport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SportUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SportUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sport.
     * @param {SportUpsertArgs} args - Arguments to update or create a Sport.
     * @example
     * // Update or create a Sport
     * const sport = await prisma.sport.upsert({
     *   create: {
     *     // ... data to create a Sport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sport we want to update
     *   }
     * })
    **/
    upsert<T extends SportUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SportUpsertArgs<ExtArgs>>
    ): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportCountArgs} args - Arguments to filter Sports to count.
     * @example
     * // Count the number of Sports
     * const count = await prisma.sport.count({
     *   where: {
     *     // ... the filter for the Sports we want to count
     *   }
     * })
    **/
    count<T extends SportCountArgs>(
      args?: Subset<T, SportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SportAggregateArgs>(args: Subset<T, SportAggregateArgs>): Prisma.PrismaPromise<GetSportAggregateType<T>>

    /**
     * Group by Sport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SportGroupByArgs['orderBy'] }
        : { orderBy?: SportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sport model
   */
  readonly fields: SportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Seances<T extends SeancesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeancesDefaultArgs<ExtArgs>>): Prisma__SeancesClient<$Result.GetResult<Prisma.$SeancesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Utilisateur_Sport_Utilisateur_idToUtilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Utilisateur_Utilisateur_Objectif_Sport_idToSport<T extends Sport$Utilisateur_Utilisateur_Objectif_Sport_idToSportArgs<ExtArgs> = {}>(args?: Subset<T, Sport$Utilisateur_Utilisateur_Objectif_Sport_idToSportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Sport model
   */ 
  interface SportFieldRefs {
    readonly Sport_id: FieldRef<"Sport", 'Int'>
    readonly Niveau_Sport: FieldRef<"Sport", 'String'>
    readonly Objectif_Sport: FieldRef<"Sport", 'Int'>
    readonly Seance_id: FieldRef<"Sport", 'Int'>
    readonly Utilisateur_id: FieldRef<"Sport", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Sport findUnique
   */
  export type SportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sport to fetch.
     */
    where: SportWhereUniqueInput
  }


  /**
   * Sport findUniqueOrThrow
   */
  export type SportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sport to fetch.
     */
    where: SportWhereUniqueInput
  }


  /**
   * Sport findFirst
   */
  export type SportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sport to fetch.
     */
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     */
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sports.
     */
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sports.
     */
    distinct?: SportScalarFieldEnum | SportScalarFieldEnum[]
  }


  /**
   * Sport findFirstOrThrow
   */
  export type SportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sport to fetch.
     */
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     */
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sports.
     */
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sports.
     */
    distinct?: SportScalarFieldEnum | SportScalarFieldEnum[]
  }


  /**
   * Sport findMany
   */
  export type SportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sports to fetch.
     */
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     */
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sports.
     */
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     */
    skip?: number
    distinct?: SportScalarFieldEnum | SportScalarFieldEnum[]
  }


  /**
   * Sport create
   */
  export type SportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * The data needed to create a Sport.
     */
    data: XOR<SportCreateInput, SportUncheckedCreateInput>
  }


  /**
   * Sport createMany
   */
  export type SportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sports.
     */
    data: SportCreateManyInput | SportCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Sport update
   */
  export type SportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * The data needed to update a Sport.
     */
    data: XOR<SportUpdateInput, SportUncheckedUpdateInput>
    /**
     * Choose, which Sport to update.
     */
    where: SportWhereUniqueInput
  }


  /**
   * Sport updateMany
   */
  export type SportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sports.
     */
    data: XOR<SportUpdateManyMutationInput, SportUncheckedUpdateManyInput>
    /**
     * Filter which Sports to update
     */
    where?: SportWhereInput
  }


  /**
   * Sport upsert
   */
  export type SportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * The filter to search for the Sport to update in case it exists.
     */
    where: SportWhereUniqueInput
    /**
     * In case the Sport found by the `where` argument doesn't exist, create a new Sport with this data.
     */
    create: XOR<SportCreateInput, SportUncheckedCreateInput>
    /**
     * In case the Sport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SportUpdateInput, SportUncheckedUpdateInput>
  }


  /**
   * Sport delete
   */
  export type SportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter which Sport to delete.
     */
    where: SportWhereUniqueInput
  }


  /**
   * Sport deleteMany
   */
  export type SportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sports to delete
     */
    where?: SportWhereInput
  }


  /**
   * Sport.Utilisateur_Utilisateur_Objectif_Sport_idToSport
   */
  export type Sport$Utilisateur_Utilisateur_Objectif_Sport_idToSportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilisateurInclude<ExtArgs> | null
    where?: UtilisateurWhereInput
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    cursor?: UtilisateurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }


  /**
   * Sport without action
   */
  export type SportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SportInclude<ExtArgs> | null
  }



  /**
   * Model Utilisateur
   */

  export type AggregateUtilisateur = {
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  export type UtilisateurAvgAggregateOutputType = {
    Utilisateur_id: number | null
    Poids: number | null
    Taille: number | null
    Objectif_Sante_id: number | null
    Objectif_Sport_id: number | null
    Objectif_Alimentaire_id: number | null
  }

  export type UtilisateurSumAggregateOutputType = {
    Utilisateur_id: number | null
    Poids: number | null
    Taille: number | null
    Objectif_Sante_id: number | null
    Objectif_Sport_id: number | null
    Objectif_Alimentaire_id: number | null
  }

  export type UtilisateurMinAggregateOutputType = {
    Utilisateur_id: number | null
    Prenom: string | null
    Nom: string | null
    Email: string | null
    Mot_Passe: string | null
    Date_Naissance: Date | null
    Date_Creation_Inscription: Date | null
    Sexe: string | null
    Poids: number | null
    Taille: number | null
    Niveau_Sport: string | null
    Regime_Alimentaire: string | null
    Objectif_Sante_id: number | null
    Objectif_Sport_id: number | null
    Objectif_Alimentaire_id: number | null
  }

  export type UtilisateurMaxAggregateOutputType = {
    Utilisateur_id: number | null
    Prenom: string | null
    Nom: string | null
    Email: string | null
    Mot_Passe: string | null
    Date_Naissance: Date | null
    Date_Creation_Inscription: Date | null
    Sexe: string | null
    Poids: number | null
    Taille: number | null
    Niveau_Sport: string | null
    Regime_Alimentaire: string | null
    Objectif_Sante_id: number | null
    Objectif_Sport_id: number | null
    Objectif_Alimentaire_id: number | null
  }

  export type UtilisateurCountAggregateOutputType = {
    Utilisateur_id: number
    Prenom: number
    Nom: number
    Email: number
    Mot_Passe: number
    Date_Naissance: number
    Date_Creation_Inscription: number
    Sexe: number
    Poids: number
    Taille: number
    Niveau_Sport: number
    Regime_Alimentaire: number
    Objectif_Sante_id: number
    Objectif_Sport_id: number
    Objectif_Alimentaire_id: number
    _all: number
  }


  export type UtilisateurAvgAggregateInputType = {
    Utilisateur_id?: true
    Poids?: true
    Taille?: true
    Objectif_Sante_id?: true
    Objectif_Sport_id?: true
    Objectif_Alimentaire_id?: true
  }

  export type UtilisateurSumAggregateInputType = {
    Utilisateur_id?: true
    Poids?: true
    Taille?: true
    Objectif_Sante_id?: true
    Objectif_Sport_id?: true
    Objectif_Alimentaire_id?: true
  }

  export type UtilisateurMinAggregateInputType = {
    Utilisateur_id?: true
    Prenom?: true
    Nom?: true
    Email?: true
    Mot_Passe?: true
    Date_Naissance?: true
    Date_Creation_Inscription?: true
    Sexe?: true
    Poids?: true
    Taille?: true
    Niveau_Sport?: true
    Regime_Alimentaire?: true
    Objectif_Sante_id?: true
    Objectif_Sport_id?: true
    Objectif_Alimentaire_id?: true
  }

  export type UtilisateurMaxAggregateInputType = {
    Utilisateur_id?: true
    Prenom?: true
    Nom?: true
    Email?: true
    Mot_Passe?: true
    Date_Naissance?: true
    Date_Creation_Inscription?: true
    Sexe?: true
    Poids?: true
    Taille?: true
    Niveau_Sport?: true
    Regime_Alimentaire?: true
    Objectif_Sante_id?: true
    Objectif_Sport_id?: true
    Objectif_Alimentaire_id?: true
  }

  export type UtilisateurCountAggregateInputType = {
    Utilisateur_id?: true
    Prenom?: true
    Nom?: true
    Email?: true
    Mot_Passe?: true
    Date_Naissance?: true
    Date_Creation_Inscription?: true
    Sexe?: true
    Poids?: true
    Taille?: true
    Niveau_Sport?: true
    Regime_Alimentaire?: true
    Objectif_Sante_id?: true
    Objectif_Sport_id?: true
    Objectif_Alimentaire_id?: true
    _all?: true
  }

  export type UtilisateurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateur to aggregate.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Utilisateurs
    **/
    _count?: true | UtilisateurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UtilisateurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UtilisateurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UtilisateurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UtilisateurMaxAggregateInputType
  }

  export type GetUtilisateurAggregateType<T extends UtilisateurAggregateArgs> = {
        [P in keyof T & keyof AggregateUtilisateur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUtilisateur[P]>
      : GetScalarType<T[P], AggregateUtilisateur[P]>
  }




  export type UtilisateurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UtilisateurWhereInput
    orderBy?: UtilisateurOrderByWithAggregationInput | UtilisateurOrderByWithAggregationInput[]
    by: UtilisateurScalarFieldEnum[] | UtilisateurScalarFieldEnum
    having?: UtilisateurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UtilisateurCountAggregateInputType | true
    _avg?: UtilisateurAvgAggregateInputType
    _sum?: UtilisateurSumAggregateInputType
    _min?: UtilisateurMinAggregateInputType
    _max?: UtilisateurMaxAggregateInputType
  }

  export type UtilisateurGroupByOutputType = {
    Utilisateur_id: number
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date
    Date_Creation_Inscription: Date
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Objectif_Sante_id: number
    Objectif_Sport_id: number
    Objectif_Alimentaire_id: number
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  type GetUtilisateurGroupByPayload<T extends UtilisateurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UtilisateurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UtilisateurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
            : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
        }
      >
    >


  export type UtilisateurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Utilisateur_id?: boolean
    Prenom?: boolean
    Nom?: boolean
    Email?: boolean
    Mot_Passe?: boolean
    Date_Naissance?: boolean
    Date_Creation_Inscription?: boolean
    Sexe?: boolean
    Poids?: boolean
    Taille?: boolean
    Niveau_Sport?: boolean
    Regime_Alimentaire?: boolean
    Objectif_Sante_id?: boolean
    Objectif_Sport_id?: boolean
    Objectif_Alimentaire_id?: boolean
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: boolean | Utilisateur$Alimentation_Alimentation_Utilisateur_idToUtilisateurArgs<ExtArgs>
    Historique_Sport?: boolean | Utilisateur$Historique_SportArgs<ExtArgs>
    Sport_Sport_Utilisateur_idToUtilisateur?: boolean | Utilisateur$Sport_Sport_Utilisateur_idToUtilisateurArgs<ExtArgs>
    Sante?: boolean | SanteDefaultArgs<ExtArgs>
    Sport_Utilisateur_Objectif_Sport_idToSport?: boolean | SportDefaultArgs<ExtArgs>
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation?: boolean | AlimentationDefaultArgs<ExtArgs>
    _count?: boolean | UtilisateurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["utilisateur"]>

  export type UtilisateurSelectScalar = {
    Utilisateur_id?: boolean
    Prenom?: boolean
    Nom?: boolean
    Email?: boolean
    Mot_Passe?: boolean
    Date_Naissance?: boolean
    Date_Creation_Inscription?: boolean
    Sexe?: boolean
    Poids?: boolean
    Taille?: boolean
    Niveau_Sport?: boolean
    Regime_Alimentaire?: boolean
    Objectif_Sante_id?: boolean
    Objectif_Sport_id?: boolean
    Objectif_Alimentaire_id?: boolean
  }

  export type UtilisateurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: boolean | Utilisateur$Alimentation_Alimentation_Utilisateur_idToUtilisateurArgs<ExtArgs>
    Historique_Sport?: boolean | Utilisateur$Historique_SportArgs<ExtArgs>
    Sport_Sport_Utilisateur_idToUtilisateur?: boolean | Utilisateur$Sport_Sport_Utilisateur_idToUtilisateurArgs<ExtArgs>
    Sante?: boolean | SanteDefaultArgs<ExtArgs>
    Sport_Utilisateur_Objectif_Sport_idToSport?: boolean | SportDefaultArgs<ExtArgs>
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation?: boolean | AlimentationDefaultArgs<ExtArgs>
    _count?: boolean | UtilisateurCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UtilisateurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Utilisateur"
    objects: {
      Alimentation_Alimentation_Utilisateur_idToUtilisateur: Prisma.$AlimentationPayload<ExtArgs>[]
      Historique_Sport: Prisma.$Historique_SportPayload<ExtArgs>[]
      Sport_Sport_Utilisateur_idToUtilisateur: Prisma.$SportPayload<ExtArgs>[]
      Sante: Prisma.$SantePayload<ExtArgs>
      Sport_Utilisateur_Objectif_Sport_idToSport: Prisma.$SportPayload<ExtArgs>
      Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation: Prisma.$AlimentationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Utilisateur_id: number
      Prenom: string
      Nom: string
      Email: string
      Mot_Passe: string
      Date_Naissance: Date
      Date_Creation_Inscription: Date
      Sexe: string
      Poids: number
      Taille: number
      Niveau_Sport: string
      Regime_Alimentaire: string
      Objectif_Sante_id: number
      Objectif_Sport_id: number
      Objectif_Alimentaire_id: number
    }, ExtArgs["result"]["utilisateur"]>
    composites: {}
  }


  type UtilisateurGetPayload<S extends boolean | null | undefined | UtilisateurDefaultArgs> = $Result.GetResult<Prisma.$UtilisateurPayload, S>

  type UtilisateurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UtilisateurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UtilisateurCountAggregateInputType | true
    }

  export interface UtilisateurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Utilisateur'], meta: { name: 'Utilisateur' } }
    /**
     * Find zero or one Utilisateur that matches the filter.
     * @param {UtilisateurFindUniqueArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UtilisateurFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UtilisateurFindUniqueArgs<ExtArgs>>
    ): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Utilisateur that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UtilisateurFindUniqueOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UtilisateurFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilisateurFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Utilisateur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UtilisateurFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilisateurFindFirstArgs<ExtArgs>>
    ): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Utilisateur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UtilisateurFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilisateurFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Utilisateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany()
     * 
     * // Get first 10 Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany({ take: 10 })
     * 
     * // Only select the `Utilisateur_id`
     * const utilisateurWithUtilisateur_idOnly = await prisma.utilisateur.findMany({ select: { Utilisateur_id: true } })
     * 
    **/
    findMany<T extends UtilisateurFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilisateurFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Utilisateur.
     * @param {UtilisateurCreateArgs} args - Arguments to create a Utilisateur.
     * @example
     * // Create one Utilisateur
     * const Utilisateur = await prisma.utilisateur.create({
     *   data: {
     *     // ... data to create a Utilisateur
     *   }
     * })
     * 
    **/
    create<T extends UtilisateurCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UtilisateurCreateArgs<ExtArgs>>
    ): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Utilisateurs.
     *     @param {UtilisateurCreateManyArgs} args - Arguments to create many Utilisateurs.
     *     @example
     *     // Create many Utilisateurs
     *     const utilisateur = await prisma.utilisateur.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UtilisateurCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilisateurCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Utilisateur.
     * @param {UtilisateurDeleteArgs} args - Arguments to delete one Utilisateur.
     * @example
     * // Delete one Utilisateur
     * const Utilisateur = await prisma.utilisateur.delete({
     *   where: {
     *     // ... filter to delete one Utilisateur
     *   }
     * })
     * 
    **/
    delete<T extends UtilisateurDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UtilisateurDeleteArgs<ExtArgs>>
    ): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Utilisateur.
     * @param {UtilisateurUpdateArgs} args - Arguments to update one Utilisateur.
     * @example
     * // Update one Utilisateur
     * const utilisateur = await prisma.utilisateur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UtilisateurUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UtilisateurUpdateArgs<ExtArgs>>
    ): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Utilisateurs.
     * @param {UtilisateurDeleteManyArgs} args - Arguments to filter Utilisateurs to delete.
     * @example
     * // Delete a few Utilisateurs
     * const { count } = await prisma.utilisateur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UtilisateurDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilisateurDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Utilisateurs
     * const utilisateur = await prisma.utilisateur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UtilisateurUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UtilisateurUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Utilisateur.
     * @param {UtilisateurUpsertArgs} args - Arguments to update or create a Utilisateur.
     * @example
     * // Update or create a Utilisateur
     * const utilisateur = await prisma.utilisateur.upsert({
     *   create: {
     *     // ... data to create a Utilisateur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Utilisateur we want to update
     *   }
     * })
    **/
    upsert<T extends UtilisateurUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UtilisateurUpsertArgs<ExtArgs>>
    ): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurCountArgs} args - Arguments to filter Utilisateurs to count.
     * @example
     * // Count the number of Utilisateurs
     * const count = await prisma.utilisateur.count({
     *   where: {
     *     // ... the filter for the Utilisateurs we want to count
     *   }
     * })
    **/
    count<T extends UtilisateurCountArgs>(
      args?: Subset<T, UtilisateurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UtilisateurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UtilisateurAggregateArgs>(args: Subset<T, UtilisateurAggregateArgs>): Prisma.PrismaPromise<GetUtilisateurAggregateType<T>>

    /**
     * Group by Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UtilisateurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UtilisateurGroupByArgs['orderBy'] }
        : { orderBy?: UtilisateurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UtilisateurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUtilisateurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Utilisateur model
   */
  readonly fields: UtilisateurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Utilisateur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UtilisateurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Alimentation_Alimentation_Utilisateur_idToUtilisateur<T extends Utilisateur$Alimentation_Alimentation_Utilisateur_idToUtilisateurArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$Alimentation_Alimentation_Utilisateur_idToUtilisateurArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlimentationPayload<ExtArgs>, T, 'findMany'> | Null>;

    Historique_Sport<T extends Utilisateur$Historique_SportArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$Historique_SportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Historique_SportPayload<ExtArgs>, T, 'findMany'> | Null>;

    Sport_Sport_Utilisateur_idToUtilisateur<T extends Utilisateur$Sport_Sport_Utilisateur_idToUtilisateurArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$Sport_Sport_Utilisateur_idToUtilisateurArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, 'findMany'> | Null>;

    Sante<T extends SanteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SanteDefaultArgs<ExtArgs>>): Prisma__SanteClient<$Result.GetResult<Prisma.$SantePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Sport_Utilisateur_Objectif_Sport_idToSport<T extends SportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SportDefaultArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation<T extends AlimentationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlimentationDefaultArgs<ExtArgs>>): Prisma__AlimentationClient<$Result.GetResult<Prisma.$AlimentationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Utilisateur model
   */ 
  interface UtilisateurFieldRefs {
    readonly Utilisateur_id: FieldRef<"Utilisateur", 'Int'>
    readonly Prenom: FieldRef<"Utilisateur", 'String'>
    readonly Nom: FieldRef<"Utilisateur", 'String'>
    readonly Email: FieldRef<"Utilisateur", 'String'>
    readonly Mot_Passe: FieldRef<"Utilisateur", 'String'>
    readonly Date_Naissance: FieldRef<"Utilisateur", 'DateTime'>
    readonly Date_Creation_Inscription: FieldRef<"Utilisateur", 'DateTime'>
    readonly Sexe: FieldRef<"Utilisateur", 'String'>
    readonly Poids: FieldRef<"Utilisateur", 'Int'>
    readonly Taille: FieldRef<"Utilisateur", 'Int'>
    readonly Niveau_Sport: FieldRef<"Utilisateur", 'String'>
    readonly Regime_Alimentaire: FieldRef<"Utilisateur", 'String'>
    readonly Objectif_Sante_id: FieldRef<"Utilisateur", 'Int'>
    readonly Objectif_Sport_id: FieldRef<"Utilisateur", 'Int'>
    readonly Objectif_Alimentaire_id: FieldRef<"Utilisateur", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Utilisateur findUnique
   */
  export type UtilisateurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }


  /**
   * Utilisateur findUniqueOrThrow
   */
  export type UtilisateurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }


  /**
   * Utilisateur findFirst
   */
  export type UtilisateurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }


  /**
   * Utilisateur findFirstOrThrow
   */
  export type UtilisateurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }


  /**
   * Utilisateur findMany
   */
  export type UtilisateurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateurs to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }


  /**
   * Utilisateur create
   */
  export type UtilisateurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The data needed to create a Utilisateur.
     */
    data: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
  }


  /**
   * Utilisateur createMany
   */
  export type UtilisateurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Utilisateurs.
     */
    data: UtilisateurCreateManyInput | UtilisateurCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Utilisateur update
   */
  export type UtilisateurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The data needed to update a Utilisateur.
     */
    data: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
    /**
     * Choose, which Utilisateur to update.
     */
    where: UtilisateurWhereUniqueInput
  }


  /**
   * Utilisateur updateMany
   */
  export type UtilisateurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Utilisateurs.
     */
    data: XOR<UtilisateurUpdateManyMutationInput, UtilisateurUncheckedUpdateManyInput>
    /**
     * Filter which Utilisateurs to update
     */
    where?: UtilisateurWhereInput
  }


  /**
   * Utilisateur upsert
   */
  export type UtilisateurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The filter to search for the Utilisateur to update in case it exists.
     */
    where: UtilisateurWhereUniqueInput
    /**
     * In case the Utilisateur found by the `where` argument doesn't exist, create a new Utilisateur with this data.
     */
    create: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
    /**
     * In case the Utilisateur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
  }


  /**
   * Utilisateur delete
   */
  export type UtilisateurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter which Utilisateur to delete.
     */
    where: UtilisateurWhereUniqueInput
  }


  /**
   * Utilisateur deleteMany
   */
  export type UtilisateurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateurs to delete
     */
    where?: UtilisateurWhereInput
  }


  /**
   * Utilisateur.Alimentation_Alimentation_Utilisateur_idToUtilisateur
   */
  export type Utilisateur$Alimentation_Alimentation_Utilisateur_idToUtilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentation
     */
    select?: AlimentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlimentationInclude<ExtArgs> | null
    where?: AlimentationWhereInput
    orderBy?: AlimentationOrderByWithRelationInput | AlimentationOrderByWithRelationInput[]
    cursor?: AlimentationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlimentationScalarFieldEnum | AlimentationScalarFieldEnum[]
  }


  /**
   * Utilisateur.Historique_Sport
   */
  export type Utilisateur$Historique_SportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique_Sport
     */
    select?: Historique_SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Historique_SportInclude<ExtArgs> | null
    where?: Historique_SportWhereInput
    orderBy?: Historique_SportOrderByWithRelationInput | Historique_SportOrderByWithRelationInput[]
    cursor?: Historique_SportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Historique_SportScalarFieldEnum | Historique_SportScalarFieldEnum[]
  }


  /**
   * Utilisateur.Sport_Sport_Utilisateur_idToUtilisateur
   */
  export type Utilisateur$Sport_Sport_Utilisateur_idToUtilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SportInclude<ExtArgs> | null
    where?: SportWhereInput
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    cursor?: SportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SportScalarFieldEnum | SportScalarFieldEnum[]
  }


  /**
   * Utilisateur without action
   */
  export type UtilisateurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilisateurInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AlimentScalarFieldEnum: {
    Aliment_id: 'Aliment_id',
    Repas_id: 'Repas_id',
    Aliment_Type: 'Aliment_Type'
  };

  export type AlimentScalarFieldEnum = (typeof AlimentScalarFieldEnum)[keyof typeof AlimentScalarFieldEnum]


  export const AlimentationScalarFieldEnum: {
    Alimentation_id: 'Alimentation_id',
    Utilisateur_id: 'Utilisateur_id',
    Maintien_Calorique: 'Maintien_Calorique',
    Objectif_Calorique: 'Objectif_Calorique',
    Objectif_Proteines: 'Objectif_Proteines',
    Objectif_Glucides: 'Objectif_Glucides',
    Objectif_Lipides: 'Objectif_Lipides'
  };

  export type AlimentationScalarFieldEnum = (typeof AlimentationScalarFieldEnum)[keyof typeof AlimentationScalarFieldEnum]


  export const Aliments_indesirableScalarFieldEnum: {
    Aliments_indesirable_id: 'Aliments_indesirable_id',
    Aliment_id: 'Aliment_id'
  };

  export type Aliments_indesirableScalarFieldEnum = (typeof Aliments_indesirableScalarFieldEnum)[keyof typeof Aliments_indesirableScalarFieldEnum]


  export const ExercicesScalarFieldEnum: {
    Exercice_id: 'Exercice_id',
    Exercice_nom: 'Exercice_nom',
    Exercice_type: 'Exercice_type',
    Temps_repos: 'Temps_repos',
    Repetitions_Serie1: 'Repetitions_Serie1',
    Repetitions_Serie2: 'Repetitions_Serie2',
    Repetitions_Serie3: 'Repetitions_Serie3',
    Repetitions_Serie4: 'Repetitions_Serie4',
    Exercice_Description: 'Exercice_Description'
  };

  export type ExercicesScalarFieldEnum = (typeof ExercicesScalarFieldEnum)[keyof typeof ExercicesScalarFieldEnum]


  export const Historique_SanteScalarFieldEnum: {
    Historique_Sante_id: 'Historique_Sante_id',
    Objectif_Sante_id: 'Objectif_Sante_id',
    Poids: 'Poids',
    Date: 'Date',
    Nombre_pas: 'Nombre_pas',
    Sommeil: 'Sommeil',
    Eau: 'Eau'
  };

  export type Historique_SanteScalarFieldEnum = (typeof Historique_SanteScalarFieldEnum)[keyof typeof Historique_SanteScalarFieldEnum]


  export const Historique_SportScalarFieldEnum: {
    Historique_id: 'Historique_id',
    Utilisateur_id: 'Utilisateur_id',
    Exercice_id: 'Exercice_id',
    Date: 'Date',
    Poids_Serie1: 'Poids_Serie1',
    Poids_Serie2: 'Poids_Serie2',
    Poids_Serie3: 'Poids_Serie3',
    Poids_serie4: 'Poids_serie4',
    Repetitions: 'Repetitions',
    Note: 'Note',
    Serie: 'Serie'
  };

  export type Historique_SportScalarFieldEnum = (typeof Historique_SportScalarFieldEnum)[keyof typeof Historique_SportScalarFieldEnum]


  export const Objectif_SanteScalarFieldEnum: {
    Objectif_Sante_id: 'Objectif_Sante_id',
    Objectif_Nombre_pas: 'Objectif_Nombre_pas',
    Objectif_Poids: 'Objectif_Poids',
    Objectif_Sommeil: 'Objectif_Sommeil',
    Objectif_Eau: 'Objectif_Eau'
  };

  export type Objectif_SanteScalarFieldEnum = (typeof Objectif_SanteScalarFieldEnum)[keyof typeof Objectif_SanteScalarFieldEnum]


  export const RepasScalarFieldEnum: {
    Repas_id: 'Repas_id',
    Alimentation_id: 'Alimentation_id',
    Aliment_id: 'Aliment_id',
    Quantite: 'Quantite',
    Glucides: 'Glucides',
    Calories: 'Calories',
    Lipides: 'Lipides',
    Proteines: 'Proteines',
    Description: 'Description',
    Duree: 'Duree',
    Image: 'Image',
    Difficulte: 'Difficulte',
    Saison: 'Saison'
  };

  export type RepasScalarFieldEnum = (typeof RepasScalarFieldEnum)[keyof typeof RepasScalarFieldEnum]


  export const SanteScalarFieldEnum: {
    Sante_id: 'Sante_id',
    Objectif_Sante_id: 'Objectif_Sante_id'
  };

  export type SanteScalarFieldEnum = (typeof SanteScalarFieldEnum)[keyof typeof SanteScalarFieldEnum]


  export const SeancesScalarFieldEnum: {
    Seance_id: 'Seance_id',
    Exercice1_id: 'Exercice1_id',
    Exercice2_id: 'Exercice2_id',
    Exercice3_id: 'Exercice3_id',
    Exercice4_id: 'Exercice4_id',
    Nombre_Points_Seance: 'Nombre_Points_Seance',
    Commentaire: 'Commentaire',
    Nom_Seances: 'Nom_Seances'
  };

  export type SeancesScalarFieldEnum = (typeof SeancesScalarFieldEnum)[keyof typeof SeancesScalarFieldEnum]


  export const SportScalarFieldEnum: {
    Sport_id: 'Sport_id',
    Niveau_Sport: 'Niveau_Sport',
    Objectif_Sport: 'Objectif_Sport',
    Seance_id: 'Seance_id',
    Utilisateur_id: 'Utilisateur_id'
  };

  export type SportScalarFieldEnum = (typeof SportScalarFieldEnum)[keyof typeof SportScalarFieldEnum]


  export const UtilisateurScalarFieldEnum: {
    Utilisateur_id: 'Utilisateur_id',
    Prenom: 'Prenom',
    Nom: 'Nom',
    Email: 'Email',
    Mot_Passe: 'Mot_Passe',
    Date_Naissance: 'Date_Naissance',
    Date_Creation_Inscription: 'Date_Creation_Inscription',
    Sexe: 'Sexe',
    Poids: 'Poids',
    Taille: 'Taille',
    Niveau_Sport: 'Niveau_Sport',
    Regime_Alimentaire: 'Regime_Alimentaire',
    Objectif_Sante_id: 'Objectif_Sante_id',
    Objectif_Sport_id: 'Objectif_Sport_id',
    Objectif_Alimentaire_id: 'Objectif_Alimentaire_id'
  };

  export type UtilisateurScalarFieldEnum = (typeof UtilisateurScalarFieldEnum)[keyof typeof UtilisateurScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AlimentWhereInput = {
    AND?: AlimentWhereInput | AlimentWhereInput[]
    OR?: AlimentWhereInput[]
    NOT?: AlimentWhereInput | AlimentWhereInput[]
    Aliment_id?: IntFilter<"Aliment"> | number
    Repas_id?: IntFilter<"Aliment"> | number
    Aliment_Type?: StringFilter<"Aliment"> | string
    Repas_Aliment_Repas_idToRepas?: XOR<RepasRelationFilter, RepasWhereInput>
    Aliments_indesirable?: Aliments_indesirableListRelationFilter
    Repas_Repas_Aliment_idToAliment?: RepasListRelationFilter
  }

  export type AlimentOrderByWithRelationInput = {
    Aliment_id?: SortOrder
    Repas_id?: SortOrder
    Aliment_Type?: SortOrder
    Repas_Aliment_Repas_idToRepas?: RepasOrderByWithRelationInput
    Aliments_indesirable?: Aliments_indesirableOrderByRelationAggregateInput
    Repas_Repas_Aliment_idToAliment?: RepasOrderByRelationAggregateInput
  }

  export type AlimentWhereUniqueInput = Prisma.AtLeast<{
    Aliment_id?: number
    AND?: AlimentWhereInput | AlimentWhereInput[]
    OR?: AlimentWhereInput[]
    NOT?: AlimentWhereInput | AlimentWhereInput[]
    Repas_id?: IntFilter<"Aliment"> | number
    Aliment_Type?: StringFilter<"Aliment"> | string
    Repas_Aliment_Repas_idToRepas?: XOR<RepasRelationFilter, RepasWhereInput>
    Aliments_indesirable?: Aliments_indesirableListRelationFilter
    Repas_Repas_Aliment_idToAliment?: RepasListRelationFilter
  }, "Aliment_id">

  export type AlimentOrderByWithAggregationInput = {
    Aliment_id?: SortOrder
    Repas_id?: SortOrder
    Aliment_Type?: SortOrder
    _count?: AlimentCountOrderByAggregateInput
    _avg?: AlimentAvgOrderByAggregateInput
    _max?: AlimentMaxOrderByAggregateInput
    _min?: AlimentMinOrderByAggregateInput
    _sum?: AlimentSumOrderByAggregateInput
  }

  export type AlimentScalarWhereWithAggregatesInput = {
    AND?: AlimentScalarWhereWithAggregatesInput | AlimentScalarWhereWithAggregatesInput[]
    OR?: AlimentScalarWhereWithAggregatesInput[]
    NOT?: AlimentScalarWhereWithAggregatesInput | AlimentScalarWhereWithAggregatesInput[]
    Aliment_id?: IntWithAggregatesFilter<"Aliment"> | number
    Repas_id?: IntWithAggregatesFilter<"Aliment"> | number
    Aliment_Type?: StringWithAggregatesFilter<"Aliment"> | string
  }

  export type AlimentationWhereInput = {
    AND?: AlimentationWhereInput | AlimentationWhereInput[]
    OR?: AlimentationWhereInput[]
    NOT?: AlimentationWhereInput | AlimentationWhereInput[]
    Alimentation_id?: IntFilter<"Alimentation"> | number
    Utilisateur_id?: IntFilter<"Alimentation"> | number
    Maintien_Calorique?: IntFilter<"Alimentation"> | number
    Objectif_Calorique?: IntFilter<"Alimentation"> | number
    Objectif_Proteines?: IntFilter<"Alimentation"> | number
    Objectif_Glucides?: IntFilter<"Alimentation"> | number
    Objectif_Lipides?: IntFilter<"Alimentation"> | number
    Utilisateur_Alimentation_Utilisateur_idToUtilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    Repas?: RepasListRelationFilter
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurListRelationFilter
  }

  export type AlimentationOrderByWithRelationInput = {
    Alimentation_id?: SortOrder
    Utilisateur_id?: SortOrder
    Maintien_Calorique?: SortOrder
    Objectif_Calorique?: SortOrder
    Objectif_Proteines?: SortOrder
    Objectif_Glucides?: SortOrder
    Objectif_Lipides?: SortOrder
    Utilisateur_Alimentation_Utilisateur_idToUtilisateur?: UtilisateurOrderByWithRelationInput
    Repas?: RepasOrderByRelationAggregateInput
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurOrderByRelationAggregateInput
  }

  export type AlimentationWhereUniqueInput = Prisma.AtLeast<{
    Alimentation_id?: number
    AND?: AlimentationWhereInput | AlimentationWhereInput[]
    OR?: AlimentationWhereInput[]
    NOT?: AlimentationWhereInput | AlimentationWhereInput[]
    Utilisateur_id?: IntFilter<"Alimentation"> | number
    Maintien_Calorique?: IntFilter<"Alimentation"> | number
    Objectif_Calorique?: IntFilter<"Alimentation"> | number
    Objectif_Proteines?: IntFilter<"Alimentation"> | number
    Objectif_Glucides?: IntFilter<"Alimentation"> | number
    Objectif_Lipides?: IntFilter<"Alimentation"> | number
    Utilisateur_Alimentation_Utilisateur_idToUtilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    Repas?: RepasListRelationFilter
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurListRelationFilter
  }, "Alimentation_id">

  export type AlimentationOrderByWithAggregationInput = {
    Alimentation_id?: SortOrder
    Utilisateur_id?: SortOrder
    Maintien_Calorique?: SortOrder
    Objectif_Calorique?: SortOrder
    Objectif_Proteines?: SortOrder
    Objectif_Glucides?: SortOrder
    Objectif_Lipides?: SortOrder
    _count?: AlimentationCountOrderByAggregateInput
    _avg?: AlimentationAvgOrderByAggregateInput
    _max?: AlimentationMaxOrderByAggregateInput
    _min?: AlimentationMinOrderByAggregateInput
    _sum?: AlimentationSumOrderByAggregateInput
  }

  export type AlimentationScalarWhereWithAggregatesInput = {
    AND?: AlimentationScalarWhereWithAggregatesInput | AlimentationScalarWhereWithAggregatesInput[]
    OR?: AlimentationScalarWhereWithAggregatesInput[]
    NOT?: AlimentationScalarWhereWithAggregatesInput | AlimentationScalarWhereWithAggregatesInput[]
    Alimentation_id?: IntWithAggregatesFilter<"Alimentation"> | number
    Utilisateur_id?: IntWithAggregatesFilter<"Alimentation"> | number
    Maintien_Calorique?: IntWithAggregatesFilter<"Alimentation"> | number
    Objectif_Calorique?: IntWithAggregatesFilter<"Alimentation"> | number
    Objectif_Proteines?: IntWithAggregatesFilter<"Alimentation"> | number
    Objectif_Glucides?: IntWithAggregatesFilter<"Alimentation"> | number
    Objectif_Lipides?: IntWithAggregatesFilter<"Alimentation"> | number
  }

  export type Aliments_indesirableWhereInput = {
    AND?: Aliments_indesirableWhereInput | Aliments_indesirableWhereInput[]
    OR?: Aliments_indesirableWhereInput[]
    NOT?: Aliments_indesirableWhereInput | Aliments_indesirableWhereInput[]
    Aliments_indesirable_id?: IntFilter<"Aliments_indesirable"> | number
    Aliment_id?: IntFilter<"Aliments_indesirable"> | number
    Aliment?: XOR<AlimentRelationFilter, AlimentWhereInput>
  }

  export type Aliments_indesirableOrderByWithRelationInput = {
    Aliments_indesirable_id?: SortOrder
    Aliment_id?: SortOrder
    Aliment?: AlimentOrderByWithRelationInput
  }

  export type Aliments_indesirableWhereUniqueInput = Prisma.AtLeast<{
    Aliments_indesirable_id?: number
    AND?: Aliments_indesirableWhereInput | Aliments_indesirableWhereInput[]
    OR?: Aliments_indesirableWhereInput[]
    NOT?: Aliments_indesirableWhereInput | Aliments_indesirableWhereInput[]
    Aliment_id?: IntFilter<"Aliments_indesirable"> | number
    Aliment?: XOR<AlimentRelationFilter, AlimentWhereInput>
  }, "Aliments_indesirable_id">

  export type Aliments_indesirableOrderByWithAggregationInput = {
    Aliments_indesirable_id?: SortOrder
    Aliment_id?: SortOrder
    _count?: Aliments_indesirableCountOrderByAggregateInput
    _avg?: Aliments_indesirableAvgOrderByAggregateInput
    _max?: Aliments_indesirableMaxOrderByAggregateInput
    _min?: Aliments_indesirableMinOrderByAggregateInput
    _sum?: Aliments_indesirableSumOrderByAggregateInput
  }

  export type Aliments_indesirableScalarWhereWithAggregatesInput = {
    AND?: Aliments_indesirableScalarWhereWithAggregatesInput | Aliments_indesirableScalarWhereWithAggregatesInput[]
    OR?: Aliments_indesirableScalarWhereWithAggregatesInput[]
    NOT?: Aliments_indesirableScalarWhereWithAggregatesInput | Aliments_indesirableScalarWhereWithAggregatesInput[]
    Aliments_indesirable_id?: IntWithAggregatesFilter<"Aliments_indesirable"> | number
    Aliment_id?: IntWithAggregatesFilter<"Aliments_indesirable"> | number
  }

  export type ExercicesWhereInput = {
    AND?: ExercicesWhereInput | ExercicesWhereInput[]
    OR?: ExercicesWhereInput[]
    NOT?: ExercicesWhereInput | ExercicesWhereInput[]
    Exercice_id?: IntFilter<"Exercices"> | number
    Exercice_nom?: StringFilter<"Exercices"> | string
    Exercice_type?: StringFilter<"Exercices"> | string
    Temps_repos?: IntFilter<"Exercices"> | number
    Repetitions_Serie1?: IntFilter<"Exercices"> | number
    Repetitions_Serie2?: IntFilter<"Exercices"> | number
    Repetitions_Serie3?: IntFilter<"Exercices"> | number
    Repetitions_Serie4?: IntFilter<"Exercices"> | number
    Exercice_Description?: StringFilter<"Exercices"> | string
    Historique_Sport?: Historique_SportListRelationFilter
    Seances_Seances_Exercice1_idToExercices?: SeancesListRelationFilter
    Seances_Seances_Exercice2_idToExercices?: SeancesListRelationFilter
    Seances_Seances_Exercice3_idToExercices?: SeancesListRelationFilter
    Seances_Seances_Exercice4_idToExercices?: SeancesListRelationFilter
  }

  export type ExercicesOrderByWithRelationInput = {
    Exercice_id?: SortOrder
    Exercice_nom?: SortOrder
    Exercice_type?: SortOrder
    Temps_repos?: SortOrder
    Repetitions_Serie1?: SortOrder
    Repetitions_Serie2?: SortOrder
    Repetitions_Serie3?: SortOrder
    Repetitions_Serie4?: SortOrder
    Exercice_Description?: SortOrder
    Historique_Sport?: Historique_SportOrderByRelationAggregateInput
    Seances_Seances_Exercice1_idToExercices?: SeancesOrderByRelationAggregateInput
    Seances_Seances_Exercice2_idToExercices?: SeancesOrderByRelationAggregateInput
    Seances_Seances_Exercice3_idToExercices?: SeancesOrderByRelationAggregateInput
    Seances_Seances_Exercice4_idToExercices?: SeancesOrderByRelationAggregateInput
  }

  export type ExercicesWhereUniqueInput = Prisma.AtLeast<{
    Exercice_id?: number
    AND?: ExercicesWhereInput | ExercicesWhereInput[]
    OR?: ExercicesWhereInput[]
    NOT?: ExercicesWhereInput | ExercicesWhereInput[]
    Exercice_nom?: StringFilter<"Exercices"> | string
    Exercice_type?: StringFilter<"Exercices"> | string
    Temps_repos?: IntFilter<"Exercices"> | number
    Repetitions_Serie1?: IntFilter<"Exercices"> | number
    Repetitions_Serie2?: IntFilter<"Exercices"> | number
    Repetitions_Serie3?: IntFilter<"Exercices"> | number
    Repetitions_Serie4?: IntFilter<"Exercices"> | number
    Exercice_Description?: StringFilter<"Exercices"> | string
    Historique_Sport?: Historique_SportListRelationFilter
    Seances_Seances_Exercice1_idToExercices?: SeancesListRelationFilter
    Seances_Seances_Exercice2_idToExercices?: SeancesListRelationFilter
    Seances_Seances_Exercice3_idToExercices?: SeancesListRelationFilter
    Seances_Seances_Exercice4_idToExercices?: SeancesListRelationFilter
  }, "Exercice_id">

  export type ExercicesOrderByWithAggregationInput = {
    Exercice_id?: SortOrder
    Exercice_nom?: SortOrder
    Exercice_type?: SortOrder
    Temps_repos?: SortOrder
    Repetitions_Serie1?: SortOrder
    Repetitions_Serie2?: SortOrder
    Repetitions_Serie3?: SortOrder
    Repetitions_Serie4?: SortOrder
    Exercice_Description?: SortOrder
    _count?: ExercicesCountOrderByAggregateInput
    _avg?: ExercicesAvgOrderByAggregateInput
    _max?: ExercicesMaxOrderByAggregateInput
    _min?: ExercicesMinOrderByAggregateInput
    _sum?: ExercicesSumOrderByAggregateInput
  }

  export type ExercicesScalarWhereWithAggregatesInput = {
    AND?: ExercicesScalarWhereWithAggregatesInput | ExercicesScalarWhereWithAggregatesInput[]
    OR?: ExercicesScalarWhereWithAggregatesInput[]
    NOT?: ExercicesScalarWhereWithAggregatesInput | ExercicesScalarWhereWithAggregatesInput[]
    Exercice_id?: IntWithAggregatesFilter<"Exercices"> | number
    Exercice_nom?: StringWithAggregatesFilter<"Exercices"> | string
    Exercice_type?: StringWithAggregatesFilter<"Exercices"> | string
    Temps_repos?: IntWithAggregatesFilter<"Exercices"> | number
    Repetitions_Serie1?: IntWithAggregatesFilter<"Exercices"> | number
    Repetitions_Serie2?: IntWithAggregatesFilter<"Exercices"> | number
    Repetitions_Serie3?: IntWithAggregatesFilter<"Exercices"> | number
    Repetitions_Serie4?: IntWithAggregatesFilter<"Exercices"> | number
    Exercice_Description?: StringWithAggregatesFilter<"Exercices"> | string
  }

  export type Historique_SanteWhereInput = {
    AND?: Historique_SanteWhereInput | Historique_SanteWhereInput[]
    OR?: Historique_SanteWhereInput[]
    NOT?: Historique_SanteWhereInput | Historique_SanteWhereInput[]
    Historique_Sante_id?: IntFilter<"Historique_Sante"> | number
    Objectif_Sante_id?: IntFilter<"Historique_Sante"> | number
    Poids?: IntFilter<"Historique_Sante"> | number
    Date?: DateTimeFilter<"Historique_Sante"> | Date | string
    Nombre_pas?: IntFilter<"Historique_Sante"> | number
    Sommeil?: IntFilter<"Historique_Sante"> | number
    Eau?: IntFilter<"Historique_Sante"> | number
    Objectif_Sante?: XOR<Objectif_SanteRelationFilter, Objectif_SanteWhereInput>
  }

  export type Historique_SanteOrderByWithRelationInput = {
    Historique_Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
    Poids?: SortOrder
    Date?: SortOrder
    Nombre_pas?: SortOrder
    Sommeil?: SortOrder
    Eau?: SortOrder
    Objectif_Sante?: Objectif_SanteOrderByWithRelationInput
  }

  export type Historique_SanteWhereUniqueInput = Prisma.AtLeast<{
    Historique_Sante_id?: number
    AND?: Historique_SanteWhereInput | Historique_SanteWhereInput[]
    OR?: Historique_SanteWhereInput[]
    NOT?: Historique_SanteWhereInput | Historique_SanteWhereInput[]
    Objectif_Sante_id?: IntFilter<"Historique_Sante"> | number
    Poids?: IntFilter<"Historique_Sante"> | number
    Date?: DateTimeFilter<"Historique_Sante"> | Date | string
    Nombre_pas?: IntFilter<"Historique_Sante"> | number
    Sommeil?: IntFilter<"Historique_Sante"> | number
    Eau?: IntFilter<"Historique_Sante"> | number
    Objectif_Sante?: XOR<Objectif_SanteRelationFilter, Objectif_SanteWhereInput>
  }, "Historique_Sante_id">

  export type Historique_SanteOrderByWithAggregationInput = {
    Historique_Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
    Poids?: SortOrder
    Date?: SortOrder
    Nombre_pas?: SortOrder
    Sommeil?: SortOrder
    Eau?: SortOrder
    _count?: Historique_SanteCountOrderByAggregateInput
    _avg?: Historique_SanteAvgOrderByAggregateInput
    _max?: Historique_SanteMaxOrderByAggregateInput
    _min?: Historique_SanteMinOrderByAggregateInput
    _sum?: Historique_SanteSumOrderByAggregateInput
  }

  export type Historique_SanteScalarWhereWithAggregatesInput = {
    AND?: Historique_SanteScalarWhereWithAggregatesInput | Historique_SanteScalarWhereWithAggregatesInput[]
    OR?: Historique_SanteScalarWhereWithAggregatesInput[]
    NOT?: Historique_SanteScalarWhereWithAggregatesInput | Historique_SanteScalarWhereWithAggregatesInput[]
    Historique_Sante_id?: IntWithAggregatesFilter<"Historique_Sante"> | number
    Objectif_Sante_id?: IntWithAggregatesFilter<"Historique_Sante"> | number
    Poids?: IntWithAggregatesFilter<"Historique_Sante"> | number
    Date?: DateTimeWithAggregatesFilter<"Historique_Sante"> | Date | string
    Nombre_pas?: IntWithAggregatesFilter<"Historique_Sante"> | number
    Sommeil?: IntWithAggregatesFilter<"Historique_Sante"> | number
    Eau?: IntWithAggregatesFilter<"Historique_Sante"> | number
  }

  export type Historique_SportWhereInput = {
    AND?: Historique_SportWhereInput | Historique_SportWhereInput[]
    OR?: Historique_SportWhereInput[]
    NOT?: Historique_SportWhereInput | Historique_SportWhereInput[]
    Historique_id?: IntFilter<"Historique_Sport"> | number
    Utilisateur_id?: IntFilter<"Historique_Sport"> | number
    Exercice_id?: IntFilter<"Historique_Sport"> | number
    Date?: DateTimeFilter<"Historique_Sport"> | Date | string
    Poids_Serie1?: IntFilter<"Historique_Sport"> | number
    Poids_Serie2?: IntFilter<"Historique_Sport"> | number
    Poids_Serie3?: IntFilter<"Historique_Sport"> | number
    Poids_serie4?: IntFilter<"Historique_Sport"> | number
    Repetitions?: IntFilter<"Historique_Sport"> | number
    Note?: StringFilter<"Historique_Sport"> | string
    Serie?: IntFilter<"Historique_Sport"> | number
    Utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    Exercices?: XOR<ExercicesRelationFilter, ExercicesWhereInput>
  }

  export type Historique_SportOrderByWithRelationInput = {
    Historique_id?: SortOrder
    Utilisateur_id?: SortOrder
    Exercice_id?: SortOrder
    Date?: SortOrder
    Poids_Serie1?: SortOrder
    Poids_Serie2?: SortOrder
    Poids_Serie3?: SortOrder
    Poids_serie4?: SortOrder
    Repetitions?: SortOrder
    Note?: SortOrder
    Serie?: SortOrder
    Utilisateur?: UtilisateurOrderByWithRelationInput
    Exercices?: ExercicesOrderByWithRelationInput
  }

  export type Historique_SportWhereUniqueInput = Prisma.AtLeast<{
    Historique_id?: number
    AND?: Historique_SportWhereInput | Historique_SportWhereInput[]
    OR?: Historique_SportWhereInput[]
    NOT?: Historique_SportWhereInput | Historique_SportWhereInput[]
    Utilisateur_id?: IntFilter<"Historique_Sport"> | number
    Exercice_id?: IntFilter<"Historique_Sport"> | number
    Date?: DateTimeFilter<"Historique_Sport"> | Date | string
    Poids_Serie1?: IntFilter<"Historique_Sport"> | number
    Poids_Serie2?: IntFilter<"Historique_Sport"> | number
    Poids_Serie3?: IntFilter<"Historique_Sport"> | number
    Poids_serie4?: IntFilter<"Historique_Sport"> | number
    Repetitions?: IntFilter<"Historique_Sport"> | number
    Note?: StringFilter<"Historique_Sport"> | string
    Serie?: IntFilter<"Historique_Sport"> | number
    Utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    Exercices?: XOR<ExercicesRelationFilter, ExercicesWhereInput>
  }, "Historique_id">

  export type Historique_SportOrderByWithAggregationInput = {
    Historique_id?: SortOrder
    Utilisateur_id?: SortOrder
    Exercice_id?: SortOrder
    Date?: SortOrder
    Poids_Serie1?: SortOrder
    Poids_Serie2?: SortOrder
    Poids_Serie3?: SortOrder
    Poids_serie4?: SortOrder
    Repetitions?: SortOrder
    Note?: SortOrder
    Serie?: SortOrder
    _count?: Historique_SportCountOrderByAggregateInput
    _avg?: Historique_SportAvgOrderByAggregateInput
    _max?: Historique_SportMaxOrderByAggregateInput
    _min?: Historique_SportMinOrderByAggregateInput
    _sum?: Historique_SportSumOrderByAggregateInput
  }

  export type Historique_SportScalarWhereWithAggregatesInput = {
    AND?: Historique_SportScalarWhereWithAggregatesInput | Historique_SportScalarWhereWithAggregatesInput[]
    OR?: Historique_SportScalarWhereWithAggregatesInput[]
    NOT?: Historique_SportScalarWhereWithAggregatesInput | Historique_SportScalarWhereWithAggregatesInput[]
    Historique_id?: IntWithAggregatesFilter<"Historique_Sport"> | number
    Utilisateur_id?: IntWithAggregatesFilter<"Historique_Sport"> | number
    Exercice_id?: IntWithAggregatesFilter<"Historique_Sport"> | number
    Date?: DateTimeWithAggregatesFilter<"Historique_Sport"> | Date | string
    Poids_Serie1?: IntWithAggregatesFilter<"Historique_Sport"> | number
    Poids_Serie2?: IntWithAggregatesFilter<"Historique_Sport"> | number
    Poids_Serie3?: IntWithAggregatesFilter<"Historique_Sport"> | number
    Poids_serie4?: IntWithAggregatesFilter<"Historique_Sport"> | number
    Repetitions?: IntWithAggregatesFilter<"Historique_Sport"> | number
    Note?: StringWithAggregatesFilter<"Historique_Sport"> | string
    Serie?: IntWithAggregatesFilter<"Historique_Sport"> | number
  }

  export type Objectif_SanteWhereInput = {
    AND?: Objectif_SanteWhereInput | Objectif_SanteWhereInput[]
    OR?: Objectif_SanteWhereInput[]
    NOT?: Objectif_SanteWhereInput | Objectif_SanteWhereInput[]
    Objectif_Sante_id?: IntFilter<"Objectif_Sante"> | number
    Objectif_Nombre_pas?: IntFilter<"Objectif_Sante"> | number
    Objectif_Poids?: IntFilter<"Objectif_Sante"> | number
    Objectif_Sommeil?: IntFilter<"Objectif_Sante"> | number
    Objectif_Eau?: IntFilter<"Objectif_Sante"> | number
    Historique_Sante?: Historique_SanteListRelationFilter
    Sante?: SanteListRelationFilter
  }

  export type Objectif_SanteOrderByWithRelationInput = {
    Objectif_Sante_id?: SortOrder
    Objectif_Nombre_pas?: SortOrder
    Objectif_Poids?: SortOrder
    Objectif_Sommeil?: SortOrder
    Objectif_Eau?: SortOrder
    Historique_Sante?: Historique_SanteOrderByRelationAggregateInput
    Sante?: SanteOrderByRelationAggregateInput
  }

  export type Objectif_SanteWhereUniqueInput = Prisma.AtLeast<{
    Objectif_Sante_id?: number
    AND?: Objectif_SanteWhereInput | Objectif_SanteWhereInput[]
    OR?: Objectif_SanteWhereInput[]
    NOT?: Objectif_SanteWhereInput | Objectif_SanteWhereInput[]
    Objectif_Nombre_pas?: IntFilter<"Objectif_Sante"> | number
    Objectif_Poids?: IntFilter<"Objectif_Sante"> | number
    Objectif_Sommeil?: IntFilter<"Objectif_Sante"> | number
    Objectif_Eau?: IntFilter<"Objectif_Sante"> | number
    Historique_Sante?: Historique_SanteListRelationFilter
    Sante?: SanteListRelationFilter
  }, "Objectif_Sante_id">

  export type Objectif_SanteOrderByWithAggregationInput = {
    Objectif_Sante_id?: SortOrder
    Objectif_Nombre_pas?: SortOrder
    Objectif_Poids?: SortOrder
    Objectif_Sommeil?: SortOrder
    Objectif_Eau?: SortOrder
    _count?: Objectif_SanteCountOrderByAggregateInput
    _avg?: Objectif_SanteAvgOrderByAggregateInput
    _max?: Objectif_SanteMaxOrderByAggregateInput
    _min?: Objectif_SanteMinOrderByAggregateInput
    _sum?: Objectif_SanteSumOrderByAggregateInput
  }

  export type Objectif_SanteScalarWhereWithAggregatesInput = {
    AND?: Objectif_SanteScalarWhereWithAggregatesInput | Objectif_SanteScalarWhereWithAggregatesInput[]
    OR?: Objectif_SanteScalarWhereWithAggregatesInput[]
    NOT?: Objectif_SanteScalarWhereWithAggregatesInput | Objectif_SanteScalarWhereWithAggregatesInput[]
    Objectif_Sante_id?: IntWithAggregatesFilter<"Objectif_Sante"> | number
    Objectif_Nombre_pas?: IntWithAggregatesFilter<"Objectif_Sante"> | number
    Objectif_Poids?: IntWithAggregatesFilter<"Objectif_Sante"> | number
    Objectif_Sommeil?: IntWithAggregatesFilter<"Objectif_Sante"> | number
    Objectif_Eau?: IntWithAggregatesFilter<"Objectif_Sante"> | number
  }

  export type RepasWhereInput = {
    AND?: RepasWhereInput | RepasWhereInput[]
    OR?: RepasWhereInput[]
    NOT?: RepasWhereInput | RepasWhereInput[]
    Repas_id?: IntFilter<"Repas"> | number
    Alimentation_id?: IntFilter<"Repas"> | number
    Aliment_id?: IntFilter<"Repas"> | number
    Quantite?: IntFilter<"Repas"> | number
    Glucides?: IntFilter<"Repas"> | number
    Calories?: IntFilter<"Repas"> | number
    Lipides?: IntFilter<"Repas"> | number
    Proteines?: IntFilter<"Repas"> | number
    Description?: StringFilter<"Repas"> | string
    Duree?: DateTimeFilter<"Repas"> | Date | string
    Image?: StringFilter<"Repas"> | string
    Difficulte?: StringFilter<"Repas"> | string
    Saison?: StringFilter<"Repas"> | string
    Aliment_Aliment_Repas_idToRepas?: AlimentListRelationFilter
    Aliment_Repas_Aliment_idToAliment?: XOR<AlimentRelationFilter, AlimentWhereInput>
    Alimentation?: XOR<AlimentationRelationFilter, AlimentationWhereInput>
  }

  export type RepasOrderByWithRelationInput = {
    Repas_id?: SortOrder
    Alimentation_id?: SortOrder
    Aliment_id?: SortOrder
    Quantite?: SortOrder
    Glucides?: SortOrder
    Calories?: SortOrder
    Lipides?: SortOrder
    Proteines?: SortOrder
    Description?: SortOrder
    Duree?: SortOrder
    Image?: SortOrder
    Difficulte?: SortOrder
    Saison?: SortOrder
    Aliment_Aliment_Repas_idToRepas?: AlimentOrderByRelationAggregateInput
    Aliment_Repas_Aliment_idToAliment?: AlimentOrderByWithRelationInput
    Alimentation?: AlimentationOrderByWithRelationInput
  }

  export type RepasWhereUniqueInput = Prisma.AtLeast<{
    Repas_id?: number
    AND?: RepasWhereInput | RepasWhereInput[]
    OR?: RepasWhereInput[]
    NOT?: RepasWhereInput | RepasWhereInput[]
    Alimentation_id?: IntFilter<"Repas"> | number
    Aliment_id?: IntFilter<"Repas"> | number
    Quantite?: IntFilter<"Repas"> | number
    Glucides?: IntFilter<"Repas"> | number
    Calories?: IntFilter<"Repas"> | number
    Lipides?: IntFilter<"Repas"> | number
    Proteines?: IntFilter<"Repas"> | number
    Description?: StringFilter<"Repas"> | string
    Duree?: DateTimeFilter<"Repas"> | Date | string
    Image?: StringFilter<"Repas"> | string
    Difficulte?: StringFilter<"Repas"> | string
    Saison?: StringFilter<"Repas"> | string
    Aliment_Aliment_Repas_idToRepas?: AlimentListRelationFilter
    Aliment_Repas_Aliment_idToAliment?: XOR<AlimentRelationFilter, AlimentWhereInput>
    Alimentation?: XOR<AlimentationRelationFilter, AlimentationWhereInput>
  }, "Repas_id">

  export type RepasOrderByWithAggregationInput = {
    Repas_id?: SortOrder
    Alimentation_id?: SortOrder
    Aliment_id?: SortOrder
    Quantite?: SortOrder
    Glucides?: SortOrder
    Calories?: SortOrder
    Lipides?: SortOrder
    Proteines?: SortOrder
    Description?: SortOrder
    Duree?: SortOrder
    Image?: SortOrder
    Difficulte?: SortOrder
    Saison?: SortOrder
    _count?: RepasCountOrderByAggregateInput
    _avg?: RepasAvgOrderByAggregateInput
    _max?: RepasMaxOrderByAggregateInput
    _min?: RepasMinOrderByAggregateInput
    _sum?: RepasSumOrderByAggregateInput
  }

  export type RepasScalarWhereWithAggregatesInput = {
    AND?: RepasScalarWhereWithAggregatesInput | RepasScalarWhereWithAggregatesInput[]
    OR?: RepasScalarWhereWithAggregatesInput[]
    NOT?: RepasScalarWhereWithAggregatesInput | RepasScalarWhereWithAggregatesInput[]
    Repas_id?: IntWithAggregatesFilter<"Repas"> | number
    Alimentation_id?: IntWithAggregatesFilter<"Repas"> | number
    Aliment_id?: IntWithAggregatesFilter<"Repas"> | number
    Quantite?: IntWithAggregatesFilter<"Repas"> | number
    Glucides?: IntWithAggregatesFilter<"Repas"> | number
    Calories?: IntWithAggregatesFilter<"Repas"> | number
    Lipides?: IntWithAggregatesFilter<"Repas"> | number
    Proteines?: IntWithAggregatesFilter<"Repas"> | number
    Description?: StringWithAggregatesFilter<"Repas"> | string
    Duree?: DateTimeWithAggregatesFilter<"Repas"> | Date | string
    Image?: StringWithAggregatesFilter<"Repas"> | string
    Difficulte?: StringWithAggregatesFilter<"Repas"> | string
    Saison?: StringWithAggregatesFilter<"Repas"> | string
  }

  export type SanteWhereInput = {
    AND?: SanteWhereInput | SanteWhereInput[]
    OR?: SanteWhereInput[]
    NOT?: SanteWhereInput | SanteWhereInput[]
    Sante_id?: IntFilter<"Sante"> | number
    Objectif_Sante_id?: IntFilter<"Sante"> | number
    Objectif_Sante?: XOR<Objectif_SanteRelationFilter, Objectif_SanteWhereInput>
    Utilisateur?: UtilisateurListRelationFilter
  }

  export type SanteOrderByWithRelationInput = {
    Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
    Objectif_Sante?: Objectif_SanteOrderByWithRelationInput
    Utilisateur?: UtilisateurOrderByRelationAggregateInput
  }

  export type SanteWhereUniqueInput = Prisma.AtLeast<{
    Sante_id?: number
    AND?: SanteWhereInput | SanteWhereInput[]
    OR?: SanteWhereInput[]
    NOT?: SanteWhereInput | SanteWhereInput[]
    Objectif_Sante_id?: IntFilter<"Sante"> | number
    Objectif_Sante?: XOR<Objectif_SanteRelationFilter, Objectif_SanteWhereInput>
    Utilisateur?: UtilisateurListRelationFilter
  }, "Sante_id">

  export type SanteOrderByWithAggregationInput = {
    Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
    _count?: SanteCountOrderByAggregateInput
    _avg?: SanteAvgOrderByAggregateInput
    _max?: SanteMaxOrderByAggregateInput
    _min?: SanteMinOrderByAggregateInput
    _sum?: SanteSumOrderByAggregateInput
  }

  export type SanteScalarWhereWithAggregatesInput = {
    AND?: SanteScalarWhereWithAggregatesInput | SanteScalarWhereWithAggregatesInput[]
    OR?: SanteScalarWhereWithAggregatesInput[]
    NOT?: SanteScalarWhereWithAggregatesInput | SanteScalarWhereWithAggregatesInput[]
    Sante_id?: IntWithAggregatesFilter<"Sante"> | number
    Objectif_Sante_id?: IntWithAggregatesFilter<"Sante"> | number
  }

  export type SeancesWhereInput = {
    AND?: SeancesWhereInput | SeancesWhereInput[]
    OR?: SeancesWhereInput[]
    NOT?: SeancesWhereInput | SeancesWhereInput[]
    Seance_id?: IntFilter<"Seances"> | number
    Exercice1_id?: IntFilter<"Seances"> | number
    Exercice2_id?: IntFilter<"Seances"> | number
    Exercice3_id?: IntFilter<"Seances"> | number
    Exercice4_id?: IntFilter<"Seances"> | number
    Nombre_Points_Seance?: IntFilter<"Seances"> | number
    Commentaire?: StringFilter<"Seances"> | string
    Nom_Seances?: StringFilter<"Seances"> | string
    Exercices_Seances_Exercice1_idToExercices?: XOR<ExercicesRelationFilter, ExercicesWhereInput>
    Exercices_Seances_Exercice2_idToExercices?: XOR<ExercicesRelationFilter, ExercicesWhereInput>
    Exercices_Seances_Exercice3_idToExercices?: XOR<ExercicesRelationFilter, ExercicesWhereInput>
    Exercices_Seances_Exercice4_idToExercices?: XOR<ExercicesRelationFilter, ExercicesWhereInput>
    Sport?: SportListRelationFilter
  }

  export type SeancesOrderByWithRelationInput = {
    Seance_id?: SortOrder
    Exercice1_id?: SortOrder
    Exercice2_id?: SortOrder
    Exercice3_id?: SortOrder
    Exercice4_id?: SortOrder
    Nombre_Points_Seance?: SortOrder
    Commentaire?: SortOrder
    Nom_Seances?: SortOrder
    Exercices_Seances_Exercice1_idToExercices?: ExercicesOrderByWithRelationInput
    Exercices_Seances_Exercice2_idToExercices?: ExercicesOrderByWithRelationInput
    Exercices_Seances_Exercice3_idToExercices?: ExercicesOrderByWithRelationInput
    Exercices_Seances_Exercice4_idToExercices?: ExercicesOrderByWithRelationInput
    Sport?: SportOrderByRelationAggregateInput
  }

  export type SeancesWhereUniqueInput = Prisma.AtLeast<{
    Seance_id?: number
    AND?: SeancesWhereInput | SeancesWhereInput[]
    OR?: SeancesWhereInput[]
    NOT?: SeancesWhereInput | SeancesWhereInput[]
    Exercice1_id?: IntFilter<"Seances"> | number
    Exercice2_id?: IntFilter<"Seances"> | number
    Exercice3_id?: IntFilter<"Seances"> | number
    Exercice4_id?: IntFilter<"Seances"> | number
    Nombre_Points_Seance?: IntFilter<"Seances"> | number
    Commentaire?: StringFilter<"Seances"> | string
    Nom_Seances?: StringFilter<"Seances"> | string
    Exercices_Seances_Exercice1_idToExercices?: XOR<ExercicesRelationFilter, ExercicesWhereInput>
    Exercices_Seances_Exercice2_idToExercices?: XOR<ExercicesRelationFilter, ExercicesWhereInput>
    Exercices_Seances_Exercice3_idToExercices?: XOR<ExercicesRelationFilter, ExercicesWhereInput>
    Exercices_Seances_Exercice4_idToExercices?: XOR<ExercicesRelationFilter, ExercicesWhereInput>
    Sport?: SportListRelationFilter
  }, "Seance_id">

  export type SeancesOrderByWithAggregationInput = {
    Seance_id?: SortOrder
    Exercice1_id?: SortOrder
    Exercice2_id?: SortOrder
    Exercice3_id?: SortOrder
    Exercice4_id?: SortOrder
    Nombre_Points_Seance?: SortOrder
    Commentaire?: SortOrder
    Nom_Seances?: SortOrder
    _count?: SeancesCountOrderByAggregateInput
    _avg?: SeancesAvgOrderByAggregateInput
    _max?: SeancesMaxOrderByAggregateInput
    _min?: SeancesMinOrderByAggregateInput
    _sum?: SeancesSumOrderByAggregateInput
  }

  export type SeancesScalarWhereWithAggregatesInput = {
    AND?: SeancesScalarWhereWithAggregatesInput | SeancesScalarWhereWithAggregatesInput[]
    OR?: SeancesScalarWhereWithAggregatesInput[]
    NOT?: SeancesScalarWhereWithAggregatesInput | SeancesScalarWhereWithAggregatesInput[]
    Seance_id?: IntWithAggregatesFilter<"Seances"> | number
    Exercice1_id?: IntWithAggregatesFilter<"Seances"> | number
    Exercice2_id?: IntWithAggregatesFilter<"Seances"> | number
    Exercice3_id?: IntWithAggregatesFilter<"Seances"> | number
    Exercice4_id?: IntWithAggregatesFilter<"Seances"> | number
    Nombre_Points_Seance?: IntWithAggregatesFilter<"Seances"> | number
    Commentaire?: StringWithAggregatesFilter<"Seances"> | string
    Nom_Seances?: StringWithAggregatesFilter<"Seances"> | string
  }

  export type SportWhereInput = {
    AND?: SportWhereInput | SportWhereInput[]
    OR?: SportWhereInput[]
    NOT?: SportWhereInput | SportWhereInput[]
    Sport_id?: IntFilter<"Sport"> | number
    Niveau_Sport?: StringFilter<"Sport"> | string
    Objectif_Sport?: IntFilter<"Sport"> | number
    Seance_id?: IntFilter<"Sport"> | number
    Utilisateur_id?: IntFilter<"Sport"> | number
    Seances?: XOR<SeancesRelationFilter, SeancesWhereInput>
    Utilisateur_Sport_Utilisateur_idToUtilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurListRelationFilter
  }

  export type SportOrderByWithRelationInput = {
    Sport_id?: SortOrder
    Niveau_Sport?: SortOrder
    Objectif_Sport?: SortOrder
    Seance_id?: SortOrder
    Utilisateur_id?: SortOrder
    Seances?: SeancesOrderByWithRelationInput
    Utilisateur_Sport_Utilisateur_idToUtilisateur?: UtilisateurOrderByWithRelationInput
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurOrderByRelationAggregateInput
  }

  export type SportWhereUniqueInput = Prisma.AtLeast<{
    Sport_id?: number
    AND?: SportWhereInput | SportWhereInput[]
    OR?: SportWhereInput[]
    NOT?: SportWhereInput | SportWhereInput[]
    Niveau_Sport?: StringFilter<"Sport"> | string
    Objectif_Sport?: IntFilter<"Sport"> | number
    Seance_id?: IntFilter<"Sport"> | number
    Utilisateur_id?: IntFilter<"Sport"> | number
    Seances?: XOR<SeancesRelationFilter, SeancesWhereInput>
    Utilisateur_Sport_Utilisateur_idToUtilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurListRelationFilter
  }, "Sport_id">

  export type SportOrderByWithAggregationInput = {
    Sport_id?: SortOrder
    Niveau_Sport?: SortOrder
    Objectif_Sport?: SortOrder
    Seance_id?: SortOrder
    Utilisateur_id?: SortOrder
    _count?: SportCountOrderByAggregateInput
    _avg?: SportAvgOrderByAggregateInput
    _max?: SportMaxOrderByAggregateInput
    _min?: SportMinOrderByAggregateInput
    _sum?: SportSumOrderByAggregateInput
  }

  export type SportScalarWhereWithAggregatesInput = {
    AND?: SportScalarWhereWithAggregatesInput | SportScalarWhereWithAggregatesInput[]
    OR?: SportScalarWhereWithAggregatesInput[]
    NOT?: SportScalarWhereWithAggregatesInput | SportScalarWhereWithAggregatesInput[]
    Sport_id?: IntWithAggregatesFilter<"Sport"> | number
    Niveau_Sport?: StringWithAggregatesFilter<"Sport"> | string
    Objectif_Sport?: IntWithAggregatesFilter<"Sport"> | number
    Seance_id?: IntWithAggregatesFilter<"Sport"> | number
    Utilisateur_id?: IntWithAggregatesFilter<"Sport"> | number
  }

  export type UtilisateurWhereInput = {
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    Utilisateur_id?: IntFilter<"Utilisateur"> | number
    Prenom?: StringFilter<"Utilisateur"> | string
    Nom?: StringFilter<"Utilisateur"> | string
    Email?: StringFilter<"Utilisateur"> | string
    Mot_Passe?: StringFilter<"Utilisateur"> | string
    Date_Naissance?: DateTimeFilter<"Utilisateur"> | Date | string
    Date_Creation_Inscription?: DateTimeFilter<"Utilisateur"> | Date | string
    Sexe?: StringFilter<"Utilisateur"> | string
    Poids?: IntFilter<"Utilisateur"> | number
    Taille?: IntFilter<"Utilisateur"> | number
    Niveau_Sport?: StringFilter<"Utilisateur"> | string
    Regime_Alimentaire?: StringFilter<"Utilisateur"> | string
    Objectif_Sante_id?: IntFilter<"Utilisateur"> | number
    Objectif_Sport_id?: IntFilter<"Utilisateur"> | number
    Objectif_Alimentaire_id?: IntFilter<"Utilisateur"> | number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationListRelationFilter
    Historique_Sport?: Historique_SportListRelationFilter
    Sport_Sport_Utilisateur_idToUtilisateur?: SportListRelationFilter
    Sante?: XOR<SanteRelationFilter, SanteWhereInput>
    Sport_Utilisateur_Objectif_Sport_idToSport?: XOR<SportRelationFilter, SportWhereInput>
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation?: XOR<AlimentationRelationFilter, AlimentationWhereInput>
  }

  export type UtilisateurOrderByWithRelationInput = {
    Utilisateur_id?: SortOrder
    Prenom?: SortOrder
    Nom?: SortOrder
    Email?: SortOrder
    Mot_Passe?: SortOrder
    Date_Naissance?: SortOrder
    Date_Creation_Inscription?: SortOrder
    Sexe?: SortOrder
    Poids?: SortOrder
    Taille?: SortOrder
    Niveau_Sport?: SortOrder
    Regime_Alimentaire?: SortOrder
    Objectif_Sante_id?: SortOrder
    Objectif_Sport_id?: SortOrder
    Objectif_Alimentaire_id?: SortOrder
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationOrderByRelationAggregateInput
    Historique_Sport?: Historique_SportOrderByRelationAggregateInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportOrderByRelationAggregateInput
    Sante?: SanteOrderByWithRelationInput
    Sport_Utilisateur_Objectif_Sport_idToSport?: SportOrderByWithRelationInput
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation?: AlimentationOrderByWithRelationInput
  }

  export type UtilisateurWhereUniqueInput = Prisma.AtLeast<{
    Utilisateur_id?: number
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    Prenom?: StringFilter<"Utilisateur"> | string
    Nom?: StringFilter<"Utilisateur"> | string
    Email?: StringFilter<"Utilisateur"> | string
    Mot_Passe?: StringFilter<"Utilisateur"> | string
    Date_Naissance?: DateTimeFilter<"Utilisateur"> | Date | string
    Date_Creation_Inscription?: DateTimeFilter<"Utilisateur"> | Date | string
    Sexe?: StringFilter<"Utilisateur"> | string
    Poids?: IntFilter<"Utilisateur"> | number
    Taille?: IntFilter<"Utilisateur"> | number
    Niveau_Sport?: StringFilter<"Utilisateur"> | string
    Regime_Alimentaire?: StringFilter<"Utilisateur"> | string
    Objectif_Sante_id?: IntFilter<"Utilisateur"> | number
    Objectif_Sport_id?: IntFilter<"Utilisateur"> | number
    Objectif_Alimentaire_id?: IntFilter<"Utilisateur"> | number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationListRelationFilter
    Historique_Sport?: Historique_SportListRelationFilter
    Sport_Sport_Utilisateur_idToUtilisateur?: SportListRelationFilter
    Sante?: XOR<SanteRelationFilter, SanteWhereInput>
    Sport_Utilisateur_Objectif_Sport_idToSport?: XOR<SportRelationFilter, SportWhereInput>
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation?: XOR<AlimentationRelationFilter, AlimentationWhereInput>
  }, "Utilisateur_id">

  export type UtilisateurOrderByWithAggregationInput = {
    Utilisateur_id?: SortOrder
    Prenom?: SortOrder
    Nom?: SortOrder
    Email?: SortOrder
    Mot_Passe?: SortOrder
    Date_Naissance?: SortOrder
    Date_Creation_Inscription?: SortOrder
    Sexe?: SortOrder
    Poids?: SortOrder
    Taille?: SortOrder
    Niveau_Sport?: SortOrder
    Regime_Alimentaire?: SortOrder
    Objectif_Sante_id?: SortOrder
    Objectif_Sport_id?: SortOrder
    Objectif_Alimentaire_id?: SortOrder
    _count?: UtilisateurCountOrderByAggregateInput
    _avg?: UtilisateurAvgOrderByAggregateInput
    _max?: UtilisateurMaxOrderByAggregateInput
    _min?: UtilisateurMinOrderByAggregateInput
    _sum?: UtilisateurSumOrderByAggregateInput
  }

  export type UtilisateurScalarWhereWithAggregatesInput = {
    AND?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    OR?: UtilisateurScalarWhereWithAggregatesInput[]
    NOT?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    Utilisateur_id?: IntWithAggregatesFilter<"Utilisateur"> | number
    Prenom?: StringWithAggregatesFilter<"Utilisateur"> | string
    Nom?: StringWithAggregatesFilter<"Utilisateur"> | string
    Email?: StringWithAggregatesFilter<"Utilisateur"> | string
    Mot_Passe?: StringWithAggregatesFilter<"Utilisateur"> | string
    Date_Naissance?: DateTimeWithAggregatesFilter<"Utilisateur"> | Date | string
    Date_Creation_Inscription?: DateTimeWithAggregatesFilter<"Utilisateur"> | Date | string
    Sexe?: StringWithAggregatesFilter<"Utilisateur"> | string
    Poids?: IntWithAggregatesFilter<"Utilisateur"> | number
    Taille?: IntWithAggregatesFilter<"Utilisateur"> | number
    Niveau_Sport?: StringWithAggregatesFilter<"Utilisateur"> | string
    Regime_Alimentaire?: StringWithAggregatesFilter<"Utilisateur"> | string
    Objectif_Sante_id?: IntWithAggregatesFilter<"Utilisateur"> | number
    Objectif_Sport_id?: IntWithAggregatesFilter<"Utilisateur"> | number
    Objectif_Alimentaire_id?: IntWithAggregatesFilter<"Utilisateur"> | number
  }

  export type AlimentCreateInput = {
    Aliment_Type: string
    Repas_Aliment_Repas_idToRepas: RepasCreateNestedOneWithoutAliment_Aliment_Repas_idToRepasInput
    Aliments_indesirable?: Aliments_indesirableCreateNestedManyWithoutAlimentInput
    Repas_Repas_Aliment_idToAliment?: RepasCreateNestedManyWithoutAliment_Repas_Aliment_idToAlimentInput
  }

  export type AlimentUncheckedCreateInput = {
    Aliment_id?: number
    Repas_id: number
    Aliment_Type: string
    Aliments_indesirable?: Aliments_indesirableUncheckedCreateNestedManyWithoutAlimentInput
    Repas_Repas_Aliment_idToAliment?: RepasUncheckedCreateNestedManyWithoutAliment_Repas_Aliment_idToAlimentInput
  }

  export type AlimentUpdateInput = {
    Aliment_Type?: StringFieldUpdateOperationsInput | string
    Repas_Aliment_Repas_idToRepas?: RepasUpdateOneRequiredWithoutAliment_Aliment_Repas_idToRepasNestedInput
    Aliments_indesirable?: Aliments_indesirableUpdateManyWithoutAlimentNestedInput
    Repas_Repas_Aliment_idToAliment?: RepasUpdateManyWithoutAliment_Repas_Aliment_idToAlimentNestedInput
  }

  export type AlimentUncheckedUpdateInput = {
    Aliment_id?: IntFieldUpdateOperationsInput | number
    Repas_id?: IntFieldUpdateOperationsInput | number
    Aliment_Type?: StringFieldUpdateOperationsInput | string
    Aliments_indesirable?: Aliments_indesirableUncheckedUpdateManyWithoutAlimentNestedInput
    Repas_Repas_Aliment_idToAliment?: RepasUncheckedUpdateManyWithoutAliment_Repas_Aliment_idToAlimentNestedInput
  }

  export type AlimentCreateManyInput = {
    Aliment_id?: number
    Repas_id: number
    Aliment_Type: string
  }

  export type AlimentUpdateManyMutationInput = {
    Aliment_Type?: StringFieldUpdateOperationsInput | string
  }

  export type AlimentUncheckedUpdateManyInput = {
    Aliment_id?: IntFieldUpdateOperationsInput | number
    Repas_id?: IntFieldUpdateOperationsInput | number
    Aliment_Type?: StringFieldUpdateOperationsInput | string
  }

  export type AlimentationCreateInput = {
    Maintien_Calorique: number
    Objectif_Calorique: number
    Objectif_Proteines: number
    Objectif_Glucides: number
    Objectif_Lipides: number
    Utilisateur_Alimentation_Utilisateur_idToUtilisateur: UtilisateurCreateNestedOneWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput
    Repas?: RepasCreateNestedManyWithoutAlimentationInput
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurCreateNestedManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
  }

  export type AlimentationUncheckedCreateInput = {
    Alimentation_id?: number
    Utilisateur_id: number
    Maintien_Calorique: number
    Objectif_Calorique: number
    Objectif_Proteines: number
    Objectif_Glucides: number
    Objectif_Lipides: number
    Repas?: RepasUncheckedCreateNestedManyWithoutAlimentationInput
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurUncheckedCreateNestedManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
  }

  export type AlimentationUpdateInput = {
    Maintien_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Proteines?: IntFieldUpdateOperationsInput | number
    Objectif_Glucides?: IntFieldUpdateOperationsInput | number
    Objectif_Lipides?: IntFieldUpdateOperationsInput | number
    Utilisateur_Alimentation_Utilisateur_idToUtilisateur?: UtilisateurUpdateOneRequiredWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Repas?: RepasUpdateManyWithoutAlimentationNestedInput
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurUpdateManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput
  }

  export type AlimentationUncheckedUpdateInput = {
    Alimentation_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Maintien_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Proteines?: IntFieldUpdateOperationsInput | number
    Objectif_Glucides?: IntFieldUpdateOperationsInput | number
    Objectif_Lipides?: IntFieldUpdateOperationsInput | number
    Repas?: RepasUncheckedUpdateManyWithoutAlimentationNestedInput
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurUncheckedUpdateManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput
  }

  export type AlimentationCreateManyInput = {
    Alimentation_id?: number
    Utilisateur_id: number
    Maintien_Calorique: number
    Objectif_Calorique: number
    Objectif_Proteines: number
    Objectif_Glucides: number
    Objectif_Lipides: number
  }

  export type AlimentationUpdateManyMutationInput = {
    Maintien_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Proteines?: IntFieldUpdateOperationsInput | number
    Objectif_Glucides?: IntFieldUpdateOperationsInput | number
    Objectif_Lipides?: IntFieldUpdateOperationsInput | number
  }

  export type AlimentationUncheckedUpdateManyInput = {
    Alimentation_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Maintien_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Proteines?: IntFieldUpdateOperationsInput | number
    Objectif_Glucides?: IntFieldUpdateOperationsInput | number
    Objectif_Lipides?: IntFieldUpdateOperationsInput | number
  }

  export type Aliments_indesirableCreateInput = {
    Aliment: AlimentCreateNestedOneWithoutAliments_indesirableInput
  }

  export type Aliments_indesirableUncheckedCreateInput = {
    Aliments_indesirable_id?: number
    Aliment_id: number
  }

  export type Aliments_indesirableUpdateInput = {
    Aliment?: AlimentUpdateOneRequiredWithoutAliments_indesirableNestedInput
  }

  export type Aliments_indesirableUncheckedUpdateInput = {
    Aliments_indesirable_id?: IntFieldUpdateOperationsInput | number
    Aliment_id?: IntFieldUpdateOperationsInput | number
  }

  export type Aliments_indesirableCreateManyInput = {
    Aliments_indesirable_id?: number
    Aliment_id: number
  }

  export type Aliments_indesirableUpdateManyMutationInput = {

  }

  export type Aliments_indesirableUncheckedUpdateManyInput = {
    Aliments_indesirable_id?: IntFieldUpdateOperationsInput | number
    Aliment_id?: IntFieldUpdateOperationsInput | number
  }

  export type ExercicesCreateInput = {
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
    Historique_Sport?: Historique_SportCreateNestedManyWithoutExercicesInput
    Seances_Seances_Exercice1_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice1_idToExercicesInput
    Seances_Seances_Exercice2_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice2_idToExercicesInput
    Seances_Seances_Exercice3_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice3_idToExercicesInput
    Seances_Seances_Exercice4_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice4_idToExercicesInput
  }

  export type ExercicesUncheckedCreateInput = {
    Exercice_id?: number
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
    Historique_Sport?: Historique_SportUncheckedCreateNestedManyWithoutExercicesInput
    Seances_Seances_Exercice1_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice1_idToExercicesInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice2_idToExercicesInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice3_idToExercicesInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice4_idToExercicesInput
  }

  export type ExercicesUpdateInput = {
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
    Historique_Sport?: Historique_SportUpdateManyWithoutExercicesNestedInput
    Seances_Seances_Exercice1_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesNestedInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesNestedInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesNestedInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesNestedInput
  }

  export type ExercicesUncheckedUpdateInput = {
    Exercice_id?: IntFieldUpdateOperationsInput | number
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
    Historique_Sport?: Historique_SportUncheckedUpdateManyWithoutExercicesNestedInput
    Seances_Seances_Exercice1_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesNestedInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesNestedInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesNestedInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesNestedInput
  }

  export type ExercicesCreateManyInput = {
    Exercice_id?: number
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
  }

  export type ExercicesUpdateManyMutationInput = {
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
  }

  export type ExercicesUncheckedUpdateManyInput = {
    Exercice_id?: IntFieldUpdateOperationsInput | number
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
  }

  export type Historique_SanteCreateInput = {
    Poids: number
    Date: Date | string
    Nombre_pas: number
    Sommeil: number
    Eau: number
    Objectif_Sante: Objectif_SanteCreateNestedOneWithoutHistorique_SanteInput
  }

  export type Historique_SanteUncheckedCreateInput = {
    Historique_Sante_id?: number
    Objectif_Sante_id: number
    Poids: number
    Date: Date | string
    Nombre_pas: number
    Sommeil: number
    Eau: number
  }

  export type Historique_SanteUpdateInput = {
    Poids?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Nombre_pas?: IntFieldUpdateOperationsInput | number
    Sommeil?: IntFieldUpdateOperationsInput | number
    Eau?: IntFieldUpdateOperationsInput | number
    Objectif_Sante?: Objectif_SanteUpdateOneRequiredWithoutHistorique_SanteNestedInput
  }

  export type Historique_SanteUncheckedUpdateInput = {
    Historique_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Poids?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Nombre_pas?: IntFieldUpdateOperationsInput | number
    Sommeil?: IntFieldUpdateOperationsInput | number
    Eau?: IntFieldUpdateOperationsInput | number
  }

  export type Historique_SanteCreateManyInput = {
    Historique_Sante_id?: number
    Objectif_Sante_id: number
    Poids: number
    Date: Date | string
    Nombre_pas: number
    Sommeil: number
    Eau: number
  }

  export type Historique_SanteUpdateManyMutationInput = {
    Poids?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Nombre_pas?: IntFieldUpdateOperationsInput | number
    Sommeil?: IntFieldUpdateOperationsInput | number
    Eau?: IntFieldUpdateOperationsInput | number
  }

  export type Historique_SanteUncheckedUpdateManyInput = {
    Historique_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Poids?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Nombre_pas?: IntFieldUpdateOperationsInput | number
    Sommeil?: IntFieldUpdateOperationsInput | number
    Eau?: IntFieldUpdateOperationsInput | number
  }

  export type Historique_SportCreateInput = {
    Date: Date | string
    Poids_Serie1: number
    Poids_Serie2: number
    Poids_Serie3: number
    Poids_serie4: number
    Repetitions: number
    Note: string
    Serie: number
    Utilisateur: UtilisateurCreateNestedOneWithoutHistorique_SportInput
    Exercices: ExercicesCreateNestedOneWithoutHistorique_SportInput
  }

  export type Historique_SportUncheckedCreateInput = {
    Historique_id?: number
    Utilisateur_id: number
    Exercice_id: number
    Date: Date | string
    Poids_Serie1: number
    Poids_Serie2: number
    Poids_Serie3: number
    Poids_serie4: number
    Repetitions: number
    Note: string
    Serie: number
  }

  export type Historique_SportUpdateInput = {
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Poids_Serie1?: IntFieldUpdateOperationsInput | number
    Poids_Serie2?: IntFieldUpdateOperationsInput | number
    Poids_Serie3?: IntFieldUpdateOperationsInput | number
    Poids_serie4?: IntFieldUpdateOperationsInput | number
    Repetitions?: IntFieldUpdateOperationsInput | number
    Note?: StringFieldUpdateOperationsInput | string
    Serie?: IntFieldUpdateOperationsInput | number
    Utilisateur?: UtilisateurUpdateOneRequiredWithoutHistorique_SportNestedInput
    Exercices?: ExercicesUpdateOneRequiredWithoutHistorique_SportNestedInput
  }

  export type Historique_SportUncheckedUpdateInput = {
    Historique_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Exercice_id?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Poids_Serie1?: IntFieldUpdateOperationsInput | number
    Poids_Serie2?: IntFieldUpdateOperationsInput | number
    Poids_Serie3?: IntFieldUpdateOperationsInput | number
    Poids_serie4?: IntFieldUpdateOperationsInput | number
    Repetitions?: IntFieldUpdateOperationsInput | number
    Note?: StringFieldUpdateOperationsInput | string
    Serie?: IntFieldUpdateOperationsInput | number
  }

  export type Historique_SportCreateManyInput = {
    Historique_id?: number
    Utilisateur_id: number
    Exercice_id: number
    Date: Date | string
    Poids_Serie1: number
    Poids_Serie2: number
    Poids_Serie3: number
    Poids_serie4: number
    Repetitions: number
    Note: string
    Serie: number
  }

  export type Historique_SportUpdateManyMutationInput = {
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Poids_Serie1?: IntFieldUpdateOperationsInput | number
    Poids_Serie2?: IntFieldUpdateOperationsInput | number
    Poids_Serie3?: IntFieldUpdateOperationsInput | number
    Poids_serie4?: IntFieldUpdateOperationsInput | number
    Repetitions?: IntFieldUpdateOperationsInput | number
    Note?: StringFieldUpdateOperationsInput | string
    Serie?: IntFieldUpdateOperationsInput | number
  }

  export type Historique_SportUncheckedUpdateManyInput = {
    Historique_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Exercice_id?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Poids_Serie1?: IntFieldUpdateOperationsInput | number
    Poids_Serie2?: IntFieldUpdateOperationsInput | number
    Poids_Serie3?: IntFieldUpdateOperationsInput | number
    Poids_serie4?: IntFieldUpdateOperationsInput | number
    Repetitions?: IntFieldUpdateOperationsInput | number
    Note?: StringFieldUpdateOperationsInput | string
    Serie?: IntFieldUpdateOperationsInput | number
  }

  export type Objectif_SanteCreateInput = {
    Objectif_Nombre_pas: number
    Objectif_Poids: number
    Objectif_Sommeil: number
    Objectif_Eau: number
    Historique_Sante?: Historique_SanteCreateNestedManyWithoutObjectif_SanteInput
    Sante?: SanteCreateNestedManyWithoutObjectif_SanteInput
  }

  export type Objectif_SanteUncheckedCreateInput = {
    Objectif_Sante_id?: number
    Objectif_Nombre_pas: number
    Objectif_Poids: number
    Objectif_Sommeil: number
    Objectif_Eau: number
    Historique_Sante?: Historique_SanteUncheckedCreateNestedManyWithoutObjectif_SanteInput
    Sante?: SanteUncheckedCreateNestedManyWithoutObjectif_SanteInput
  }

  export type Objectif_SanteUpdateInput = {
    Objectif_Nombre_pas?: IntFieldUpdateOperationsInput | number
    Objectif_Poids?: IntFieldUpdateOperationsInput | number
    Objectif_Sommeil?: IntFieldUpdateOperationsInput | number
    Objectif_Eau?: IntFieldUpdateOperationsInput | number
    Historique_Sante?: Historique_SanteUpdateManyWithoutObjectif_SanteNestedInput
    Sante?: SanteUpdateManyWithoutObjectif_SanteNestedInput
  }

  export type Objectif_SanteUncheckedUpdateInput = {
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Nombre_pas?: IntFieldUpdateOperationsInput | number
    Objectif_Poids?: IntFieldUpdateOperationsInput | number
    Objectif_Sommeil?: IntFieldUpdateOperationsInput | number
    Objectif_Eau?: IntFieldUpdateOperationsInput | number
    Historique_Sante?: Historique_SanteUncheckedUpdateManyWithoutObjectif_SanteNestedInput
    Sante?: SanteUncheckedUpdateManyWithoutObjectif_SanteNestedInput
  }

  export type Objectif_SanteCreateManyInput = {
    Objectif_Sante_id?: number
    Objectif_Nombre_pas: number
    Objectif_Poids: number
    Objectif_Sommeil: number
    Objectif_Eau: number
  }

  export type Objectif_SanteUpdateManyMutationInput = {
    Objectif_Nombre_pas?: IntFieldUpdateOperationsInput | number
    Objectif_Poids?: IntFieldUpdateOperationsInput | number
    Objectif_Sommeil?: IntFieldUpdateOperationsInput | number
    Objectif_Eau?: IntFieldUpdateOperationsInput | number
  }

  export type Objectif_SanteUncheckedUpdateManyInput = {
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Nombre_pas?: IntFieldUpdateOperationsInput | number
    Objectif_Poids?: IntFieldUpdateOperationsInput | number
    Objectif_Sommeil?: IntFieldUpdateOperationsInput | number
    Objectif_Eau?: IntFieldUpdateOperationsInput | number
  }

  export type RepasCreateInput = {
    Quantite: number
    Glucides: number
    Calories: number
    Lipides: number
    Proteines: number
    Description: string
    Duree: Date | string
    Image: string
    Difficulte: string
    Saison: string
    Aliment_Aliment_Repas_idToRepas?: AlimentCreateNestedManyWithoutRepas_Aliment_Repas_idToRepasInput
    Aliment_Repas_Aliment_idToAliment: AlimentCreateNestedOneWithoutRepas_Repas_Aliment_idToAlimentInput
    Alimentation: AlimentationCreateNestedOneWithoutRepasInput
  }

  export type RepasUncheckedCreateInput = {
    Repas_id?: number
    Alimentation_id: number
    Aliment_id: number
    Quantite: number
    Glucides: number
    Calories: number
    Lipides: number
    Proteines: number
    Description: string
    Duree: Date | string
    Image: string
    Difficulte: string
    Saison: string
    Aliment_Aliment_Repas_idToRepas?: AlimentUncheckedCreateNestedManyWithoutRepas_Aliment_Repas_idToRepasInput
  }

  export type RepasUpdateInput = {
    Quantite?: IntFieldUpdateOperationsInput | number
    Glucides?: IntFieldUpdateOperationsInput | number
    Calories?: IntFieldUpdateOperationsInput | number
    Lipides?: IntFieldUpdateOperationsInput | number
    Proteines?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
    Duree?: DateTimeFieldUpdateOperationsInput | Date | string
    Image?: StringFieldUpdateOperationsInput | string
    Difficulte?: StringFieldUpdateOperationsInput | string
    Saison?: StringFieldUpdateOperationsInput | string
    Aliment_Aliment_Repas_idToRepas?: AlimentUpdateManyWithoutRepas_Aliment_Repas_idToRepasNestedInput
    Aliment_Repas_Aliment_idToAliment?: AlimentUpdateOneRequiredWithoutRepas_Repas_Aliment_idToAlimentNestedInput
    Alimentation?: AlimentationUpdateOneRequiredWithoutRepasNestedInput
  }

  export type RepasUncheckedUpdateInput = {
    Repas_id?: IntFieldUpdateOperationsInput | number
    Alimentation_id?: IntFieldUpdateOperationsInput | number
    Aliment_id?: IntFieldUpdateOperationsInput | number
    Quantite?: IntFieldUpdateOperationsInput | number
    Glucides?: IntFieldUpdateOperationsInput | number
    Calories?: IntFieldUpdateOperationsInput | number
    Lipides?: IntFieldUpdateOperationsInput | number
    Proteines?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
    Duree?: DateTimeFieldUpdateOperationsInput | Date | string
    Image?: StringFieldUpdateOperationsInput | string
    Difficulte?: StringFieldUpdateOperationsInput | string
    Saison?: StringFieldUpdateOperationsInput | string
    Aliment_Aliment_Repas_idToRepas?: AlimentUncheckedUpdateManyWithoutRepas_Aliment_Repas_idToRepasNestedInput
  }

  export type RepasCreateManyInput = {
    Repas_id?: number
    Alimentation_id: number
    Aliment_id: number
    Quantite: number
    Glucides: number
    Calories: number
    Lipides: number
    Proteines: number
    Description: string
    Duree: Date | string
    Image: string
    Difficulte: string
    Saison: string
  }

  export type RepasUpdateManyMutationInput = {
    Quantite?: IntFieldUpdateOperationsInput | number
    Glucides?: IntFieldUpdateOperationsInput | number
    Calories?: IntFieldUpdateOperationsInput | number
    Lipides?: IntFieldUpdateOperationsInput | number
    Proteines?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
    Duree?: DateTimeFieldUpdateOperationsInput | Date | string
    Image?: StringFieldUpdateOperationsInput | string
    Difficulte?: StringFieldUpdateOperationsInput | string
    Saison?: StringFieldUpdateOperationsInput | string
  }

  export type RepasUncheckedUpdateManyInput = {
    Repas_id?: IntFieldUpdateOperationsInput | number
    Alimentation_id?: IntFieldUpdateOperationsInput | number
    Aliment_id?: IntFieldUpdateOperationsInput | number
    Quantite?: IntFieldUpdateOperationsInput | number
    Glucides?: IntFieldUpdateOperationsInput | number
    Calories?: IntFieldUpdateOperationsInput | number
    Lipides?: IntFieldUpdateOperationsInput | number
    Proteines?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
    Duree?: DateTimeFieldUpdateOperationsInput | Date | string
    Image?: StringFieldUpdateOperationsInput | string
    Difficulte?: StringFieldUpdateOperationsInput | string
    Saison?: StringFieldUpdateOperationsInput | string
  }

  export type SanteCreateInput = {
    Objectif_Sante: Objectif_SanteCreateNestedOneWithoutSanteInput
    Utilisateur?: UtilisateurCreateNestedManyWithoutSanteInput
  }

  export type SanteUncheckedCreateInput = {
    Sante_id?: number
    Objectif_Sante_id: number
    Utilisateur?: UtilisateurUncheckedCreateNestedManyWithoutSanteInput
  }

  export type SanteUpdateInput = {
    Objectif_Sante?: Objectif_SanteUpdateOneRequiredWithoutSanteNestedInput
    Utilisateur?: UtilisateurUpdateManyWithoutSanteNestedInput
  }

  export type SanteUncheckedUpdateInput = {
    Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Utilisateur?: UtilisateurUncheckedUpdateManyWithoutSanteNestedInput
  }

  export type SanteCreateManyInput = {
    Sante_id?: number
    Objectif_Sante_id: number
  }

  export type SanteUpdateManyMutationInput = {

  }

  export type SanteUncheckedUpdateManyInput = {
    Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
  }

  export type SeancesCreateInput = {
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
    Exercices_Seances_Exercice1_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice1_idToExercicesInput
    Exercices_Seances_Exercice2_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice2_idToExercicesInput
    Exercices_Seances_Exercice3_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice3_idToExercicesInput
    Exercices_Seances_Exercice4_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice4_idToExercicesInput
    Sport?: SportCreateNestedManyWithoutSeancesInput
  }

  export type SeancesUncheckedCreateInput = {
    Seance_id?: number
    Exercice1_id: number
    Exercice2_id: number
    Exercice3_id: number
    Exercice4_id: number
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
    Sport?: SportUncheckedCreateNestedManyWithoutSeancesInput
  }

  export type SeancesUpdateInput = {
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
    Exercices_Seances_Exercice1_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice1_idToExercicesNestedInput
    Exercices_Seances_Exercice2_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice2_idToExercicesNestedInput
    Exercices_Seances_Exercice3_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice3_idToExercicesNestedInput
    Exercices_Seances_Exercice4_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice4_idToExercicesNestedInput
    Sport?: SportUpdateManyWithoutSeancesNestedInput
  }

  export type SeancesUncheckedUpdateInput = {
    Seance_id?: IntFieldUpdateOperationsInput | number
    Exercice1_id?: IntFieldUpdateOperationsInput | number
    Exercice2_id?: IntFieldUpdateOperationsInput | number
    Exercice3_id?: IntFieldUpdateOperationsInput | number
    Exercice4_id?: IntFieldUpdateOperationsInput | number
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
    Sport?: SportUncheckedUpdateManyWithoutSeancesNestedInput
  }

  export type SeancesCreateManyInput = {
    Seance_id?: number
    Exercice1_id: number
    Exercice2_id: number
    Exercice3_id: number
    Exercice4_id: number
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
  }

  export type SeancesUpdateManyMutationInput = {
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
  }

  export type SeancesUncheckedUpdateManyInput = {
    Seance_id?: IntFieldUpdateOperationsInput | number
    Exercice1_id?: IntFieldUpdateOperationsInput | number
    Exercice2_id?: IntFieldUpdateOperationsInput | number
    Exercice3_id?: IntFieldUpdateOperationsInput | number
    Exercice4_id?: IntFieldUpdateOperationsInput | number
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
  }

  export type SportCreateInput = {
    Niveau_Sport: string
    Objectif_Sport: number
    Seances: SeancesCreateNestedOneWithoutSportInput
    Utilisateur_Sport_Utilisateur_idToUtilisateur: UtilisateurCreateNestedOneWithoutSport_Sport_Utilisateur_idToUtilisateurInput
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurCreateNestedManyWithoutSport_Utilisateur_Objectif_Sport_idToSportInput
  }

  export type SportUncheckedCreateInput = {
    Sport_id?: number
    Niveau_Sport: string
    Objectif_Sport: number
    Seance_id: number
    Utilisateur_id: number
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurUncheckedCreateNestedManyWithoutSport_Utilisateur_Objectif_Sport_idToSportInput
  }

  export type SportUpdateInput = {
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Objectif_Sport?: IntFieldUpdateOperationsInput | number
    Seances?: SeancesUpdateOneRequiredWithoutSportNestedInput
    Utilisateur_Sport_Utilisateur_idToUtilisateur?: UtilisateurUpdateOneRequiredWithoutSport_Sport_Utilisateur_idToUtilisateurNestedInput
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurUpdateManyWithoutSport_Utilisateur_Objectif_Sport_idToSportNestedInput
  }

  export type SportUncheckedUpdateInput = {
    Sport_id?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Objectif_Sport?: IntFieldUpdateOperationsInput | number
    Seance_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurUncheckedUpdateManyWithoutSport_Utilisateur_Objectif_Sport_idToSportNestedInput
  }

  export type SportCreateManyInput = {
    Sport_id?: number
    Niveau_Sport: string
    Objectif_Sport: number
    Seance_id: number
    Utilisateur_id: number
  }

  export type SportUpdateManyMutationInput = {
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Objectif_Sport?: IntFieldUpdateOperationsInput | number
  }

  export type SportUncheckedUpdateManyInput = {
    Sport_id?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Objectif_Sport?: IntFieldUpdateOperationsInput | number
    Seance_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
  }

  export type UtilisateurCreateInput = {
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput
    Historique_Sport?: Historique_SportCreateNestedManyWithoutUtilisateurInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput
    Sante: SanteCreateNestedOneWithoutUtilisateurInput
    Sport_Utilisateur_Objectif_Sport_idToSport: SportCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation: AlimentationCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
  }

  export type UtilisateurUncheckedCreateInput = {
    Utilisateur_id?: number
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Objectif_Sante_id: number
    Objectif_Sport_id: number
    Objectif_Alimentaire_id: number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUncheckedCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput
    Historique_Sport?: Historique_SportUncheckedCreateNestedManyWithoutUtilisateurInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUncheckedCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput
  }

  export type UtilisateurUpdateInput = {
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Historique_Sport?: Historique_SportUpdateManyWithoutUtilisateurNestedInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput
    Sante?: SanteUpdateOneRequiredWithoutUtilisateurNestedInput
    Sport_Utilisateur_Objectif_Sport_idToSport?: SportUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportNestedInput
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation?: AlimentationUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput
  }

  export type UtilisateurUncheckedUpdateInput = {
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Sport_id?: IntFieldUpdateOperationsInput | number
    Objectif_Alimentaire_id?: IntFieldUpdateOperationsInput | number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUncheckedUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Historique_Sport?: Historique_SportUncheckedUpdateManyWithoutUtilisateurNestedInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUncheckedUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput
  }

  export type UtilisateurCreateManyInput = {
    Utilisateur_id?: number
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Objectif_Sante_id: number
    Objectif_Sport_id: number
    Objectif_Alimentaire_id: number
  }

  export type UtilisateurUpdateManyMutationInput = {
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
  }

  export type UtilisateurUncheckedUpdateManyInput = {
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Sport_id?: IntFieldUpdateOperationsInput | number
    Objectif_Alimentaire_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RepasRelationFilter = {
    is?: RepasWhereInput
    isNot?: RepasWhereInput
  }

  export type Aliments_indesirableListRelationFilter = {
    every?: Aliments_indesirableWhereInput
    some?: Aliments_indesirableWhereInput
    none?: Aliments_indesirableWhereInput
  }

  export type RepasListRelationFilter = {
    every?: RepasWhereInput
    some?: RepasWhereInput
    none?: RepasWhereInput
  }

  export type Aliments_indesirableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RepasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlimentCountOrderByAggregateInput = {
    Aliment_id?: SortOrder
    Repas_id?: SortOrder
    Aliment_Type?: SortOrder
  }

  export type AlimentAvgOrderByAggregateInput = {
    Aliment_id?: SortOrder
    Repas_id?: SortOrder
  }

  export type AlimentMaxOrderByAggregateInput = {
    Aliment_id?: SortOrder
    Repas_id?: SortOrder
    Aliment_Type?: SortOrder
  }

  export type AlimentMinOrderByAggregateInput = {
    Aliment_id?: SortOrder
    Repas_id?: SortOrder
    Aliment_Type?: SortOrder
  }

  export type AlimentSumOrderByAggregateInput = {
    Aliment_id?: SortOrder
    Repas_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UtilisateurRelationFilter = {
    is?: UtilisateurWhereInput
    isNot?: UtilisateurWhereInput
  }

  export type UtilisateurListRelationFilter = {
    every?: UtilisateurWhereInput
    some?: UtilisateurWhereInput
    none?: UtilisateurWhereInput
  }

  export type UtilisateurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlimentationCountOrderByAggregateInput = {
    Alimentation_id?: SortOrder
    Utilisateur_id?: SortOrder
    Maintien_Calorique?: SortOrder
    Objectif_Calorique?: SortOrder
    Objectif_Proteines?: SortOrder
    Objectif_Glucides?: SortOrder
    Objectif_Lipides?: SortOrder
  }

  export type AlimentationAvgOrderByAggregateInput = {
    Alimentation_id?: SortOrder
    Utilisateur_id?: SortOrder
    Maintien_Calorique?: SortOrder
    Objectif_Calorique?: SortOrder
    Objectif_Proteines?: SortOrder
    Objectif_Glucides?: SortOrder
    Objectif_Lipides?: SortOrder
  }

  export type AlimentationMaxOrderByAggregateInput = {
    Alimentation_id?: SortOrder
    Utilisateur_id?: SortOrder
    Maintien_Calorique?: SortOrder
    Objectif_Calorique?: SortOrder
    Objectif_Proteines?: SortOrder
    Objectif_Glucides?: SortOrder
    Objectif_Lipides?: SortOrder
  }

  export type AlimentationMinOrderByAggregateInput = {
    Alimentation_id?: SortOrder
    Utilisateur_id?: SortOrder
    Maintien_Calorique?: SortOrder
    Objectif_Calorique?: SortOrder
    Objectif_Proteines?: SortOrder
    Objectif_Glucides?: SortOrder
    Objectif_Lipides?: SortOrder
  }

  export type AlimentationSumOrderByAggregateInput = {
    Alimentation_id?: SortOrder
    Utilisateur_id?: SortOrder
    Maintien_Calorique?: SortOrder
    Objectif_Calorique?: SortOrder
    Objectif_Proteines?: SortOrder
    Objectif_Glucides?: SortOrder
    Objectif_Lipides?: SortOrder
  }

  export type AlimentRelationFilter = {
    is?: AlimentWhereInput
    isNot?: AlimentWhereInput
  }

  export type Aliments_indesirableCountOrderByAggregateInput = {
    Aliments_indesirable_id?: SortOrder
    Aliment_id?: SortOrder
  }

  export type Aliments_indesirableAvgOrderByAggregateInput = {
    Aliments_indesirable_id?: SortOrder
    Aliment_id?: SortOrder
  }

  export type Aliments_indesirableMaxOrderByAggregateInput = {
    Aliments_indesirable_id?: SortOrder
    Aliment_id?: SortOrder
  }

  export type Aliments_indesirableMinOrderByAggregateInput = {
    Aliments_indesirable_id?: SortOrder
    Aliment_id?: SortOrder
  }

  export type Aliments_indesirableSumOrderByAggregateInput = {
    Aliments_indesirable_id?: SortOrder
    Aliment_id?: SortOrder
  }

  export type Historique_SportListRelationFilter = {
    every?: Historique_SportWhereInput
    some?: Historique_SportWhereInput
    none?: Historique_SportWhereInput
  }

  export type SeancesListRelationFilter = {
    every?: SeancesWhereInput
    some?: SeancesWhereInput
    none?: SeancesWhereInput
  }

  export type Historique_SportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeancesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExercicesCountOrderByAggregateInput = {
    Exercice_id?: SortOrder
    Exercice_nom?: SortOrder
    Exercice_type?: SortOrder
    Temps_repos?: SortOrder
    Repetitions_Serie1?: SortOrder
    Repetitions_Serie2?: SortOrder
    Repetitions_Serie3?: SortOrder
    Repetitions_Serie4?: SortOrder
    Exercice_Description?: SortOrder
  }

  export type ExercicesAvgOrderByAggregateInput = {
    Exercice_id?: SortOrder
    Temps_repos?: SortOrder
    Repetitions_Serie1?: SortOrder
    Repetitions_Serie2?: SortOrder
    Repetitions_Serie3?: SortOrder
    Repetitions_Serie4?: SortOrder
  }

  export type ExercicesMaxOrderByAggregateInput = {
    Exercice_id?: SortOrder
    Exercice_nom?: SortOrder
    Exercice_type?: SortOrder
    Temps_repos?: SortOrder
    Repetitions_Serie1?: SortOrder
    Repetitions_Serie2?: SortOrder
    Repetitions_Serie3?: SortOrder
    Repetitions_Serie4?: SortOrder
    Exercice_Description?: SortOrder
  }

  export type ExercicesMinOrderByAggregateInput = {
    Exercice_id?: SortOrder
    Exercice_nom?: SortOrder
    Exercice_type?: SortOrder
    Temps_repos?: SortOrder
    Repetitions_Serie1?: SortOrder
    Repetitions_Serie2?: SortOrder
    Repetitions_Serie3?: SortOrder
    Repetitions_Serie4?: SortOrder
    Exercice_Description?: SortOrder
  }

  export type ExercicesSumOrderByAggregateInput = {
    Exercice_id?: SortOrder
    Temps_repos?: SortOrder
    Repetitions_Serie1?: SortOrder
    Repetitions_Serie2?: SortOrder
    Repetitions_Serie3?: SortOrder
    Repetitions_Serie4?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type Objectif_SanteRelationFilter = {
    is?: Objectif_SanteWhereInput
    isNot?: Objectif_SanteWhereInput
  }

  export type Historique_SanteCountOrderByAggregateInput = {
    Historique_Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
    Poids?: SortOrder
    Date?: SortOrder
    Nombre_pas?: SortOrder
    Sommeil?: SortOrder
    Eau?: SortOrder
  }

  export type Historique_SanteAvgOrderByAggregateInput = {
    Historique_Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
    Poids?: SortOrder
    Nombre_pas?: SortOrder
    Sommeil?: SortOrder
    Eau?: SortOrder
  }

  export type Historique_SanteMaxOrderByAggregateInput = {
    Historique_Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
    Poids?: SortOrder
    Date?: SortOrder
    Nombre_pas?: SortOrder
    Sommeil?: SortOrder
    Eau?: SortOrder
  }

  export type Historique_SanteMinOrderByAggregateInput = {
    Historique_Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
    Poids?: SortOrder
    Date?: SortOrder
    Nombre_pas?: SortOrder
    Sommeil?: SortOrder
    Eau?: SortOrder
  }

  export type Historique_SanteSumOrderByAggregateInput = {
    Historique_Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
    Poids?: SortOrder
    Nombre_pas?: SortOrder
    Sommeil?: SortOrder
    Eau?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ExercicesRelationFilter = {
    is?: ExercicesWhereInput
    isNot?: ExercicesWhereInput
  }

  export type Historique_SportCountOrderByAggregateInput = {
    Historique_id?: SortOrder
    Utilisateur_id?: SortOrder
    Exercice_id?: SortOrder
    Date?: SortOrder
    Poids_Serie1?: SortOrder
    Poids_Serie2?: SortOrder
    Poids_Serie3?: SortOrder
    Poids_serie4?: SortOrder
    Repetitions?: SortOrder
    Note?: SortOrder
    Serie?: SortOrder
  }

  export type Historique_SportAvgOrderByAggregateInput = {
    Historique_id?: SortOrder
    Utilisateur_id?: SortOrder
    Exercice_id?: SortOrder
    Poids_Serie1?: SortOrder
    Poids_Serie2?: SortOrder
    Poids_Serie3?: SortOrder
    Poids_serie4?: SortOrder
    Repetitions?: SortOrder
    Serie?: SortOrder
  }

  export type Historique_SportMaxOrderByAggregateInput = {
    Historique_id?: SortOrder
    Utilisateur_id?: SortOrder
    Exercice_id?: SortOrder
    Date?: SortOrder
    Poids_Serie1?: SortOrder
    Poids_Serie2?: SortOrder
    Poids_Serie3?: SortOrder
    Poids_serie4?: SortOrder
    Repetitions?: SortOrder
    Note?: SortOrder
    Serie?: SortOrder
  }

  export type Historique_SportMinOrderByAggregateInput = {
    Historique_id?: SortOrder
    Utilisateur_id?: SortOrder
    Exercice_id?: SortOrder
    Date?: SortOrder
    Poids_Serie1?: SortOrder
    Poids_Serie2?: SortOrder
    Poids_Serie3?: SortOrder
    Poids_serie4?: SortOrder
    Repetitions?: SortOrder
    Note?: SortOrder
    Serie?: SortOrder
  }

  export type Historique_SportSumOrderByAggregateInput = {
    Historique_id?: SortOrder
    Utilisateur_id?: SortOrder
    Exercice_id?: SortOrder
    Poids_Serie1?: SortOrder
    Poids_Serie2?: SortOrder
    Poids_Serie3?: SortOrder
    Poids_serie4?: SortOrder
    Repetitions?: SortOrder
    Serie?: SortOrder
  }

  export type Historique_SanteListRelationFilter = {
    every?: Historique_SanteWhereInput
    some?: Historique_SanteWhereInput
    none?: Historique_SanteWhereInput
  }

  export type SanteListRelationFilter = {
    every?: SanteWhereInput
    some?: SanteWhereInput
    none?: SanteWhereInput
  }

  export type Historique_SanteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SanteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Objectif_SanteCountOrderByAggregateInput = {
    Objectif_Sante_id?: SortOrder
    Objectif_Nombre_pas?: SortOrder
    Objectif_Poids?: SortOrder
    Objectif_Sommeil?: SortOrder
    Objectif_Eau?: SortOrder
  }

  export type Objectif_SanteAvgOrderByAggregateInput = {
    Objectif_Sante_id?: SortOrder
    Objectif_Nombre_pas?: SortOrder
    Objectif_Poids?: SortOrder
    Objectif_Sommeil?: SortOrder
    Objectif_Eau?: SortOrder
  }

  export type Objectif_SanteMaxOrderByAggregateInput = {
    Objectif_Sante_id?: SortOrder
    Objectif_Nombre_pas?: SortOrder
    Objectif_Poids?: SortOrder
    Objectif_Sommeil?: SortOrder
    Objectif_Eau?: SortOrder
  }

  export type Objectif_SanteMinOrderByAggregateInput = {
    Objectif_Sante_id?: SortOrder
    Objectif_Nombre_pas?: SortOrder
    Objectif_Poids?: SortOrder
    Objectif_Sommeil?: SortOrder
    Objectif_Eau?: SortOrder
  }

  export type Objectif_SanteSumOrderByAggregateInput = {
    Objectif_Sante_id?: SortOrder
    Objectif_Nombre_pas?: SortOrder
    Objectif_Poids?: SortOrder
    Objectif_Sommeil?: SortOrder
    Objectif_Eau?: SortOrder
  }

  export type AlimentListRelationFilter = {
    every?: AlimentWhereInput
    some?: AlimentWhereInput
    none?: AlimentWhereInput
  }

  export type AlimentationRelationFilter = {
    is?: AlimentationWhereInput
    isNot?: AlimentationWhereInput
  }

  export type AlimentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RepasCountOrderByAggregateInput = {
    Repas_id?: SortOrder
    Alimentation_id?: SortOrder
    Aliment_id?: SortOrder
    Quantite?: SortOrder
    Glucides?: SortOrder
    Calories?: SortOrder
    Lipides?: SortOrder
    Proteines?: SortOrder
    Description?: SortOrder
    Duree?: SortOrder
    Image?: SortOrder
    Difficulte?: SortOrder
    Saison?: SortOrder
  }

  export type RepasAvgOrderByAggregateInput = {
    Repas_id?: SortOrder
    Alimentation_id?: SortOrder
    Aliment_id?: SortOrder
    Quantite?: SortOrder
    Glucides?: SortOrder
    Calories?: SortOrder
    Lipides?: SortOrder
    Proteines?: SortOrder
  }

  export type RepasMaxOrderByAggregateInput = {
    Repas_id?: SortOrder
    Alimentation_id?: SortOrder
    Aliment_id?: SortOrder
    Quantite?: SortOrder
    Glucides?: SortOrder
    Calories?: SortOrder
    Lipides?: SortOrder
    Proteines?: SortOrder
    Description?: SortOrder
    Duree?: SortOrder
    Image?: SortOrder
    Difficulte?: SortOrder
    Saison?: SortOrder
  }

  export type RepasMinOrderByAggregateInput = {
    Repas_id?: SortOrder
    Alimentation_id?: SortOrder
    Aliment_id?: SortOrder
    Quantite?: SortOrder
    Glucides?: SortOrder
    Calories?: SortOrder
    Lipides?: SortOrder
    Proteines?: SortOrder
    Description?: SortOrder
    Duree?: SortOrder
    Image?: SortOrder
    Difficulte?: SortOrder
    Saison?: SortOrder
  }

  export type RepasSumOrderByAggregateInput = {
    Repas_id?: SortOrder
    Alimentation_id?: SortOrder
    Aliment_id?: SortOrder
    Quantite?: SortOrder
    Glucides?: SortOrder
    Calories?: SortOrder
    Lipides?: SortOrder
    Proteines?: SortOrder
  }

  export type SanteCountOrderByAggregateInput = {
    Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
  }

  export type SanteAvgOrderByAggregateInput = {
    Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
  }

  export type SanteMaxOrderByAggregateInput = {
    Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
  }

  export type SanteMinOrderByAggregateInput = {
    Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
  }

  export type SanteSumOrderByAggregateInput = {
    Sante_id?: SortOrder
    Objectif_Sante_id?: SortOrder
  }

  export type SportListRelationFilter = {
    every?: SportWhereInput
    some?: SportWhereInput
    none?: SportWhereInput
  }

  export type SportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeancesCountOrderByAggregateInput = {
    Seance_id?: SortOrder
    Exercice1_id?: SortOrder
    Exercice2_id?: SortOrder
    Exercice3_id?: SortOrder
    Exercice4_id?: SortOrder
    Nombre_Points_Seance?: SortOrder
    Commentaire?: SortOrder
    Nom_Seances?: SortOrder
  }

  export type SeancesAvgOrderByAggregateInput = {
    Seance_id?: SortOrder
    Exercice1_id?: SortOrder
    Exercice2_id?: SortOrder
    Exercice3_id?: SortOrder
    Exercice4_id?: SortOrder
    Nombre_Points_Seance?: SortOrder
  }

  export type SeancesMaxOrderByAggregateInput = {
    Seance_id?: SortOrder
    Exercice1_id?: SortOrder
    Exercice2_id?: SortOrder
    Exercice3_id?: SortOrder
    Exercice4_id?: SortOrder
    Nombre_Points_Seance?: SortOrder
    Commentaire?: SortOrder
    Nom_Seances?: SortOrder
  }

  export type SeancesMinOrderByAggregateInput = {
    Seance_id?: SortOrder
    Exercice1_id?: SortOrder
    Exercice2_id?: SortOrder
    Exercice3_id?: SortOrder
    Exercice4_id?: SortOrder
    Nombre_Points_Seance?: SortOrder
    Commentaire?: SortOrder
    Nom_Seances?: SortOrder
  }

  export type SeancesSumOrderByAggregateInput = {
    Seance_id?: SortOrder
    Exercice1_id?: SortOrder
    Exercice2_id?: SortOrder
    Exercice3_id?: SortOrder
    Exercice4_id?: SortOrder
    Nombre_Points_Seance?: SortOrder
  }

  export type SeancesRelationFilter = {
    is?: SeancesWhereInput
    isNot?: SeancesWhereInput
  }

  export type SportCountOrderByAggregateInput = {
    Sport_id?: SortOrder
    Niveau_Sport?: SortOrder
    Objectif_Sport?: SortOrder
    Seance_id?: SortOrder
    Utilisateur_id?: SortOrder
  }

  export type SportAvgOrderByAggregateInput = {
    Sport_id?: SortOrder
    Objectif_Sport?: SortOrder
    Seance_id?: SortOrder
    Utilisateur_id?: SortOrder
  }

  export type SportMaxOrderByAggregateInput = {
    Sport_id?: SortOrder
    Niveau_Sport?: SortOrder
    Objectif_Sport?: SortOrder
    Seance_id?: SortOrder
    Utilisateur_id?: SortOrder
  }

  export type SportMinOrderByAggregateInput = {
    Sport_id?: SortOrder
    Niveau_Sport?: SortOrder
    Objectif_Sport?: SortOrder
    Seance_id?: SortOrder
    Utilisateur_id?: SortOrder
  }

  export type SportSumOrderByAggregateInput = {
    Sport_id?: SortOrder
    Objectif_Sport?: SortOrder
    Seance_id?: SortOrder
    Utilisateur_id?: SortOrder
  }

  export type AlimentationListRelationFilter = {
    every?: AlimentationWhereInput
    some?: AlimentationWhereInput
    none?: AlimentationWhereInput
  }

  export type SanteRelationFilter = {
    is?: SanteWhereInput
    isNot?: SanteWhereInput
  }

  export type SportRelationFilter = {
    is?: SportWhereInput
    isNot?: SportWhereInput
  }

  export type AlimentationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UtilisateurCountOrderByAggregateInput = {
    Utilisateur_id?: SortOrder
    Prenom?: SortOrder
    Nom?: SortOrder
    Email?: SortOrder
    Mot_Passe?: SortOrder
    Date_Naissance?: SortOrder
    Date_Creation_Inscription?: SortOrder
    Sexe?: SortOrder
    Poids?: SortOrder
    Taille?: SortOrder
    Niveau_Sport?: SortOrder
    Regime_Alimentaire?: SortOrder
    Objectif_Sante_id?: SortOrder
    Objectif_Sport_id?: SortOrder
    Objectif_Alimentaire_id?: SortOrder
  }

  export type UtilisateurAvgOrderByAggregateInput = {
    Utilisateur_id?: SortOrder
    Poids?: SortOrder
    Taille?: SortOrder
    Objectif_Sante_id?: SortOrder
    Objectif_Sport_id?: SortOrder
    Objectif_Alimentaire_id?: SortOrder
  }

  export type UtilisateurMaxOrderByAggregateInput = {
    Utilisateur_id?: SortOrder
    Prenom?: SortOrder
    Nom?: SortOrder
    Email?: SortOrder
    Mot_Passe?: SortOrder
    Date_Naissance?: SortOrder
    Date_Creation_Inscription?: SortOrder
    Sexe?: SortOrder
    Poids?: SortOrder
    Taille?: SortOrder
    Niveau_Sport?: SortOrder
    Regime_Alimentaire?: SortOrder
    Objectif_Sante_id?: SortOrder
    Objectif_Sport_id?: SortOrder
    Objectif_Alimentaire_id?: SortOrder
  }

  export type UtilisateurMinOrderByAggregateInput = {
    Utilisateur_id?: SortOrder
    Prenom?: SortOrder
    Nom?: SortOrder
    Email?: SortOrder
    Mot_Passe?: SortOrder
    Date_Naissance?: SortOrder
    Date_Creation_Inscription?: SortOrder
    Sexe?: SortOrder
    Poids?: SortOrder
    Taille?: SortOrder
    Niveau_Sport?: SortOrder
    Regime_Alimentaire?: SortOrder
    Objectif_Sante_id?: SortOrder
    Objectif_Sport_id?: SortOrder
    Objectif_Alimentaire_id?: SortOrder
  }

  export type UtilisateurSumOrderByAggregateInput = {
    Utilisateur_id?: SortOrder
    Poids?: SortOrder
    Taille?: SortOrder
    Objectif_Sante_id?: SortOrder
    Objectif_Sport_id?: SortOrder
    Objectif_Alimentaire_id?: SortOrder
  }

  export type RepasCreateNestedOneWithoutAliment_Aliment_Repas_idToRepasInput = {
    create?: XOR<RepasCreateWithoutAliment_Aliment_Repas_idToRepasInput, RepasUncheckedCreateWithoutAliment_Aliment_Repas_idToRepasInput>
    connectOrCreate?: RepasCreateOrConnectWithoutAliment_Aliment_Repas_idToRepasInput
    connect?: RepasWhereUniqueInput
  }

  export type Aliments_indesirableCreateNestedManyWithoutAlimentInput = {
    create?: XOR<Aliments_indesirableCreateWithoutAlimentInput, Aliments_indesirableUncheckedCreateWithoutAlimentInput> | Aliments_indesirableCreateWithoutAlimentInput[] | Aliments_indesirableUncheckedCreateWithoutAlimentInput[]
    connectOrCreate?: Aliments_indesirableCreateOrConnectWithoutAlimentInput | Aliments_indesirableCreateOrConnectWithoutAlimentInput[]
    createMany?: Aliments_indesirableCreateManyAlimentInputEnvelope
    connect?: Aliments_indesirableWhereUniqueInput | Aliments_indesirableWhereUniqueInput[]
  }

  export type RepasCreateNestedManyWithoutAliment_Repas_Aliment_idToAlimentInput = {
    create?: XOR<RepasCreateWithoutAliment_Repas_Aliment_idToAlimentInput, RepasUncheckedCreateWithoutAliment_Repas_Aliment_idToAlimentInput> | RepasCreateWithoutAliment_Repas_Aliment_idToAlimentInput[] | RepasUncheckedCreateWithoutAliment_Repas_Aliment_idToAlimentInput[]
    connectOrCreate?: RepasCreateOrConnectWithoutAliment_Repas_Aliment_idToAlimentInput | RepasCreateOrConnectWithoutAliment_Repas_Aliment_idToAlimentInput[]
    createMany?: RepasCreateManyAliment_Repas_Aliment_idToAlimentInputEnvelope
    connect?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
  }

  export type Aliments_indesirableUncheckedCreateNestedManyWithoutAlimentInput = {
    create?: XOR<Aliments_indesirableCreateWithoutAlimentInput, Aliments_indesirableUncheckedCreateWithoutAlimentInput> | Aliments_indesirableCreateWithoutAlimentInput[] | Aliments_indesirableUncheckedCreateWithoutAlimentInput[]
    connectOrCreate?: Aliments_indesirableCreateOrConnectWithoutAlimentInput | Aliments_indesirableCreateOrConnectWithoutAlimentInput[]
    createMany?: Aliments_indesirableCreateManyAlimentInputEnvelope
    connect?: Aliments_indesirableWhereUniqueInput | Aliments_indesirableWhereUniqueInput[]
  }

  export type RepasUncheckedCreateNestedManyWithoutAliment_Repas_Aliment_idToAlimentInput = {
    create?: XOR<RepasCreateWithoutAliment_Repas_Aliment_idToAlimentInput, RepasUncheckedCreateWithoutAliment_Repas_Aliment_idToAlimentInput> | RepasCreateWithoutAliment_Repas_Aliment_idToAlimentInput[] | RepasUncheckedCreateWithoutAliment_Repas_Aliment_idToAlimentInput[]
    connectOrCreate?: RepasCreateOrConnectWithoutAliment_Repas_Aliment_idToAlimentInput | RepasCreateOrConnectWithoutAliment_Repas_Aliment_idToAlimentInput[]
    createMany?: RepasCreateManyAliment_Repas_Aliment_idToAlimentInputEnvelope
    connect?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RepasUpdateOneRequiredWithoutAliment_Aliment_Repas_idToRepasNestedInput = {
    create?: XOR<RepasCreateWithoutAliment_Aliment_Repas_idToRepasInput, RepasUncheckedCreateWithoutAliment_Aliment_Repas_idToRepasInput>
    connectOrCreate?: RepasCreateOrConnectWithoutAliment_Aliment_Repas_idToRepasInput
    upsert?: RepasUpsertWithoutAliment_Aliment_Repas_idToRepasInput
    connect?: RepasWhereUniqueInput
    update?: XOR<XOR<RepasUpdateToOneWithWhereWithoutAliment_Aliment_Repas_idToRepasInput, RepasUpdateWithoutAliment_Aliment_Repas_idToRepasInput>, RepasUncheckedUpdateWithoutAliment_Aliment_Repas_idToRepasInput>
  }

  export type Aliments_indesirableUpdateManyWithoutAlimentNestedInput = {
    create?: XOR<Aliments_indesirableCreateWithoutAlimentInput, Aliments_indesirableUncheckedCreateWithoutAlimentInput> | Aliments_indesirableCreateWithoutAlimentInput[] | Aliments_indesirableUncheckedCreateWithoutAlimentInput[]
    connectOrCreate?: Aliments_indesirableCreateOrConnectWithoutAlimentInput | Aliments_indesirableCreateOrConnectWithoutAlimentInput[]
    upsert?: Aliments_indesirableUpsertWithWhereUniqueWithoutAlimentInput | Aliments_indesirableUpsertWithWhereUniqueWithoutAlimentInput[]
    createMany?: Aliments_indesirableCreateManyAlimentInputEnvelope
    set?: Aliments_indesirableWhereUniqueInput | Aliments_indesirableWhereUniqueInput[]
    disconnect?: Aliments_indesirableWhereUniqueInput | Aliments_indesirableWhereUniqueInput[]
    delete?: Aliments_indesirableWhereUniqueInput | Aliments_indesirableWhereUniqueInput[]
    connect?: Aliments_indesirableWhereUniqueInput | Aliments_indesirableWhereUniqueInput[]
    update?: Aliments_indesirableUpdateWithWhereUniqueWithoutAlimentInput | Aliments_indesirableUpdateWithWhereUniqueWithoutAlimentInput[]
    updateMany?: Aliments_indesirableUpdateManyWithWhereWithoutAlimentInput | Aliments_indesirableUpdateManyWithWhereWithoutAlimentInput[]
    deleteMany?: Aliments_indesirableScalarWhereInput | Aliments_indesirableScalarWhereInput[]
  }

  export type RepasUpdateManyWithoutAliment_Repas_Aliment_idToAlimentNestedInput = {
    create?: XOR<RepasCreateWithoutAliment_Repas_Aliment_idToAlimentInput, RepasUncheckedCreateWithoutAliment_Repas_Aliment_idToAlimentInput> | RepasCreateWithoutAliment_Repas_Aliment_idToAlimentInput[] | RepasUncheckedCreateWithoutAliment_Repas_Aliment_idToAlimentInput[]
    connectOrCreate?: RepasCreateOrConnectWithoutAliment_Repas_Aliment_idToAlimentInput | RepasCreateOrConnectWithoutAliment_Repas_Aliment_idToAlimentInput[]
    upsert?: RepasUpsertWithWhereUniqueWithoutAliment_Repas_Aliment_idToAlimentInput | RepasUpsertWithWhereUniqueWithoutAliment_Repas_Aliment_idToAlimentInput[]
    createMany?: RepasCreateManyAliment_Repas_Aliment_idToAlimentInputEnvelope
    set?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    disconnect?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    delete?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    connect?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    update?: RepasUpdateWithWhereUniqueWithoutAliment_Repas_Aliment_idToAlimentInput | RepasUpdateWithWhereUniqueWithoutAliment_Repas_Aliment_idToAlimentInput[]
    updateMany?: RepasUpdateManyWithWhereWithoutAliment_Repas_Aliment_idToAlimentInput | RepasUpdateManyWithWhereWithoutAliment_Repas_Aliment_idToAlimentInput[]
    deleteMany?: RepasScalarWhereInput | RepasScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Aliments_indesirableUncheckedUpdateManyWithoutAlimentNestedInput = {
    create?: XOR<Aliments_indesirableCreateWithoutAlimentInput, Aliments_indesirableUncheckedCreateWithoutAlimentInput> | Aliments_indesirableCreateWithoutAlimentInput[] | Aliments_indesirableUncheckedCreateWithoutAlimentInput[]
    connectOrCreate?: Aliments_indesirableCreateOrConnectWithoutAlimentInput | Aliments_indesirableCreateOrConnectWithoutAlimentInput[]
    upsert?: Aliments_indesirableUpsertWithWhereUniqueWithoutAlimentInput | Aliments_indesirableUpsertWithWhereUniqueWithoutAlimentInput[]
    createMany?: Aliments_indesirableCreateManyAlimentInputEnvelope
    set?: Aliments_indesirableWhereUniqueInput | Aliments_indesirableWhereUniqueInput[]
    disconnect?: Aliments_indesirableWhereUniqueInput | Aliments_indesirableWhereUniqueInput[]
    delete?: Aliments_indesirableWhereUniqueInput | Aliments_indesirableWhereUniqueInput[]
    connect?: Aliments_indesirableWhereUniqueInput | Aliments_indesirableWhereUniqueInput[]
    update?: Aliments_indesirableUpdateWithWhereUniqueWithoutAlimentInput | Aliments_indesirableUpdateWithWhereUniqueWithoutAlimentInput[]
    updateMany?: Aliments_indesirableUpdateManyWithWhereWithoutAlimentInput | Aliments_indesirableUpdateManyWithWhereWithoutAlimentInput[]
    deleteMany?: Aliments_indesirableScalarWhereInput | Aliments_indesirableScalarWhereInput[]
  }

  export type RepasUncheckedUpdateManyWithoutAliment_Repas_Aliment_idToAlimentNestedInput = {
    create?: XOR<RepasCreateWithoutAliment_Repas_Aliment_idToAlimentInput, RepasUncheckedCreateWithoutAliment_Repas_Aliment_idToAlimentInput> | RepasCreateWithoutAliment_Repas_Aliment_idToAlimentInput[] | RepasUncheckedCreateWithoutAliment_Repas_Aliment_idToAlimentInput[]
    connectOrCreate?: RepasCreateOrConnectWithoutAliment_Repas_Aliment_idToAlimentInput | RepasCreateOrConnectWithoutAliment_Repas_Aliment_idToAlimentInput[]
    upsert?: RepasUpsertWithWhereUniqueWithoutAliment_Repas_Aliment_idToAlimentInput | RepasUpsertWithWhereUniqueWithoutAliment_Repas_Aliment_idToAlimentInput[]
    createMany?: RepasCreateManyAliment_Repas_Aliment_idToAlimentInputEnvelope
    set?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    disconnect?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    delete?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    connect?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    update?: RepasUpdateWithWhereUniqueWithoutAliment_Repas_Aliment_idToAlimentInput | RepasUpdateWithWhereUniqueWithoutAliment_Repas_Aliment_idToAlimentInput[]
    updateMany?: RepasUpdateManyWithWhereWithoutAliment_Repas_Aliment_idToAlimentInput | RepasUpdateManyWithWhereWithoutAliment_Repas_Aliment_idToAlimentInput[]
    deleteMany?: RepasScalarWhereInput | RepasScalarWhereInput[]
  }

  export type UtilisateurCreateNestedOneWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput = {
    create?: XOR<UtilisateurCreateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput, UtilisateurUncheckedCreateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type RepasCreateNestedManyWithoutAlimentationInput = {
    create?: XOR<RepasCreateWithoutAlimentationInput, RepasUncheckedCreateWithoutAlimentationInput> | RepasCreateWithoutAlimentationInput[] | RepasUncheckedCreateWithoutAlimentationInput[]
    connectOrCreate?: RepasCreateOrConnectWithoutAlimentationInput | RepasCreateOrConnectWithoutAlimentationInput[]
    createMany?: RepasCreateManyAlimentationInputEnvelope
    connect?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
  }

  export type UtilisateurCreateNestedManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    create?: XOR<UtilisateurCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, UtilisateurUncheckedCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput> | UtilisateurCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[] | UtilisateurUncheckedCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput | UtilisateurCreateOrConnectWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    createMany?: UtilisateurCreateManyAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInputEnvelope
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
  }

  export type RepasUncheckedCreateNestedManyWithoutAlimentationInput = {
    create?: XOR<RepasCreateWithoutAlimentationInput, RepasUncheckedCreateWithoutAlimentationInput> | RepasCreateWithoutAlimentationInput[] | RepasUncheckedCreateWithoutAlimentationInput[]
    connectOrCreate?: RepasCreateOrConnectWithoutAlimentationInput | RepasCreateOrConnectWithoutAlimentationInput[]
    createMany?: RepasCreateManyAlimentationInputEnvelope
    connect?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
  }

  export type UtilisateurUncheckedCreateNestedManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    create?: XOR<UtilisateurCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, UtilisateurUncheckedCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput> | UtilisateurCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[] | UtilisateurUncheckedCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput | UtilisateurCreateOrConnectWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    createMany?: UtilisateurCreateManyAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInputEnvelope
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
  }

  export type UtilisateurUpdateOneRequiredWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurNestedInput = {
    create?: XOR<UtilisateurCreateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput, UtilisateurUncheckedCreateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput
    upsert?: UtilisateurUpsertWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput, UtilisateurUpdateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput>, UtilisateurUncheckedUpdateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput>
  }

  export type RepasUpdateManyWithoutAlimentationNestedInput = {
    create?: XOR<RepasCreateWithoutAlimentationInput, RepasUncheckedCreateWithoutAlimentationInput> | RepasCreateWithoutAlimentationInput[] | RepasUncheckedCreateWithoutAlimentationInput[]
    connectOrCreate?: RepasCreateOrConnectWithoutAlimentationInput | RepasCreateOrConnectWithoutAlimentationInput[]
    upsert?: RepasUpsertWithWhereUniqueWithoutAlimentationInput | RepasUpsertWithWhereUniqueWithoutAlimentationInput[]
    createMany?: RepasCreateManyAlimentationInputEnvelope
    set?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    disconnect?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    delete?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    connect?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    update?: RepasUpdateWithWhereUniqueWithoutAlimentationInput | RepasUpdateWithWhereUniqueWithoutAlimentationInput[]
    updateMany?: RepasUpdateManyWithWhereWithoutAlimentationInput | RepasUpdateManyWithWhereWithoutAlimentationInput[]
    deleteMany?: RepasScalarWhereInput | RepasScalarWhereInput[]
  }

  export type UtilisateurUpdateManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput = {
    create?: XOR<UtilisateurCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, UtilisateurUncheckedCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput> | UtilisateurCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[] | UtilisateurUncheckedCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput | UtilisateurCreateOrConnectWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    upsert?: UtilisateurUpsertWithWhereUniqueWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput | UtilisateurUpsertWithWhereUniqueWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    createMany?: UtilisateurCreateManyAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInputEnvelope
    set?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    disconnect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    delete?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    update?: UtilisateurUpdateWithWhereUniqueWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput | UtilisateurUpdateWithWhereUniqueWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    updateMany?: UtilisateurUpdateManyWithWhereWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput | UtilisateurUpdateManyWithWhereWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    deleteMany?: UtilisateurScalarWhereInput | UtilisateurScalarWhereInput[]
  }

  export type RepasUncheckedUpdateManyWithoutAlimentationNestedInput = {
    create?: XOR<RepasCreateWithoutAlimentationInput, RepasUncheckedCreateWithoutAlimentationInput> | RepasCreateWithoutAlimentationInput[] | RepasUncheckedCreateWithoutAlimentationInput[]
    connectOrCreate?: RepasCreateOrConnectWithoutAlimentationInput | RepasCreateOrConnectWithoutAlimentationInput[]
    upsert?: RepasUpsertWithWhereUniqueWithoutAlimentationInput | RepasUpsertWithWhereUniqueWithoutAlimentationInput[]
    createMany?: RepasCreateManyAlimentationInputEnvelope
    set?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    disconnect?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    delete?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    connect?: RepasWhereUniqueInput | RepasWhereUniqueInput[]
    update?: RepasUpdateWithWhereUniqueWithoutAlimentationInput | RepasUpdateWithWhereUniqueWithoutAlimentationInput[]
    updateMany?: RepasUpdateManyWithWhereWithoutAlimentationInput | RepasUpdateManyWithWhereWithoutAlimentationInput[]
    deleteMany?: RepasScalarWhereInput | RepasScalarWhereInput[]
  }

  export type UtilisateurUncheckedUpdateManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput = {
    create?: XOR<UtilisateurCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, UtilisateurUncheckedCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput> | UtilisateurCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[] | UtilisateurUncheckedCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput | UtilisateurCreateOrConnectWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    upsert?: UtilisateurUpsertWithWhereUniqueWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput | UtilisateurUpsertWithWhereUniqueWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    createMany?: UtilisateurCreateManyAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInputEnvelope
    set?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    disconnect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    delete?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    update?: UtilisateurUpdateWithWhereUniqueWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput | UtilisateurUpdateWithWhereUniqueWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    updateMany?: UtilisateurUpdateManyWithWhereWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput | UtilisateurUpdateManyWithWhereWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    deleteMany?: UtilisateurScalarWhereInput | UtilisateurScalarWhereInput[]
  }

  export type AlimentCreateNestedOneWithoutAliments_indesirableInput = {
    create?: XOR<AlimentCreateWithoutAliments_indesirableInput, AlimentUncheckedCreateWithoutAliments_indesirableInput>
    connectOrCreate?: AlimentCreateOrConnectWithoutAliments_indesirableInput
    connect?: AlimentWhereUniqueInput
  }

  export type AlimentUpdateOneRequiredWithoutAliments_indesirableNestedInput = {
    create?: XOR<AlimentCreateWithoutAliments_indesirableInput, AlimentUncheckedCreateWithoutAliments_indesirableInput>
    connectOrCreate?: AlimentCreateOrConnectWithoutAliments_indesirableInput
    upsert?: AlimentUpsertWithoutAliments_indesirableInput
    connect?: AlimentWhereUniqueInput
    update?: XOR<XOR<AlimentUpdateToOneWithWhereWithoutAliments_indesirableInput, AlimentUpdateWithoutAliments_indesirableInput>, AlimentUncheckedUpdateWithoutAliments_indesirableInput>
  }

  export type Historique_SportCreateNestedManyWithoutExercicesInput = {
    create?: XOR<Historique_SportCreateWithoutExercicesInput, Historique_SportUncheckedCreateWithoutExercicesInput> | Historique_SportCreateWithoutExercicesInput[] | Historique_SportUncheckedCreateWithoutExercicesInput[]
    connectOrCreate?: Historique_SportCreateOrConnectWithoutExercicesInput | Historique_SportCreateOrConnectWithoutExercicesInput[]
    createMany?: Historique_SportCreateManyExercicesInputEnvelope
    connect?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
  }

  export type SeancesCreateNestedManyWithoutExercices_Seances_Exercice1_idToExercicesInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice1_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice1_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice1_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice1_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice1_idToExercicesInputEnvelope
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
  }

  export type SeancesCreateNestedManyWithoutExercices_Seances_Exercice2_idToExercicesInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice2_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice2_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice2_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice2_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice2_idToExercicesInputEnvelope
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
  }

  export type SeancesCreateNestedManyWithoutExercices_Seances_Exercice3_idToExercicesInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice3_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice3_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice3_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice3_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice3_idToExercicesInputEnvelope
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
  }

  export type SeancesCreateNestedManyWithoutExercices_Seances_Exercice4_idToExercicesInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice4_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice4_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice4_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice4_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice4_idToExercicesInputEnvelope
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
  }

  export type Historique_SportUncheckedCreateNestedManyWithoutExercicesInput = {
    create?: XOR<Historique_SportCreateWithoutExercicesInput, Historique_SportUncheckedCreateWithoutExercicesInput> | Historique_SportCreateWithoutExercicesInput[] | Historique_SportUncheckedCreateWithoutExercicesInput[]
    connectOrCreate?: Historique_SportCreateOrConnectWithoutExercicesInput | Historique_SportCreateOrConnectWithoutExercicesInput[]
    createMany?: Historique_SportCreateManyExercicesInputEnvelope
    connect?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
  }

  export type SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice1_idToExercicesInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice1_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice1_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice1_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice1_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice1_idToExercicesInputEnvelope
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
  }

  export type SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice2_idToExercicesInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice2_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice2_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice2_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice2_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice2_idToExercicesInputEnvelope
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
  }

  export type SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice3_idToExercicesInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice3_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice3_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice3_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice3_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice3_idToExercicesInputEnvelope
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
  }

  export type SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice4_idToExercicesInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice4_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice4_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice4_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice4_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice4_idToExercicesInputEnvelope
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
  }

  export type Historique_SportUpdateManyWithoutExercicesNestedInput = {
    create?: XOR<Historique_SportCreateWithoutExercicesInput, Historique_SportUncheckedCreateWithoutExercicesInput> | Historique_SportCreateWithoutExercicesInput[] | Historique_SportUncheckedCreateWithoutExercicesInput[]
    connectOrCreate?: Historique_SportCreateOrConnectWithoutExercicesInput | Historique_SportCreateOrConnectWithoutExercicesInput[]
    upsert?: Historique_SportUpsertWithWhereUniqueWithoutExercicesInput | Historique_SportUpsertWithWhereUniqueWithoutExercicesInput[]
    createMany?: Historique_SportCreateManyExercicesInputEnvelope
    set?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    disconnect?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    delete?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    connect?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    update?: Historique_SportUpdateWithWhereUniqueWithoutExercicesInput | Historique_SportUpdateWithWhereUniqueWithoutExercicesInput[]
    updateMany?: Historique_SportUpdateManyWithWhereWithoutExercicesInput | Historique_SportUpdateManyWithWhereWithoutExercicesInput[]
    deleteMany?: Historique_SportScalarWhereInput | Historique_SportScalarWhereInput[]
  }

  export type SeancesUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesNestedInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice1_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice1_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice1_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice1_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    upsert?: SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice1_idToExercicesInput | SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice1_idToExercicesInputEnvelope
    set?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    disconnect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    delete?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    update?: SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice1_idToExercicesInput | SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    updateMany?: SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice1_idToExercicesInput | SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    deleteMany?: SeancesScalarWhereInput | SeancesScalarWhereInput[]
  }

  export type SeancesUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesNestedInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice2_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice2_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice2_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice2_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    upsert?: SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice2_idToExercicesInput | SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice2_idToExercicesInputEnvelope
    set?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    disconnect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    delete?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    update?: SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice2_idToExercicesInput | SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    updateMany?: SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice2_idToExercicesInput | SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    deleteMany?: SeancesScalarWhereInput | SeancesScalarWhereInput[]
  }

  export type SeancesUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesNestedInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice3_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice3_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice3_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice3_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    upsert?: SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice3_idToExercicesInput | SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice3_idToExercicesInputEnvelope
    set?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    disconnect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    delete?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    update?: SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice3_idToExercicesInput | SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    updateMany?: SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice3_idToExercicesInput | SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    deleteMany?: SeancesScalarWhereInput | SeancesScalarWhereInput[]
  }

  export type SeancesUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesNestedInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice4_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice4_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice4_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice4_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    upsert?: SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice4_idToExercicesInput | SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice4_idToExercicesInputEnvelope
    set?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    disconnect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    delete?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    update?: SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice4_idToExercicesInput | SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    updateMany?: SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice4_idToExercicesInput | SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    deleteMany?: SeancesScalarWhereInput | SeancesScalarWhereInput[]
  }

  export type Historique_SportUncheckedUpdateManyWithoutExercicesNestedInput = {
    create?: XOR<Historique_SportCreateWithoutExercicesInput, Historique_SportUncheckedCreateWithoutExercicesInput> | Historique_SportCreateWithoutExercicesInput[] | Historique_SportUncheckedCreateWithoutExercicesInput[]
    connectOrCreate?: Historique_SportCreateOrConnectWithoutExercicesInput | Historique_SportCreateOrConnectWithoutExercicesInput[]
    upsert?: Historique_SportUpsertWithWhereUniqueWithoutExercicesInput | Historique_SportUpsertWithWhereUniqueWithoutExercicesInput[]
    createMany?: Historique_SportCreateManyExercicesInputEnvelope
    set?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    disconnect?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    delete?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    connect?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    update?: Historique_SportUpdateWithWhereUniqueWithoutExercicesInput | Historique_SportUpdateWithWhereUniqueWithoutExercicesInput[]
    updateMany?: Historique_SportUpdateManyWithWhereWithoutExercicesInput | Historique_SportUpdateManyWithWhereWithoutExercicesInput[]
    deleteMany?: Historique_SportScalarWhereInput | Historique_SportScalarWhereInput[]
  }

  export type SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesNestedInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice1_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice1_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice1_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice1_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    upsert?: SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice1_idToExercicesInput | SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice1_idToExercicesInputEnvelope
    set?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    disconnect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    delete?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    update?: SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice1_idToExercicesInput | SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    updateMany?: SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice1_idToExercicesInput | SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice1_idToExercicesInput[]
    deleteMany?: SeancesScalarWhereInput | SeancesScalarWhereInput[]
  }

  export type SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesNestedInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice2_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice2_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice2_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice2_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    upsert?: SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice2_idToExercicesInput | SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice2_idToExercicesInputEnvelope
    set?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    disconnect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    delete?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    update?: SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice2_idToExercicesInput | SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    updateMany?: SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice2_idToExercicesInput | SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice2_idToExercicesInput[]
    deleteMany?: SeancesScalarWhereInput | SeancesScalarWhereInput[]
  }

  export type SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesNestedInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice3_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice3_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice3_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice3_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    upsert?: SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice3_idToExercicesInput | SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice3_idToExercicesInputEnvelope
    set?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    disconnect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    delete?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    update?: SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice3_idToExercicesInput | SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    updateMany?: SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice3_idToExercicesInput | SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice3_idToExercicesInput[]
    deleteMany?: SeancesScalarWhereInput | SeancesScalarWhereInput[]
  }

  export type SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesNestedInput = {
    create?: XOR<SeancesCreateWithoutExercices_Seances_Exercice4_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice4_idToExercicesInput> | SeancesCreateWithoutExercices_Seances_Exercice4_idToExercicesInput[] | SeancesUncheckedCreateWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    connectOrCreate?: SeancesCreateOrConnectWithoutExercices_Seances_Exercice4_idToExercicesInput | SeancesCreateOrConnectWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    upsert?: SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice4_idToExercicesInput | SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    createMany?: SeancesCreateManyExercices_Seances_Exercice4_idToExercicesInputEnvelope
    set?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    disconnect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    delete?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    connect?: SeancesWhereUniqueInput | SeancesWhereUniqueInput[]
    update?: SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice4_idToExercicesInput | SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    updateMany?: SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice4_idToExercicesInput | SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice4_idToExercicesInput[]
    deleteMany?: SeancesScalarWhereInput | SeancesScalarWhereInput[]
  }

  export type Objectif_SanteCreateNestedOneWithoutHistorique_SanteInput = {
    create?: XOR<Objectif_SanteCreateWithoutHistorique_SanteInput, Objectif_SanteUncheckedCreateWithoutHistorique_SanteInput>
    connectOrCreate?: Objectif_SanteCreateOrConnectWithoutHistorique_SanteInput
    connect?: Objectif_SanteWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type Objectif_SanteUpdateOneRequiredWithoutHistorique_SanteNestedInput = {
    create?: XOR<Objectif_SanteCreateWithoutHistorique_SanteInput, Objectif_SanteUncheckedCreateWithoutHistorique_SanteInput>
    connectOrCreate?: Objectif_SanteCreateOrConnectWithoutHistorique_SanteInput
    upsert?: Objectif_SanteUpsertWithoutHistorique_SanteInput
    connect?: Objectif_SanteWhereUniqueInput
    update?: XOR<XOR<Objectif_SanteUpdateToOneWithWhereWithoutHistorique_SanteInput, Objectif_SanteUpdateWithoutHistorique_SanteInput>, Objectif_SanteUncheckedUpdateWithoutHistorique_SanteInput>
  }

  export type UtilisateurCreateNestedOneWithoutHistorique_SportInput = {
    create?: XOR<UtilisateurCreateWithoutHistorique_SportInput, UtilisateurUncheckedCreateWithoutHistorique_SportInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutHistorique_SportInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type ExercicesCreateNestedOneWithoutHistorique_SportInput = {
    create?: XOR<ExercicesCreateWithoutHistorique_SportInput, ExercicesUncheckedCreateWithoutHistorique_SportInput>
    connectOrCreate?: ExercicesCreateOrConnectWithoutHistorique_SportInput
    connect?: ExercicesWhereUniqueInput
  }

  export type UtilisateurUpdateOneRequiredWithoutHistorique_SportNestedInput = {
    create?: XOR<UtilisateurCreateWithoutHistorique_SportInput, UtilisateurUncheckedCreateWithoutHistorique_SportInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutHistorique_SportInput
    upsert?: UtilisateurUpsertWithoutHistorique_SportInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutHistorique_SportInput, UtilisateurUpdateWithoutHistorique_SportInput>, UtilisateurUncheckedUpdateWithoutHistorique_SportInput>
  }

  export type ExercicesUpdateOneRequiredWithoutHistorique_SportNestedInput = {
    create?: XOR<ExercicesCreateWithoutHistorique_SportInput, ExercicesUncheckedCreateWithoutHistorique_SportInput>
    connectOrCreate?: ExercicesCreateOrConnectWithoutHistorique_SportInput
    upsert?: ExercicesUpsertWithoutHistorique_SportInput
    connect?: ExercicesWhereUniqueInput
    update?: XOR<XOR<ExercicesUpdateToOneWithWhereWithoutHistorique_SportInput, ExercicesUpdateWithoutHistorique_SportInput>, ExercicesUncheckedUpdateWithoutHistorique_SportInput>
  }

  export type Historique_SanteCreateNestedManyWithoutObjectif_SanteInput = {
    create?: XOR<Historique_SanteCreateWithoutObjectif_SanteInput, Historique_SanteUncheckedCreateWithoutObjectif_SanteInput> | Historique_SanteCreateWithoutObjectif_SanteInput[] | Historique_SanteUncheckedCreateWithoutObjectif_SanteInput[]
    connectOrCreate?: Historique_SanteCreateOrConnectWithoutObjectif_SanteInput | Historique_SanteCreateOrConnectWithoutObjectif_SanteInput[]
    createMany?: Historique_SanteCreateManyObjectif_SanteInputEnvelope
    connect?: Historique_SanteWhereUniqueInput | Historique_SanteWhereUniqueInput[]
  }

  export type SanteCreateNestedManyWithoutObjectif_SanteInput = {
    create?: XOR<SanteCreateWithoutObjectif_SanteInput, SanteUncheckedCreateWithoutObjectif_SanteInput> | SanteCreateWithoutObjectif_SanteInput[] | SanteUncheckedCreateWithoutObjectif_SanteInput[]
    connectOrCreate?: SanteCreateOrConnectWithoutObjectif_SanteInput | SanteCreateOrConnectWithoutObjectif_SanteInput[]
    createMany?: SanteCreateManyObjectif_SanteInputEnvelope
    connect?: SanteWhereUniqueInput | SanteWhereUniqueInput[]
  }

  export type Historique_SanteUncheckedCreateNestedManyWithoutObjectif_SanteInput = {
    create?: XOR<Historique_SanteCreateWithoutObjectif_SanteInput, Historique_SanteUncheckedCreateWithoutObjectif_SanteInput> | Historique_SanteCreateWithoutObjectif_SanteInput[] | Historique_SanteUncheckedCreateWithoutObjectif_SanteInput[]
    connectOrCreate?: Historique_SanteCreateOrConnectWithoutObjectif_SanteInput | Historique_SanteCreateOrConnectWithoutObjectif_SanteInput[]
    createMany?: Historique_SanteCreateManyObjectif_SanteInputEnvelope
    connect?: Historique_SanteWhereUniqueInput | Historique_SanteWhereUniqueInput[]
  }

  export type SanteUncheckedCreateNestedManyWithoutObjectif_SanteInput = {
    create?: XOR<SanteCreateWithoutObjectif_SanteInput, SanteUncheckedCreateWithoutObjectif_SanteInput> | SanteCreateWithoutObjectif_SanteInput[] | SanteUncheckedCreateWithoutObjectif_SanteInput[]
    connectOrCreate?: SanteCreateOrConnectWithoutObjectif_SanteInput | SanteCreateOrConnectWithoutObjectif_SanteInput[]
    createMany?: SanteCreateManyObjectif_SanteInputEnvelope
    connect?: SanteWhereUniqueInput | SanteWhereUniqueInput[]
  }

  export type Historique_SanteUpdateManyWithoutObjectif_SanteNestedInput = {
    create?: XOR<Historique_SanteCreateWithoutObjectif_SanteInput, Historique_SanteUncheckedCreateWithoutObjectif_SanteInput> | Historique_SanteCreateWithoutObjectif_SanteInput[] | Historique_SanteUncheckedCreateWithoutObjectif_SanteInput[]
    connectOrCreate?: Historique_SanteCreateOrConnectWithoutObjectif_SanteInput | Historique_SanteCreateOrConnectWithoutObjectif_SanteInput[]
    upsert?: Historique_SanteUpsertWithWhereUniqueWithoutObjectif_SanteInput | Historique_SanteUpsertWithWhereUniqueWithoutObjectif_SanteInput[]
    createMany?: Historique_SanteCreateManyObjectif_SanteInputEnvelope
    set?: Historique_SanteWhereUniqueInput | Historique_SanteWhereUniqueInput[]
    disconnect?: Historique_SanteWhereUniqueInput | Historique_SanteWhereUniqueInput[]
    delete?: Historique_SanteWhereUniqueInput | Historique_SanteWhereUniqueInput[]
    connect?: Historique_SanteWhereUniqueInput | Historique_SanteWhereUniqueInput[]
    update?: Historique_SanteUpdateWithWhereUniqueWithoutObjectif_SanteInput | Historique_SanteUpdateWithWhereUniqueWithoutObjectif_SanteInput[]
    updateMany?: Historique_SanteUpdateManyWithWhereWithoutObjectif_SanteInput | Historique_SanteUpdateManyWithWhereWithoutObjectif_SanteInput[]
    deleteMany?: Historique_SanteScalarWhereInput | Historique_SanteScalarWhereInput[]
  }

  export type SanteUpdateManyWithoutObjectif_SanteNestedInput = {
    create?: XOR<SanteCreateWithoutObjectif_SanteInput, SanteUncheckedCreateWithoutObjectif_SanteInput> | SanteCreateWithoutObjectif_SanteInput[] | SanteUncheckedCreateWithoutObjectif_SanteInput[]
    connectOrCreate?: SanteCreateOrConnectWithoutObjectif_SanteInput | SanteCreateOrConnectWithoutObjectif_SanteInput[]
    upsert?: SanteUpsertWithWhereUniqueWithoutObjectif_SanteInput | SanteUpsertWithWhereUniqueWithoutObjectif_SanteInput[]
    createMany?: SanteCreateManyObjectif_SanteInputEnvelope
    set?: SanteWhereUniqueInput | SanteWhereUniqueInput[]
    disconnect?: SanteWhereUniqueInput | SanteWhereUniqueInput[]
    delete?: SanteWhereUniqueInput | SanteWhereUniqueInput[]
    connect?: SanteWhereUniqueInput | SanteWhereUniqueInput[]
    update?: SanteUpdateWithWhereUniqueWithoutObjectif_SanteInput | SanteUpdateWithWhereUniqueWithoutObjectif_SanteInput[]
    updateMany?: SanteUpdateManyWithWhereWithoutObjectif_SanteInput | SanteUpdateManyWithWhereWithoutObjectif_SanteInput[]
    deleteMany?: SanteScalarWhereInput | SanteScalarWhereInput[]
  }

  export type Historique_SanteUncheckedUpdateManyWithoutObjectif_SanteNestedInput = {
    create?: XOR<Historique_SanteCreateWithoutObjectif_SanteInput, Historique_SanteUncheckedCreateWithoutObjectif_SanteInput> | Historique_SanteCreateWithoutObjectif_SanteInput[] | Historique_SanteUncheckedCreateWithoutObjectif_SanteInput[]
    connectOrCreate?: Historique_SanteCreateOrConnectWithoutObjectif_SanteInput | Historique_SanteCreateOrConnectWithoutObjectif_SanteInput[]
    upsert?: Historique_SanteUpsertWithWhereUniqueWithoutObjectif_SanteInput | Historique_SanteUpsertWithWhereUniqueWithoutObjectif_SanteInput[]
    createMany?: Historique_SanteCreateManyObjectif_SanteInputEnvelope
    set?: Historique_SanteWhereUniqueInput | Historique_SanteWhereUniqueInput[]
    disconnect?: Historique_SanteWhereUniqueInput | Historique_SanteWhereUniqueInput[]
    delete?: Historique_SanteWhereUniqueInput | Historique_SanteWhereUniqueInput[]
    connect?: Historique_SanteWhereUniqueInput | Historique_SanteWhereUniqueInput[]
    update?: Historique_SanteUpdateWithWhereUniqueWithoutObjectif_SanteInput | Historique_SanteUpdateWithWhereUniqueWithoutObjectif_SanteInput[]
    updateMany?: Historique_SanteUpdateManyWithWhereWithoutObjectif_SanteInput | Historique_SanteUpdateManyWithWhereWithoutObjectif_SanteInput[]
    deleteMany?: Historique_SanteScalarWhereInput | Historique_SanteScalarWhereInput[]
  }

  export type SanteUncheckedUpdateManyWithoutObjectif_SanteNestedInput = {
    create?: XOR<SanteCreateWithoutObjectif_SanteInput, SanteUncheckedCreateWithoutObjectif_SanteInput> | SanteCreateWithoutObjectif_SanteInput[] | SanteUncheckedCreateWithoutObjectif_SanteInput[]
    connectOrCreate?: SanteCreateOrConnectWithoutObjectif_SanteInput | SanteCreateOrConnectWithoutObjectif_SanteInput[]
    upsert?: SanteUpsertWithWhereUniqueWithoutObjectif_SanteInput | SanteUpsertWithWhereUniqueWithoutObjectif_SanteInput[]
    createMany?: SanteCreateManyObjectif_SanteInputEnvelope
    set?: SanteWhereUniqueInput | SanteWhereUniqueInput[]
    disconnect?: SanteWhereUniqueInput | SanteWhereUniqueInput[]
    delete?: SanteWhereUniqueInput | SanteWhereUniqueInput[]
    connect?: SanteWhereUniqueInput | SanteWhereUniqueInput[]
    update?: SanteUpdateWithWhereUniqueWithoutObjectif_SanteInput | SanteUpdateWithWhereUniqueWithoutObjectif_SanteInput[]
    updateMany?: SanteUpdateManyWithWhereWithoutObjectif_SanteInput | SanteUpdateManyWithWhereWithoutObjectif_SanteInput[]
    deleteMany?: SanteScalarWhereInput | SanteScalarWhereInput[]
  }

  export type AlimentCreateNestedManyWithoutRepas_Aliment_Repas_idToRepasInput = {
    create?: XOR<AlimentCreateWithoutRepas_Aliment_Repas_idToRepasInput, AlimentUncheckedCreateWithoutRepas_Aliment_Repas_idToRepasInput> | AlimentCreateWithoutRepas_Aliment_Repas_idToRepasInput[] | AlimentUncheckedCreateWithoutRepas_Aliment_Repas_idToRepasInput[]
    connectOrCreate?: AlimentCreateOrConnectWithoutRepas_Aliment_Repas_idToRepasInput | AlimentCreateOrConnectWithoutRepas_Aliment_Repas_idToRepasInput[]
    createMany?: AlimentCreateManyRepas_Aliment_Repas_idToRepasInputEnvelope
    connect?: AlimentWhereUniqueInput | AlimentWhereUniqueInput[]
  }

  export type AlimentCreateNestedOneWithoutRepas_Repas_Aliment_idToAlimentInput = {
    create?: XOR<AlimentCreateWithoutRepas_Repas_Aliment_idToAlimentInput, AlimentUncheckedCreateWithoutRepas_Repas_Aliment_idToAlimentInput>
    connectOrCreate?: AlimentCreateOrConnectWithoutRepas_Repas_Aliment_idToAlimentInput
    connect?: AlimentWhereUniqueInput
  }

  export type AlimentationCreateNestedOneWithoutRepasInput = {
    create?: XOR<AlimentationCreateWithoutRepasInput, AlimentationUncheckedCreateWithoutRepasInput>
    connectOrCreate?: AlimentationCreateOrConnectWithoutRepasInput
    connect?: AlimentationWhereUniqueInput
  }

  export type AlimentUncheckedCreateNestedManyWithoutRepas_Aliment_Repas_idToRepasInput = {
    create?: XOR<AlimentCreateWithoutRepas_Aliment_Repas_idToRepasInput, AlimentUncheckedCreateWithoutRepas_Aliment_Repas_idToRepasInput> | AlimentCreateWithoutRepas_Aliment_Repas_idToRepasInput[] | AlimentUncheckedCreateWithoutRepas_Aliment_Repas_idToRepasInput[]
    connectOrCreate?: AlimentCreateOrConnectWithoutRepas_Aliment_Repas_idToRepasInput | AlimentCreateOrConnectWithoutRepas_Aliment_Repas_idToRepasInput[]
    createMany?: AlimentCreateManyRepas_Aliment_Repas_idToRepasInputEnvelope
    connect?: AlimentWhereUniqueInput | AlimentWhereUniqueInput[]
  }

  export type AlimentUpdateManyWithoutRepas_Aliment_Repas_idToRepasNestedInput = {
    create?: XOR<AlimentCreateWithoutRepas_Aliment_Repas_idToRepasInput, AlimentUncheckedCreateWithoutRepas_Aliment_Repas_idToRepasInput> | AlimentCreateWithoutRepas_Aliment_Repas_idToRepasInput[] | AlimentUncheckedCreateWithoutRepas_Aliment_Repas_idToRepasInput[]
    connectOrCreate?: AlimentCreateOrConnectWithoutRepas_Aliment_Repas_idToRepasInput | AlimentCreateOrConnectWithoutRepas_Aliment_Repas_idToRepasInput[]
    upsert?: AlimentUpsertWithWhereUniqueWithoutRepas_Aliment_Repas_idToRepasInput | AlimentUpsertWithWhereUniqueWithoutRepas_Aliment_Repas_idToRepasInput[]
    createMany?: AlimentCreateManyRepas_Aliment_Repas_idToRepasInputEnvelope
    set?: AlimentWhereUniqueInput | AlimentWhereUniqueInput[]
    disconnect?: AlimentWhereUniqueInput | AlimentWhereUniqueInput[]
    delete?: AlimentWhereUniqueInput | AlimentWhereUniqueInput[]
    connect?: AlimentWhereUniqueInput | AlimentWhereUniqueInput[]
    update?: AlimentUpdateWithWhereUniqueWithoutRepas_Aliment_Repas_idToRepasInput | AlimentUpdateWithWhereUniqueWithoutRepas_Aliment_Repas_idToRepasInput[]
    updateMany?: AlimentUpdateManyWithWhereWithoutRepas_Aliment_Repas_idToRepasInput | AlimentUpdateManyWithWhereWithoutRepas_Aliment_Repas_idToRepasInput[]
    deleteMany?: AlimentScalarWhereInput | AlimentScalarWhereInput[]
  }

  export type AlimentUpdateOneRequiredWithoutRepas_Repas_Aliment_idToAlimentNestedInput = {
    create?: XOR<AlimentCreateWithoutRepas_Repas_Aliment_idToAlimentInput, AlimentUncheckedCreateWithoutRepas_Repas_Aliment_idToAlimentInput>
    connectOrCreate?: AlimentCreateOrConnectWithoutRepas_Repas_Aliment_idToAlimentInput
    upsert?: AlimentUpsertWithoutRepas_Repas_Aliment_idToAlimentInput
    connect?: AlimentWhereUniqueInput
    update?: XOR<XOR<AlimentUpdateToOneWithWhereWithoutRepas_Repas_Aliment_idToAlimentInput, AlimentUpdateWithoutRepas_Repas_Aliment_idToAlimentInput>, AlimentUncheckedUpdateWithoutRepas_Repas_Aliment_idToAlimentInput>
  }

  export type AlimentationUpdateOneRequiredWithoutRepasNestedInput = {
    create?: XOR<AlimentationCreateWithoutRepasInput, AlimentationUncheckedCreateWithoutRepasInput>
    connectOrCreate?: AlimentationCreateOrConnectWithoutRepasInput
    upsert?: AlimentationUpsertWithoutRepasInput
    connect?: AlimentationWhereUniqueInput
    update?: XOR<XOR<AlimentationUpdateToOneWithWhereWithoutRepasInput, AlimentationUpdateWithoutRepasInput>, AlimentationUncheckedUpdateWithoutRepasInput>
  }

  export type AlimentUncheckedUpdateManyWithoutRepas_Aliment_Repas_idToRepasNestedInput = {
    create?: XOR<AlimentCreateWithoutRepas_Aliment_Repas_idToRepasInput, AlimentUncheckedCreateWithoutRepas_Aliment_Repas_idToRepasInput> | AlimentCreateWithoutRepas_Aliment_Repas_idToRepasInput[] | AlimentUncheckedCreateWithoutRepas_Aliment_Repas_idToRepasInput[]
    connectOrCreate?: AlimentCreateOrConnectWithoutRepas_Aliment_Repas_idToRepasInput | AlimentCreateOrConnectWithoutRepas_Aliment_Repas_idToRepasInput[]
    upsert?: AlimentUpsertWithWhereUniqueWithoutRepas_Aliment_Repas_idToRepasInput | AlimentUpsertWithWhereUniqueWithoutRepas_Aliment_Repas_idToRepasInput[]
    createMany?: AlimentCreateManyRepas_Aliment_Repas_idToRepasInputEnvelope
    set?: AlimentWhereUniqueInput | AlimentWhereUniqueInput[]
    disconnect?: AlimentWhereUniqueInput | AlimentWhereUniqueInput[]
    delete?: AlimentWhereUniqueInput | AlimentWhereUniqueInput[]
    connect?: AlimentWhereUniqueInput | AlimentWhereUniqueInput[]
    update?: AlimentUpdateWithWhereUniqueWithoutRepas_Aliment_Repas_idToRepasInput | AlimentUpdateWithWhereUniqueWithoutRepas_Aliment_Repas_idToRepasInput[]
    updateMany?: AlimentUpdateManyWithWhereWithoutRepas_Aliment_Repas_idToRepasInput | AlimentUpdateManyWithWhereWithoutRepas_Aliment_Repas_idToRepasInput[]
    deleteMany?: AlimentScalarWhereInput | AlimentScalarWhereInput[]
  }

  export type Objectif_SanteCreateNestedOneWithoutSanteInput = {
    create?: XOR<Objectif_SanteCreateWithoutSanteInput, Objectif_SanteUncheckedCreateWithoutSanteInput>
    connectOrCreate?: Objectif_SanteCreateOrConnectWithoutSanteInput
    connect?: Objectif_SanteWhereUniqueInput
  }

  export type UtilisateurCreateNestedManyWithoutSanteInput = {
    create?: XOR<UtilisateurCreateWithoutSanteInput, UtilisateurUncheckedCreateWithoutSanteInput> | UtilisateurCreateWithoutSanteInput[] | UtilisateurUncheckedCreateWithoutSanteInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutSanteInput | UtilisateurCreateOrConnectWithoutSanteInput[]
    createMany?: UtilisateurCreateManySanteInputEnvelope
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
  }

  export type UtilisateurUncheckedCreateNestedManyWithoutSanteInput = {
    create?: XOR<UtilisateurCreateWithoutSanteInput, UtilisateurUncheckedCreateWithoutSanteInput> | UtilisateurCreateWithoutSanteInput[] | UtilisateurUncheckedCreateWithoutSanteInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutSanteInput | UtilisateurCreateOrConnectWithoutSanteInput[]
    createMany?: UtilisateurCreateManySanteInputEnvelope
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
  }

  export type Objectif_SanteUpdateOneRequiredWithoutSanteNestedInput = {
    create?: XOR<Objectif_SanteCreateWithoutSanteInput, Objectif_SanteUncheckedCreateWithoutSanteInput>
    connectOrCreate?: Objectif_SanteCreateOrConnectWithoutSanteInput
    upsert?: Objectif_SanteUpsertWithoutSanteInput
    connect?: Objectif_SanteWhereUniqueInput
    update?: XOR<XOR<Objectif_SanteUpdateToOneWithWhereWithoutSanteInput, Objectif_SanteUpdateWithoutSanteInput>, Objectif_SanteUncheckedUpdateWithoutSanteInput>
  }

  export type UtilisateurUpdateManyWithoutSanteNestedInput = {
    create?: XOR<UtilisateurCreateWithoutSanteInput, UtilisateurUncheckedCreateWithoutSanteInput> | UtilisateurCreateWithoutSanteInput[] | UtilisateurUncheckedCreateWithoutSanteInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutSanteInput | UtilisateurCreateOrConnectWithoutSanteInput[]
    upsert?: UtilisateurUpsertWithWhereUniqueWithoutSanteInput | UtilisateurUpsertWithWhereUniqueWithoutSanteInput[]
    createMany?: UtilisateurCreateManySanteInputEnvelope
    set?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    disconnect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    delete?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    update?: UtilisateurUpdateWithWhereUniqueWithoutSanteInput | UtilisateurUpdateWithWhereUniqueWithoutSanteInput[]
    updateMany?: UtilisateurUpdateManyWithWhereWithoutSanteInput | UtilisateurUpdateManyWithWhereWithoutSanteInput[]
    deleteMany?: UtilisateurScalarWhereInput | UtilisateurScalarWhereInput[]
  }

  export type UtilisateurUncheckedUpdateManyWithoutSanteNestedInput = {
    create?: XOR<UtilisateurCreateWithoutSanteInput, UtilisateurUncheckedCreateWithoutSanteInput> | UtilisateurCreateWithoutSanteInput[] | UtilisateurUncheckedCreateWithoutSanteInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutSanteInput | UtilisateurCreateOrConnectWithoutSanteInput[]
    upsert?: UtilisateurUpsertWithWhereUniqueWithoutSanteInput | UtilisateurUpsertWithWhereUniqueWithoutSanteInput[]
    createMany?: UtilisateurCreateManySanteInputEnvelope
    set?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    disconnect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    delete?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    update?: UtilisateurUpdateWithWhereUniqueWithoutSanteInput | UtilisateurUpdateWithWhereUniqueWithoutSanteInput[]
    updateMany?: UtilisateurUpdateManyWithWhereWithoutSanteInput | UtilisateurUpdateManyWithWhereWithoutSanteInput[]
    deleteMany?: UtilisateurScalarWhereInput | UtilisateurScalarWhereInput[]
  }

  export type ExercicesCreateNestedOneWithoutSeances_Seances_Exercice1_idToExercicesInput = {
    create?: XOR<ExercicesCreateWithoutSeances_Seances_Exercice1_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice1_idToExercicesInput>
    connectOrCreate?: ExercicesCreateOrConnectWithoutSeances_Seances_Exercice1_idToExercicesInput
    connect?: ExercicesWhereUniqueInput
  }

  export type ExercicesCreateNestedOneWithoutSeances_Seances_Exercice2_idToExercicesInput = {
    create?: XOR<ExercicesCreateWithoutSeances_Seances_Exercice2_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice2_idToExercicesInput>
    connectOrCreate?: ExercicesCreateOrConnectWithoutSeances_Seances_Exercice2_idToExercicesInput
    connect?: ExercicesWhereUniqueInput
  }

  export type ExercicesCreateNestedOneWithoutSeances_Seances_Exercice3_idToExercicesInput = {
    create?: XOR<ExercicesCreateWithoutSeances_Seances_Exercice3_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice3_idToExercicesInput>
    connectOrCreate?: ExercicesCreateOrConnectWithoutSeances_Seances_Exercice3_idToExercicesInput
    connect?: ExercicesWhereUniqueInput
  }

  export type ExercicesCreateNestedOneWithoutSeances_Seances_Exercice4_idToExercicesInput = {
    create?: XOR<ExercicesCreateWithoutSeances_Seances_Exercice4_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice4_idToExercicesInput>
    connectOrCreate?: ExercicesCreateOrConnectWithoutSeances_Seances_Exercice4_idToExercicesInput
    connect?: ExercicesWhereUniqueInput
  }

  export type SportCreateNestedManyWithoutSeancesInput = {
    create?: XOR<SportCreateWithoutSeancesInput, SportUncheckedCreateWithoutSeancesInput> | SportCreateWithoutSeancesInput[] | SportUncheckedCreateWithoutSeancesInput[]
    connectOrCreate?: SportCreateOrConnectWithoutSeancesInput | SportCreateOrConnectWithoutSeancesInput[]
    createMany?: SportCreateManySeancesInputEnvelope
    connect?: SportWhereUniqueInput | SportWhereUniqueInput[]
  }

  export type SportUncheckedCreateNestedManyWithoutSeancesInput = {
    create?: XOR<SportCreateWithoutSeancesInput, SportUncheckedCreateWithoutSeancesInput> | SportCreateWithoutSeancesInput[] | SportUncheckedCreateWithoutSeancesInput[]
    connectOrCreate?: SportCreateOrConnectWithoutSeancesInput | SportCreateOrConnectWithoutSeancesInput[]
    createMany?: SportCreateManySeancesInputEnvelope
    connect?: SportWhereUniqueInput | SportWhereUniqueInput[]
  }

  export type ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice1_idToExercicesNestedInput = {
    create?: XOR<ExercicesCreateWithoutSeances_Seances_Exercice1_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice1_idToExercicesInput>
    connectOrCreate?: ExercicesCreateOrConnectWithoutSeances_Seances_Exercice1_idToExercicesInput
    upsert?: ExercicesUpsertWithoutSeances_Seances_Exercice1_idToExercicesInput
    connect?: ExercicesWhereUniqueInput
    update?: XOR<XOR<ExercicesUpdateToOneWithWhereWithoutSeances_Seances_Exercice1_idToExercicesInput, ExercicesUpdateWithoutSeances_Seances_Exercice1_idToExercicesInput>, ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice1_idToExercicesInput>
  }

  export type ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice2_idToExercicesNestedInput = {
    create?: XOR<ExercicesCreateWithoutSeances_Seances_Exercice2_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice2_idToExercicesInput>
    connectOrCreate?: ExercicesCreateOrConnectWithoutSeances_Seances_Exercice2_idToExercicesInput
    upsert?: ExercicesUpsertWithoutSeances_Seances_Exercice2_idToExercicesInput
    connect?: ExercicesWhereUniqueInput
    update?: XOR<XOR<ExercicesUpdateToOneWithWhereWithoutSeances_Seances_Exercice2_idToExercicesInput, ExercicesUpdateWithoutSeances_Seances_Exercice2_idToExercicesInput>, ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice2_idToExercicesInput>
  }

  export type ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice3_idToExercicesNestedInput = {
    create?: XOR<ExercicesCreateWithoutSeances_Seances_Exercice3_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice3_idToExercicesInput>
    connectOrCreate?: ExercicesCreateOrConnectWithoutSeances_Seances_Exercice3_idToExercicesInput
    upsert?: ExercicesUpsertWithoutSeances_Seances_Exercice3_idToExercicesInput
    connect?: ExercicesWhereUniqueInput
    update?: XOR<XOR<ExercicesUpdateToOneWithWhereWithoutSeances_Seances_Exercice3_idToExercicesInput, ExercicesUpdateWithoutSeances_Seances_Exercice3_idToExercicesInput>, ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice3_idToExercicesInput>
  }

  export type ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice4_idToExercicesNestedInput = {
    create?: XOR<ExercicesCreateWithoutSeances_Seances_Exercice4_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice4_idToExercicesInput>
    connectOrCreate?: ExercicesCreateOrConnectWithoutSeances_Seances_Exercice4_idToExercicesInput
    upsert?: ExercicesUpsertWithoutSeances_Seances_Exercice4_idToExercicesInput
    connect?: ExercicesWhereUniqueInput
    update?: XOR<XOR<ExercicesUpdateToOneWithWhereWithoutSeances_Seances_Exercice4_idToExercicesInput, ExercicesUpdateWithoutSeances_Seances_Exercice4_idToExercicesInput>, ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice4_idToExercicesInput>
  }

  export type SportUpdateManyWithoutSeancesNestedInput = {
    create?: XOR<SportCreateWithoutSeancesInput, SportUncheckedCreateWithoutSeancesInput> | SportCreateWithoutSeancesInput[] | SportUncheckedCreateWithoutSeancesInput[]
    connectOrCreate?: SportCreateOrConnectWithoutSeancesInput | SportCreateOrConnectWithoutSeancesInput[]
    upsert?: SportUpsertWithWhereUniqueWithoutSeancesInput | SportUpsertWithWhereUniqueWithoutSeancesInput[]
    createMany?: SportCreateManySeancesInputEnvelope
    set?: SportWhereUniqueInput | SportWhereUniqueInput[]
    disconnect?: SportWhereUniqueInput | SportWhereUniqueInput[]
    delete?: SportWhereUniqueInput | SportWhereUniqueInput[]
    connect?: SportWhereUniqueInput | SportWhereUniqueInput[]
    update?: SportUpdateWithWhereUniqueWithoutSeancesInput | SportUpdateWithWhereUniqueWithoutSeancesInput[]
    updateMany?: SportUpdateManyWithWhereWithoutSeancesInput | SportUpdateManyWithWhereWithoutSeancesInput[]
    deleteMany?: SportScalarWhereInput | SportScalarWhereInput[]
  }

  export type SportUncheckedUpdateManyWithoutSeancesNestedInput = {
    create?: XOR<SportCreateWithoutSeancesInput, SportUncheckedCreateWithoutSeancesInput> | SportCreateWithoutSeancesInput[] | SportUncheckedCreateWithoutSeancesInput[]
    connectOrCreate?: SportCreateOrConnectWithoutSeancesInput | SportCreateOrConnectWithoutSeancesInput[]
    upsert?: SportUpsertWithWhereUniqueWithoutSeancesInput | SportUpsertWithWhereUniqueWithoutSeancesInput[]
    createMany?: SportCreateManySeancesInputEnvelope
    set?: SportWhereUniqueInput | SportWhereUniqueInput[]
    disconnect?: SportWhereUniqueInput | SportWhereUniqueInput[]
    delete?: SportWhereUniqueInput | SportWhereUniqueInput[]
    connect?: SportWhereUniqueInput | SportWhereUniqueInput[]
    update?: SportUpdateWithWhereUniqueWithoutSeancesInput | SportUpdateWithWhereUniqueWithoutSeancesInput[]
    updateMany?: SportUpdateManyWithWhereWithoutSeancesInput | SportUpdateManyWithWhereWithoutSeancesInput[]
    deleteMany?: SportScalarWhereInput | SportScalarWhereInput[]
  }

  export type SeancesCreateNestedOneWithoutSportInput = {
    create?: XOR<SeancesCreateWithoutSportInput, SeancesUncheckedCreateWithoutSportInput>
    connectOrCreate?: SeancesCreateOrConnectWithoutSportInput
    connect?: SeancesWhereUniqueInput
  }

  export type UtilisateurCreateNestedOneWithoutSport_Sport_Utilisateur_idToUtilisateurInput = {
    create?: XOR<UtilisateurCreateWithoutSport_Sport_Utilisateur_idToUtilisateurInput, UtilisateurUncheckedCreateWithoutSport_Sport_Utilisateur_idToUtilisateurInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutSport_Sport_Utilisateur_idToUtilisateurInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type UtilisateurCreateNestedManyWithoutSport_Utilisateur_Objectif_Sport_idToSportInput = {
    create?: XOR<UtilisateurCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput, UtilisateurUncheckedCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput> | UtilisateurCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[] | UtilisateurUncheckedCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutSport_Utilisateur_Objectif_Sport_idToSportInput | UtilisateurCreateOrConnectWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    createMany?: UtilisateurCreateManySport_Utilisateur_Objectif_Sport_idToSportInputEnvelope
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
  }

  export type UtilisateurUncheckedCreateNestedManyWithoutSport_Utilisateur_Objectif_Sport_idToSportInput = {
    create?: XOR<UtilisateurCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput, UtilisateurUncheckedCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput> | UtilisateurCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[] | UtilisateurUncheckedCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutSport_Utilisateur_Objectif_Sport_idToSportInput | UtilisateurCreateOrConnectWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    createMany?: UtilisateurCreateManySport_Utilisateur_Objectif_Sport_idToSportInputEnvelope
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
  }

  export type SeancesUpdateOneRequiredWithoutSportNestedInput = {
    create?: XOR<SeancesCreateWithoutSportInput, SeancesUncheckedCreateWithoutSportInput>
    connectOrCreate?: SeancesCreateOrConnectWithoutSportInput
    upsert?: SeancesUpsertWithoutSportInput
    connect?: SeancesWhereUniqueInput
    update?: XOR<XOR<SeancesUpdateToOneWithWhereWithoutSportInput, SeancesUpdateWithoutSportInput>, SeancesUncheckedUpdateWithoutSportInput>
  }

  export type UtilisateurUpdateOneRequiredWithoutSport_Sport_Utilisateur_idToUtilisateurNestedInput = {
    create?: XOR<UtilisateurCreateWithoutSport_Sport_Utilisateur_idToUtilisateurInput, UtilisateurUncheckedCreateWithoutSport_Sport_Utilisateur_idToUtilisateurInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutSport_Sport_Utilisateur_idToUtilisateurInput
    upsert?: UtilisateurUpsertWithoutSport_Sport_Utilisateur_idToUtilisateurInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutSport_Sport_Utilisateur_idToUtilisateurInput, UtilisateurUpdateWithoutSport_Sport_Utilisateur_idToUtilisateurInput>, UtilisateurUncheckedUpdateWithoutSport_Sport_Utilisateur_idToUtilisateurInput>
  }

  export type UtilisateurUpdateManyWithoutSport_Utilisateur_Objectif_Sport_idToSportNestedInput = {
    create?: XOR<UtilisateurCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput, UtilisateurUncheckedCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput> | UtilisateurCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[] | UtilisateurUncheckedCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutSport_Utilisateur_Objectif_Sport_idToSportInput | UtilisateurCreateOrConnectWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    upsert?: UtilisateurUpsertWithWhereUniqueWithoutSport_Utilisateur_Objectif_Sport_idToSportInput | UtilisateurUpsertWithWhereUniqueWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    createMany?: UtilisateurCreateManySport_Utilisateur_Objectif_Sport_idToSportInputEnvelope
    set?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    disconnect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    delete?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    update?: UtilisateurUpdateWithWhereUniqueWithoutSport_Utilisateur_Objectif_Sport_idToSportInput | UtilisateurUpdateWithWhereUniqueWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    updateMany?: UtilisateurUpdateManyWithWhereWithoutSport_Utilisateur_Objectif_Sport_idToSportInput | UtilisateurUpdateManyWithWhereWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    deleteMany?: UtilisateurScalarWhereInput | UtilisateurScalarWhereInput[]
  }

  export type UtilisateurUncheckedUpdateManyWithoutSport_Utilisateur_Objectif_Sport_idToSportNestedInput = {
    create?: XOR<UtilisateurCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput, UtilisateurUncheckedCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput> | UtilisateurCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[] | UtilisateurUncheckedCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutSport_Utilisateur_Objectif_Sport_idToSportInput | UtilisateurCreateOrConnectWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    upsert?: UtilisateurUpsertWithWhereUniqueWithoutSport_Utilisateur_Objectif_Sport_idToSportInput | UtilisateurUpsertWithWhereUniqueWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    createMany?: UtilisateurCreateManySport_Utilisateur_Objectif_Sport_idToSportInputEnvelope
    set?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    disconnect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    delete?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    update?: UtilisateurUpdateWithWhereUniqueWithoutSport_Utilisateur_Objectif_Sport_idToSportInput | UtilisateurUpdateWithWhereUniqueWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    updateMany?: UtilisateurUpdateManyWithWhereWithoutSport_Utilisateur_Objectif_Sport_idToSportInput | UtilisateurUpdateManyWithWhereWithoutSport_Utilisateur_Objectif_Sport_idToSportInput[]
    deleteMany?: UtilisateurScalarWhereInput | UtilisateurScalarWhereInput[]
  }

  export type AlimentationCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput = {
    create?: XOR<AlimentationCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput, AlimentationUncheckedCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput> | AlimentationCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[] | AlimentationUncheckedCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    connectOrCreate?: AlimentationCreateOrConnectWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput | AlimentationCreateOrConnectWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    createMany?: AlimentationCreateManyUtilisateur_Alimentation_Utilisateur_idToUtilisateurInputEnvelope
    connect?: AlimentationWhereUniqueInput | AlimentationWhereUniqueInput[]
  }

  export type Historique_SportCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<Historique_SportCreateWithoutUtilisateurInput, Historique_SportUncheckedCreateWithoutUtilisateurInput> | Historique_SportCreateWithoutUtilisateurInput[] | Historique_SportUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: Historique_SportCreateOrConnectWithoutUtilisateurInput | Historique_SportCreateOrConnectWithoutUtilisateurInput[]
    createMany?: Historique_SportCreateManyUtilisateurInputEnvelope
    connect?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
  }

  export type SportCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput = {
    create?: XOR<SportCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput, SportUncheckedCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput> | SportCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[] | SportUncheckedCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    connectOrCreate?: SportCreateOrConnectWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput | SportCreateOrConnectWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    createMany?: SportCreateManyUtilisateur_Sport_Utilisateur_idToUtilisateurInputEnvelope
    connect?: SportWhereUniqueInput | SportWhereUniqueInput[]
  }

  export type SanteCreateNestedOneWithoutUtilisateurInput = {
    create?: XOR<SanteCreateWithoutUtilisateurInput, SanteUncheckedCreateWithoutUtilisateurInput>
    connectOrCreate?: SanteCreateOrConnectWithoutUtilisateurInput
    connect?: SanteWhereUniqueInput
  }

  export type SportCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput = {
    create?: XOR<SportCreateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput, SportUncheckedCreateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput>
    connectOrCreate?: SportCreateOrConnectWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput
    connect?: SportWhereUniqueInput
  }

  export type AlimentationCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    create?: XOR<AlimentationCreateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, AlimentationUncheckedCreateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput>
    connectOrCreate?: AlimentationCreateOrConnectWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
    connect?: AlimentationWhereUniqueInput
  }

  export type AlimentationUncheckedCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput = {
    create?: XOR<AlimentationCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput, AlimentationUncheckedCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput> | AlimentationCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[] | AlimentationUncheckedCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    connectOrCreate?: AlimentationCreateOrConnectWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput | AlimentationCreateOrConnectWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    createMany?: AlimentationCreateManyUtilisateur_Alimentation_Utilisateur_idToUtilisateurInputEnvelope
    connect?: AlimentationWhereUniqueInput | AlimentationWhereUniqueInput[]
  }

  export type Historique_SportUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<Historique_SportCreateWithoutUtilisateurInput, Historique_SportUncheckedCreateWithoutUtilisateurInput> | Historique_SportCreateWithoutUtilisateurInput[] | Historique_SportUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: Historique_SportCreateOrConnectWithoutUtilisateurInput | Historique_SportCreateOrConnectWithoutUtilisateurInput[]
    createMany?: Historique_SportCreateManyUtilisateurInputEnvelope
    connect?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
  }

  export type SportUncheckedCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput = {
    create?: XOR<SportCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput, SportUncheckedCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput> | SportCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[] | SportUncheckedCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    connectOrCreate?: SportCreateOrConnectWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput | SportCreateOrConnectWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    createMany?: SportCreateManyUtilisateur_Sport_Utilisateur_idToUtilisateurInputEnvelope
    connect?: SportWhereUniqueInput | SportWhereUniqueInput[]
  }

  export type AlimentationUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput = {
    create?: XOR<AlimentationCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput, AlimentationUncheckedCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput> | AlimentationCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[] | AlimentationUncheckedCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    connectOrCreate?: AlimentationCreateOrConnectWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput | AlimentationCreateOrConnectWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    upsert?: AlimentationUpsertWithWhereUniqueWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput | AlimentationUpsertWithWhereUniqueWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    createMany?: AlimentationCreateManyUtilisateur_Alimentation_Utilisateur_idToUtilisateurInputEnvelope
    set?: AlimentationWhereUniqueInput | AlimentationWhereUniqueInput[]
    disconnect?: AlimentationWhereUniqueInput | AlimentationWhereUniqueInput[]
    delete?: AlimentationWhereUniqueInput | AlimentationWhereUniqueInput[]
    connect?: AlimentationWhereUniqueInput | AlimentationWhereUniqueInput[]
    update?: AlimentationUpdateWithWhereUniqueWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput | AlimentationUpdateWithWhereUniqueWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    updateMany?: AlimentationUpdateManyWithWhereWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput | AlimentationUpdateManyWithWhereWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    deleteMany?: AlimentationScalarWhereInput | AlimentationScalarWhereInput[]
  }

  export type Historique_SportUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<Historique_SportCreateWithoutUtilisateurInput, Historique_SportUncheckedCreateWithoutUtilisateurInput> | Historique_SportCreateWithoutUtilisateurInput[] | Historique_SportUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: Historique_SportCreateOrConnectWithoutUtilisateurInput | Historique_SportCreateOrConnectWithoutUtilisateurInput[]
    upsert?: Historique_SportUpsertWithWhereUniqueWithoutUtilisateurInput | Historique_SportUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: Historique_SportCreateManyUtilisateurInputEnvelope
    set?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    disconnect?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    delete?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    connect?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    update?: Historique_SportUpdateWithWhereUniqueWithoutUtilisateurInput | Historique_SportUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: Historique_SportUpdateManyWithWhereWithoutUtilisateurInput | Historique_SportUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: Historique_SportScalarWhereInput | Historique_SportScalarWhereInput[]
  }

  export type SportUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput = {
    create?: XOR<SportCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput, SportUncheckedCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput> | SportCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[] | SportUncheckedCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    connectOrCreate?: SportCreateOrConnectWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput | SportCreateOrConnectWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    upsert?: SportUpsertWithWhereUniqueWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput | SportUpsertWithWhereUniqueWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    createMany?: SportCreateManyUtilisateur_Sport_Utilisateur_idToUtilisateurInputEnvelope
    set?: SportWhereUniqueInput | SportWhereUniqueInput[]
    disconnect?: SportWhereUniqueInput | SportWhereUniqueInput[]
    delete?: SportWhereUniqueInput | SportWhereUniqueInput[]
    connect?: SportWhereUniqueInput | SportWhereUniqueInput[]
    update?: SportUpdateWithWhereUniqueWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput | SportUpdateWithWhereUniqueWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    updateMany?: SportUpdateManyWithWhereWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput | SportUpdateManyWithWhereWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    deleteMany?: SportScalarWhereInput | SportScalarWhereInput[]
  }

  export type SanteUpdateOneRequiredWithoutUtilisateurNestedInput = {
    create?: XOR<SanteCreateWithoutUtilisateurInput, SanteUncheckedCreateWithoutUtilisateurInput>
    connectOrCreate?: SanteCreateOrConnectWithoutUtilisateurInput
    upsert?: SanteUpsertWithoutUtilisateurInput
    connect?: SanteWhereUniqueInput
    update?: XOR<XOR<SanteUpdateToOneWithWhereWithoutUtilisateurInput, SanteUpdateWithoutUtilisateurInput>, SanteUncheckedUpdateWithoutUtilisateurInput>
  }

  export type SportUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportNestedInput = {
    create?: XOR<SportCreateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput, SportUncheckedCreateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput>
    connectOrCreate?: SportCreateOrConnectWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput
    upsert?: SportUpsertWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput
    connect?: SportWhereUniqueInput
    update?: XOR<XOR<SportUpdateToOneWithWhereWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput, SportUpdateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput>, SportUncheckedUpdateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput>
  }

  export type AlimentationUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput = {
    create?: XOR<AlimentationCreateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, AlimentationUncheckedCreateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput>
    connectOrCreate?: AlimentationCreateOrConnectWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
    upsert?: AlimentationUpsertWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
    connect?: AlimentationWhereUniqueInput
    update?: XOR<XOR<AlimentationUpdateToOneWithWhereWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, AlimentationUpdateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput>, AlimentationUncheckedUpdateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput>
  }

  export type AlimentationUncheckedUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput = {
    create?: XOR<AlimentationCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput, AlimentationUncheckedCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput> | AlimentationCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[] | AlimentationUncheckedCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    connectOrCreate?: AlimentationCreateOrConnectWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput | AlimentationCreateOrConnectWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    upsert?: AlimentationUpsertWithWhereUniqueWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput | AlimentationUpsertWithWhereUniqueWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    createMany?: AlimentationCreateManyUtilisateur_Alimentation_Utilisateur_idToUtilisateurInputEnvelope
    set?: AlimentationWhereUniqueInput | AlimentationWhereUniqueInput[]
    disconnect?: AlimentationWhereUniqueInput | AlimentationWhereUniqueInput[]
    delete?: AlimentationWhereUniqueInput | AlimentationWhereUniqueInput[]
    connect?: AlimentationWhereUniqueInput | AlimentationWhereUniqueInput[]
    update?: AlimentationUpdateWithWhereUniqueWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput | AlimentationUpdateWithWhereUniqueWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    updateMany?: AlimentationUpdateManyWithWhereWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput | AlimentationUpdateManyWithWhereWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    deleteMany?: AlimentationScalarWhereInput | AlimentationScalarWhereInput[]
  }

  export type Historique_SportUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<Historique_SportCreateWithoutUtilisateurInput, Historique_SportUncheckedCreateWithoutUtilisateurInput> | Historique_SportCreateWithoutUtilisateurInput[] | Historique_SportUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: Historique_SportCreateOrConnectWithoutUtilisateurInput | Historique_SportCreateOrConnectWithoutUtilisateurInput[]
    upsert?: Historique_SportUpsertWithWhereUniqueWithoutUtilisateurInput | Historique_SportUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: Historique_SportCreateManyUtilisateurInputEnvelope
    set?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    disconnect?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    delete?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    connect?: Historique_SportWhereUniqueInput | Historique_SportWhereUniqueInput[]
    update?: Historique_SportUpdateWithWhereUniqueWithoutUtilisateurInput | Historique_SportUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: Historique_SportUpdateManyWithWhereWithoutUtilisateurInput | Historique_SportUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: Historique_SportScalarWhereInput | Historique_SportScalarWhereInput[]
  }

  export type SportUncheckedUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput = {
    create?: XOR<SportCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput, SportUncheckedCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput> | SportCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[] | SportUncheckedCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    connectOrCreate?: SportCreateOrConnectWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput | SportCreateOrConnectWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    upsert?: SportUpsertWithWhereUniqueWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput | SportUpsertWithWhereUniqueWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    createMany?: SportCreateManyUtilisateur_Sport_Utilisateur_idToUtilisateurInputEnvelope
    set?: SportWhereUniqueInput | SportWhereUniqueInput[]
    disconnect?: SportWhereUniqueInput | SportWhereUniqueInput[]
    delete?: SportWhereUniqueInput | SportWhereUniqueInput[]
    connect?: SportWhereUniqueInput | SportWhereUniqueInput[]
    update?: SportUpdateWithWhereUniqueWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput | SportUpdateWithWhereUniqueWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    updateMany?: SportUpdateManyWithWhereWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput | SportUpdateManyWithWhereWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    deleteMany?: SportScalarWhereInput | SportScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RepasCreateWithoutAliment_Aliment_Repas_idToRepasInput = {
    Quantite: number
    Glucides: number
    Calories: number
    Lipides: number
    Proteines: number
    Description: string
    Duree: Date | string
    Image: string
    Difficulte: string
    Saison: string
    Aliment_Repas_Aliment_idToAliment: AlimentCreateNestedOneWithoutRepas_Repas_Aliment_idToAlimentInput
    Alimentation: AlimentationCreateNestedOneWithoutRepasInput
  }

  export type RepasUncheckedCreateWithoutAliment_Aliment_Repas_idToRepasInput = {
    Repas_id?: number
    Alimentation_id: number
    Aliment_id: number
    Quantite: number
    Glucides: number
    Calories: number
    Lipides: number
    Proteines: number
    Description: string
    Duree: Date | string
    Image: string
    Difficulte: string
    Saison: string
  }

  export type RepasCreateOrConnectWithoutAliment_Aliment_Repas_idToRepasInput = {
    where: RepasWhereUniqueInput
    create: XOR<RepasCreateWithoutAliment_Aliment_Repas_idToRepasInput, RepasUncheckedCreateWithoutAliment_Aliment_Repas_idToRepasInput>
  }

  export type Aliments_indesirableCreateWithoutAlimentInput = {

  }

  export type Aliments_indesirableUncheckedCreateWithoutAlimentInput = {
    Aliments_indesirable_id?: number
  }

  export type Aliments_indesirableCreateOrConnectWithoutAlimentInput = {
    where: Aliments_indesirableWhereUniqueInput
    create: XOR<Aliments_indesirableCreateWithoutAlimentInput, Aliments_indesirableUncheckedCreateWithoutAlimentInput>
  }

  export type Aliments_indesirableCreateManyAlimentInputEnvelope = {
    data: Aliments_indesirableCreateManyAlimentInput | Aliments_indesirableCreateManyAlimentInput[]
    skipDuplicates?: boolean
  }

  export type RepasCreateWithoutAliment_Repas_Aliment_idToAlimentInput = {
    Quantite: number
    Glucides: number
    Calories: number
    Lipides: number
    Proteines: number
    Description: string
    Duree: Date | string
    Image: string
    Difficulte: string
    Saison: string
    Aliment_Aliment_Repas_idToRepas?: AlimentCreateNestedManyWithoutRepas_Aliment_Repas_idToRepasInput
    Alimentation: AlimentationCreateNestedOneWithoutRepasInput
  }

  export type RepasUncheckedCreateWithoutAliment_Repas_Aliment_idToAlimentInput = {
    Repas_id?: number
    Alimentation_id: number
    Quantite: number
    Glucides: number
    Calories: number
    Lipides: number
    Proteines: number
    Description: string
    Duree: Date | string
    Image: string
    Difficulte: string
    Saison: string
    Aliment_Aliment_Repas_idToRepas?: AlimentUncheckedCreateNestedManyWithoutRepas_Aliment_Repas_idToRepasInput
  }

  export type RepasCreateOrConnectWithoutAliment_Repas_Aliment_idToAlimentInput = {
    where: RepasWhereUniqueInput
    create: XOR<RepasCreateWithoutAliment_Repas_Aliment_idToAlimentInput, RepasUncheckedCreateWithoutAliment_Repas_Aliment_idToAlimentInput>
  }

  export type RepasCreateManyAliment_Repas_Aliment_idToAlimentInputEnvelope = {
    data: RepasCreateManyAliment_Repas_Aliment_idToAlimentInput | RepasCreateManyAliment_Repas_Aliment_idToAlimentInput[]
    skipDuplicates?: boolean
  }

  export type RepasUpsertWithoutAliment_Aliment_Repas_idToRepasInput = {
    update: XOR<RepasUpdateWithoutAliment_Aliment_Repas_idToRepasInput, RepasUncheckedUpdateWithoutAliment_Aliment_Repas_idToRepasInput>
    create: XOR<RepasCreateWithoutAliment_Aliment_Repas_idToRepasInput, RepasUncheckedCreateWithoutAliment_Aliment_Repas_idToRepasInput>
    where?: RepasWhereInput
  }

  export type RepasUpdateToOneWithWhereWithoutAliment_Aliment_Repas_idToRepasInput = {
    where?: RepasWhereInput
    data: XOR<RepasUpdateWithoutAliment_Aliment_Repas_idToRepasInput, RepasUncheckedUpdateWithoutAliment_Aliment_Repas_idToRepasInput>
  }

  export type RepasUpdateWithoutAliment_Aliment_Repas_idToRepasInput = {
    Quantite?: IntFieldUpdateOperationsInput | number
    Glucides?: IntFieldUpdateOperationsInput | number
    Calories?: IntFieldUpdateOperationsInput | number
    Lipides?: IntFieldUpdateOperationsInput | number
    Proteines?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
    Duree?: DateTimeFieldUpdateOperationsInput | Date | string
    Image?: StringFieldUpdateOperationsInput | string
    Difficulte?: StringFieldUpdateOperationsInput | string
    Saison?: StringFieldUpdateOperationsInput | string
    Aliment_Repas_Aliment_idToAliment?: AlimentUpdateOneRequiredWithoutRepas_Repas_Aliment_idToAlimentNestedInput
    Alimentation?: AlimentationUpdateOneRequiredWithoutRepasNestedInput
  }

  export type RepasUncheckedUpdateWithoutAliment_Aliment_Repas_idToRepasInput = {
    Repas_id?: IntFieldUpdateOperationsInput | number
    Alimentation_id?: IntFieldUpdateOperationsInput | number
    Aliment_id?: IntFieldUpdateOperationsInput | number
    Quantite?: IntFieldUpdateOperationsInput | number
    Glucides?: IntFieldUpdateOperationsInput | number
    Calories?: IntFieldUpdateOperationsInput | number
    Lipides?: IntFieldUpdateOperationsInput | number
    Proteines?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
    Duree?: DateTimeFieldUpdateOperationsInput | Date | string
    Image?: StringFieldUpdateOperationsInput | string
    Difficulte?: StringFieldUpdateOperationsInput | string
    Saison?: StringFieldUpdateOperationsInput | string
  }

  export type Aliments_indesirableUpsertWithWhereUniqueWithoutAlimentInput = {
    where: Aliments_indesirableWhereUniqueInput
    update: XOR<Aliments_indesirableUpdateWithoutAlimentInput, Aliments_indesirableUncheckedUpdateWithoutAlimentInput>
    create: XOR<Aliments_indesirableCreateWithoutAlimentInput, Aliments_indesirableUncheckedCreateWithoutAlimentInput>
  }

  export type Aliments_indesirableUpdateWithWhereUniqueWithoutAlimentInput = {
    where: Aliments_indesirableWhereUniqueInput
    data: XOR<Aliments_indesirableUpdateWithoutAlimentInput, Aliments_indesirableUncheckedUpdateWithoutAlimentInput>
  }

  export type Aliments_indesirableUpdateManyWithWhereWithoutAlimentInput = {
    where: Aliments_indesirableScalarWhereInput
    data: XOR<Aliments_indesirableUpdateManyMutationInput, Aliments_indesirableUncheckedUpdateManyWithoutAlimentInput>
  }

  export type Aliments_indesirableScalarWhereInput = {
    AND?: Aliments_indesirableScalarWhereInput | Aliments_indesirableScalarWhereInput[]
    OR?: Aliments_indesirableScalarWhereInput[]
    NOT?: Aliments_indesirableScalarWhereInput | Aliments_indesirableScalarWhereInput[]
    Aliments_indesirable_id?: IntFilter<"Aliments_indesirable"> | number
    Aliment_id?: IntFilter<"Aliments_indesirable"> | number
  }

  export type RepasUpsertWithWhereUniqueWithoutAliment_Repas_Aliment_idToAlimentInput = {
    where: RepasWhereUniqueInput
    update: XOR<RepasUpdateWithoutAliment_Repas_Aliment_idToAlimentInput, RepasUncheckedUpdateWithoutAliment_Repas_Aliment_idToAlimentInput>
    create: XOR<RepasCreateWithoutAliment_Repas_Aliment_idToAlimentInput, RepasUncheckedCreateWithoutAliment_Repas_Aliment_idToAlimentInput>
  }

  export type RepasUpdateWithWhereUniqueWithoutAliment_Repas_Aliment_idToAlimentInput = {
    where: RepasWhereUniqueInput
    data: XOR<RepasUpdateWithoutAliment_Repas_Aliment_idToAlimentInput, RepasUncheckedUpdateWithoutAliment_Repas_Aliment_idToAlimentInput>
  }

  export type RepasUpdateManyWithWhereWithoutAliment_Repas_Aliment_idToAlimentInput = {
    where: RepasScalarWhereInput
    data: XOR<RepasUpdateManyMutationInput, RepasUncheckedUpdateManyWithoutAliment_Repas_Aliment_idToAlimentInput>
  }

  export type RepasScalarWhereInput = {
    AND?: RepasScalarWhereInput | RepasScalarWhereInput[]
    OR?: RepasScalarWhereInput[]
    NOT?: RepasScalarWhereInput | RepasScalarWhereInput[]
    Repas_id?: IntFilter<"Repas"> | number
    Alimentation_id?: IntFilter<"Repas"> | number
    Aliment_id?: IntFilter<"Repas"> | number
    Quantite?: IntFilter<"Repas"> | number
    Glucides?: IntFilter<"Repas"> | number
    Calories?: IntFilter<"Repas"> | number
    Lipides?: IntFilter<"Repas"> | number
    Proteines?: IntFilter<"Repas"> | number
    Description?: StringFilter<"Repas"> | string
    Duree?: DateTimeFilter<"Repas"> | Date | string
    Image?: StringFilter<"Repas"> | string
    Difficulte?: StringFilter<"Repas"> | string
    Saison?: StringFilter<"Repas"> | string
  }

  export type UtilisateurCreateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput = {
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Historique_Sport?: Historique_SportCreateNestedManyWithoutUtilisateurInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput
    Sante: SanteCreateNestedOneWithoutUtilisateurInput
    Sport_Utilisateur_Objectif_Sport_idToSport: SportCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation: AlimentationCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
  }

  export type UtilisateurUncheckedCreateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput = {
    Utilisateur_id?: number
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Objectif_Sante_id: number
    Objectif_Sport_id: number
    Objectif_Alimentaire_id: number
    Historique_Sport?: Historique_SportUncheckedCreateNestedManyWithoutUtilisateurInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUncheckedCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput, UtilisateurUncheckedCreateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput>
  }

  export type RepasCreateWithoutAlimentationInput = {
    Quantite: number
    Glucides: number
    Calories: number
    Lipides: number
    Proteines: number
    Description: string
    Duree: Date | string
    Image: string
    Difficulte: string
    Saison: string
    Aliment_Aliment_Repas_idToRepas?: AlimentCreateNestedManyWithoutRepas_Aliment_Repas_idToRepasInput
    Aliment_Repas_Aliment_idToAliment: AlimentCreateNestedOneWithoutRepas_Repas_Aliment_idToAlimentInput
  }

  export type RepasUncheckedCreateWithoutAlimentationInput = {
    Repas_id?: number
    Aliment_id: number
    Quantite: number
    Glucides: number
    Calories: number
    Lipides: number
    Proteines: number
    Description: string
    Duree: Date | string
    Image: string
    Difficulte: string
    Saison: string
    Aliment_Aliment_Repas_idToRepas?: AlimentUncheckedCreateNestedManyWithoutRepas_Aliment_Repas_idToRepasInput
  }

  export type RepasCreateOrConnectWithoutAlimentationInput = {
    where: RepasWhereUniqueInput
    create: XOR<RepasCreateWithoutAlimentationInput, RepasUncheckedCreateWithoutAlimentationInput>
  }

  export type RepasCreateManyAlimentationInputEnvelope = {
    data: RepasCreateManyAlimentationInput | RepasCreateManyAlimentationInput[]
    skipDuplicates?: boolean
  }

  export type UtilisateurCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput
    Historique_Sport?: Historique_SportCreateNestedManyWithoutUtilisateurInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput
    Sante: SanteCreateNestedOneWithoutUtilisateurInput
    Sport_Utilisateur_Objectif_Sport_idToSport: SportCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput
  }

  export type UtilisateurUncheckedCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    Utilisateur_id?: number
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Objectif_Sante_id: number
    Objectif_Sport_id: number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUncheckedCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput
    Historique_Sport?: Historique_SportUncheckedCreateNestedManyWithoutUtilisateurInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUncheckedCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, UtilisateurUncheckedCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput>
  }

  export type UtilisateurCreateManyAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInputEnvelope = {
    data: UtilisateurCreateManyAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput | UtilisateurCreateManyAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput[]
    skipDuplicates?: boolean
  }

  export type UtilisateurUpsertWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput = {
    update: XOR<UtilisateurUpdateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput, UtilisateurUncheckedUpdateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput>
    create: XOR<UtilisateurCreateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput, UtilisateurUncheckedCreateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput, UtilisateurUncheckedUpdateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput>
  }

  export type UtilisateurUpdateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput = {
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Historique_Sport?: Historique_SportUpdateManyWithoutUtilisateurNestedInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput
    Sante?: SanteUpdateOneRequiredWithoutUtilisateurNestedInput
    Sport_Utilisateur_Objectif_Sport_idToSport?: SportUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportNestedInput
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation?: AlimentationUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput = {
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Sport_id?: IntFieldUpdateOperationsInput | number
    Objectif_Alimentaire_id?: IntFieldUpdateOperationsInput | number
    Historique_Sport?: Historique_SportUncheckedUpdateManyWithoutUtilisateurNestedInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUncheckedUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput
  }

  export type RepasUpsertWithWhereUniqueWithoutAlimentationInput = {
    where: RepasWhereUniqueInput
    update: XOR<RepasUpdateWithoutAlimentationInput, RepasUncheckedUpdateWithoutAlimentationInput>
    create: XOR<RepasCreateWithoutAlimentationInput, RepasUncheckedCreateWithoutAlimentationInput>
  }

  export type RepasUpdateWithWhereUniqueWithoutAlimentationInput = {
    where: RepasWhereUniqueInput
    data: XOR<RepasUpdateWithoutAlimentationInput, RepasUncheckedUpdateWithoutAlimentationInput>
  }

  export type RepasUpdateManyWithWhereWithoutAlimentationInput = {
    where: RepasScalarWhereInput
    data: XOR<RepasUpdateManyMutationInput, RepasUncheckedUpdateManyWithoutAlimentationInput>
  }

  export type UtilisateurUpsertWithWhereUniqueWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    where: UtilisateurWhereUniqueInput
    update: XOR<UtilisateurUpdateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, UtilisateurUncheckedUpdateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput>
    create: XOR<UtilisateurCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, UtilisateurUncheckedCreateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput>
  }

  export type UtilisateurUpdateWithWhereUniqueWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    where: UtilisateurWhereUniqueInput
    data: XOR<UtilisateurUpdateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, UtilisateurUncheckedUpdateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput>
  }

  export type UtilisateurUpdateManyWithWhereWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    where: UtilisateurScalarWhereInput
    data: XOR<UtilisateurUpdateManyMutationInput, UtilisateurUncheckedUpdateManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput>
  }

  export type UtilisateurScalarWhereInput = {
    AND?: UtilisateurScalarWhereInput | UtilisateurScalarWhereInput[]
    OR?: UtilisateurScalarWhereInput[]
    NOT?: UtilisateurScalarWhereInput | UtilisateurScalarWhereInput[]
    Utilisateur_id?: IntFilter<"Utilisateur"> | number
    Prenom?: StringFilter<"Utilisateur"> | string
    Nom?: StringFilter<"Utilisateur"> | string
    Email?: StringFilter<"Utilisateur"> | string
    Mot_Passe?: StringFilter<"Utilisateur"> | string
    Date_Naissance?: DateTimeFilter<"Utilisateur"> | Date | string
    Date_Creation_Inscription?: DateTimeFilter<"Utilisateur"> | Date | string
    Sexe?: StringFilter<"Utilisateur"> | string
    Poids?: IntFilter<"Utilisateur"> | number
    Taille?: IntFilter<"Utilisateur"> | number
    Niveau_Sport?: StringFilter<"Utilisateur"> | string
    Regime_Alimentaire?: StringFilter<"Utilisateur"> | string
    Objectif_Sante_id?: IntFilter<"Utilisateur"> | number
    Objectif_Sport_id?: IntFilter<"Utilisateur"> | number
    Objectif_Alimentaire_id?: IntFilter<"Utilisateur"> | number
  }

  export type AlimentCreateWithoutAliments_indesirableInput = {
    Aliment_Type: string
    Repas_Aliment_Repas_idToRepas: RepasCreateNestedOneWithoutAliment_Aliment_Repas_idToRepasInput
    Repas_Repas_Aliment_idToAliment?: RepasCreateNestedManyWithoutAliment_Repas_Aliment_idToAlimentInput
  }

  export type AlimentUncheckedCreateWithoutAliments_indesirableInput = {
    Aliment_id?: number
    Repas_id: number
    Aliment_Type: string
    Repas_Repas_Aliment_idToAliment?: RepasUncheckedCreateNestedManyWithoutAliment_Repas_Aliment_idToAlimentInput
  }

  export type AlimentCreateOrConnectWithoutAliments_indesirableInput = {
    where: AlimentWhereUniqueInput
    create: XOR<AlimentCreateWithoutAliments_indesirableInput, AlimentUncheckedCreateWithoutAliments_indesirableInput>
  }

  export type AlimentUpsertWithoutAliments_indesirableInput = {
    update: XOR<AlimentUpdateWithoutAliments_indesirableInput, AlimentUncheckedUpdateWithoutAliments_indesirableInput>
    create: XOR<AlimentCreateWithoutAliments_indesirableInput, AlimentUncheckedCreateWithoutAliments_indesirableInput>
    where?: AlimentWhereInput
  }

  export type AlimentUpdateToOneWithWhereWithoutAliments_indesirableInput = {
    where?: AlimentWhereInput
    data: XOR<AlimentUpdateWithoutAliments_indesirableInput, AlimentUncheckedUpdateWithoutAliments_indesirableInput>
  }

  export type AlimentUpdateWithoutAliments_indesirableInput = {
    Aliment_Type?: StringFieldUpdateOperationsInput | string
    Repas_Aliment_Repas_idToRepas?: RepasUpdateOneRequiredWithoutAliment_Aliment_Repas_idToRepasNestedInput
    Repas_Repas_Aliment_idToAliment?: RepasUpdateManyWithoutAliment_Repas_Aliment_idToAlimentNestedInput
  }

  export type AlimentUncheckedUpdateWithoutAliments_indesirableInput = {
    Aliment_id?: IntFieldUpdateOperationsInput | number
    Repas_id?: IntFieldUpdateOperationsInput | number
    Aliment_Type?: StringFieldUpdateOperationsInput | string
    Repas_Repas_Aliment_idToAliment?: RepasUncheckedUpdateManyWithoutAliment_Repas_Aliment_idToAlimentNestedInput
  }

  export type Historique_SportCreateWithoutExercicesInput = {
    Date: Date | string
    Poids_Serie1: number
    Poids_Serie2: number
    Poids_Serie3: number
    Poids_serie4: number
    Repetitions: number
    Note: string
    Serie: number
    Utilisateur: UtilisateurCreateNestedOneWithoutHistorique_SportInput
  }

  export type Historique_SportUncheckedCreateWithoutExercicesInput = {
    Historique_id?: number
    Utilisateur_id: number
    Date: Date | string
    Poids_Serie1: number
    Poids_Serie2: number
    Poids_Serie3: number
    Poids_serie4: number
    Repetitions: number
    Note: string
    Serie: number
  }

  export type Historique_SportCreateOrConnectWithoutExercicesInput = {
    where: Historique_SportWhereUniqueInput
    create: XOR<Historique_SportCreateWithoutExercicesInput, Historique_SportUncheckedCreateWithoutExercicesInput>
  }

  export type Historique_SportCreateManyExercicesInputEnvelope = {
    data: Historique_SportCreateManyExercicesInput | Historique_SportCreateManyExercicesInput[]
    skipDuplicates?: boolean
  }

  export type SeancesCreateWithoutExercices_Seances_Exercice1_idToExercicesInput = {
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
    Exercices_Seances_Exercice2_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice2_idToExercicesInput
    Exercices_Seances_Exercice3_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice3_idToExercicesInput
    Exercices_Seances_Exercice4_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice4_idToExercicesInput
    Sport?: SportCreateNestedManyWithoutSeancesInput
  }

  export type SeancesUncheckedCreateWithoutExercices_Seances_Exercice1_idToExercicesInput = {
    Seance_id?: number
    Exercice2_id: number
    Exercice3_id: number
    Exercice4_id: number
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
    Sport?: SportUncheckedCreateNestedManyWithoutSeancesInput
  }

  export type SeancesCreateOrConnectWithoutExercices_Seances_Exercice1_idToExercicesInput = {
    where: SeancesWhereUniqueInput
    create: XOR<SeancesCreateWithoutExercices_Seances_Exercice1_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice1_idToExercicesInput>
  }

  export type SeancesCreateManyExercices_Seances_Exercice1_idToExercicesInputEnvelope = {
    data: SeancesCreateManyExercices_Seances_Exercice1_idToExercicesInput | SeancesCreateManyExercices_Seances_Exercice1_idToExercicesInput[]
    skipDuplicates?: boolean
  }

  export type SeancesCreateWithoutExercices_Seances_Exercice2_idToExercicesInput = {
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
    Exercices_Seances_Exercice1_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice1_idToExercicesInput
    Exercices_Seances_Exercice3_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice3_idToExercicesInput
    Exercices_Seances_Exercice4_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice4_idToExercicesInput
    Sport?: SportCreateNestedManyWithoutSeancesInput
  }

  export type SeancesUncheckedCreateWithoutExercices_Seances_Exercice2_idToExercicesInput = {
    Seance_id?: number
    Exercice1_id: number
    Exercice3_id: number
    Exercice4_id: number
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
    Sport?: SportUncheckedCreateNestedManyWithoutSeancesInput
  }

  export type SeancesCreateOrConnectWithoutExercices_Seances_Exercice2_idToExercicesInput = {
    where: SeancesWhereUniqueInput
    create: XOR<SeancesCreateWithoutExercices_Seances_Exercice2_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice2_idToExercicesInput>
  }

  export type SeancesCreateManyExercices_Seances_Exercice2_idToExercicesInputEnvelope = {
    data: SeancesCreateManyExercices_Seances_Exercice2_idToExercicesInput | SeancesCreateManyExercices_Seances_Exercice2_idToExercicesInput[]
    skipDuplicates?: boolean
  }

  export type SeancesCreateWithoutExercices_Seances_Exercice3_idToExercicesInput = {
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
    Exercices_Seances_Exercice1_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice1_idToExercicesInput
    Exercices_Seances_Exercice2_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice2_idToExercicesInput
    Exercices_Seances_Exercice4_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice4_idToExercicesInput
    Sport?: SportCreateNestedManyWithoutSeancesInput
  }

  export type SeancesUncheckedCreateWithoutExercices_Seances_Exercice3_idToExercicesInput = {
    Seance_id?: number
    Exercice1_id: number
    Exercice2_id: number
    Exercice4_id: number
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
    Sport?: SportUncheckedCreateNestedManyWithoutSeancesInput
  }

  export type SeancesCreateOrConnectWithoutExercices_Seances_Exercice3_idToExercicesInput = {
    where: SeancesWhereUniqueInput
    create: XOR<SeancesCreateWithoutExercices_Seances_Exercice3_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice3_idToExercicesInput>
  }

  export type SeancesCreateManyExercices_Seances_Exercice3_idToExercicesInputEnvelope = {
    data: SeancesCreateManyExercices_Seances_Exercice3_idToExercicesInput | SeancesCreateManyExercices_Seances_Exercice3_idToExercicesInput[]
    skipDuplicates?: boolean
  }

  export type SeancesCreateWithoutExercices_Seances_Exercice4_idToExercicesInput = {
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
    Exercices_Seances_Exercice1_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice1_idToExercicesInput
    Exercices_Seances_Exercice2_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice2_idToExercicesInput
    Exercices_Seances_Exercice3_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice3_idToExercicesInput
    Sport?: SportCreateNestedManyWithoutSeancesInput
  }

  export type SeancesUncheckedCreateWithoutExercices_Seances_Exercice4_idToExercicesInput = {
    Seance_id?: number
    Exercice1_id: number
    Exercice2_id: number
    Exercice3_id: number
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
    Sport?: SportUncheckedCreateNestedManyWithoutSeancesInput
  }

  export type SeancesCreateOrConnectWithoutExercices_Seances_Exercice4_idToExercicesInput = {
    where: SeancesWhereUniqueInput
    create: XOR<SeancesCreateWithoutExercices_Seances_Exercice4_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice4_idToExercicesInput>
  }

  export type SeancesCreateManyExercices_Seances_Exercice4_idToExercicesInputEnvelope = {
    data: SeancesCreateManyExercices_Seances_Exercice4_idToExercicesInput | SeancesCreateManyExercices_Seances_Exercice4_idToExercicesInput[]
    skipDuplicates?: boolean
  }

  export type Historique_SportUpsertWithWhereUniqueWithoutExercicesInput = {
    where: Historique_SportWhereUniqueInput
    update: XOR<Historique_SportUpdateWithoutExercicesInput, Historique_SportUncheckedUpdateWithoutExercicesInput>
    create: XOR<Historique_SportCreateWithoutExercicesInput, Historique_SportUncheckedCreateWithoutExercicesInput>
  }

  export type Historique_SportUpdateWithWhereUniqueWithoutExercicesInput = {
    where: Historique_SportWhereUniqueInput
    data: XOR<Historique_SportUpdateWithoutExercicesInput, Historique_SportUncheckedUpdateWithoutExercicesInput>
  }

  export type Historique_SportUpdateManyWithWhereWithoutExercicesInput = {
    where: Historique_SportScalarWhereInput
    data: XOR<Historique_SportUpdateManyMutationInput, Historique_SportUncheckedUpdateManyWithoutExercicesInput>
  }

  export type Historique_SportScalarWhereInput = {
    AND?: Historique_SportScalarWhereInput | Historique_SportScalarWhereInput[]
    OR?: Historique_SportScalarWhereInput[]
    NOT?: Historique_SportScalarWhereInput | Historique_SportScalarWhereInput[]
    Historique_id?: IntFilter<"Historique_Sport"> | number
    Utilisateur_id?: IntFilter<"Historique_Sport"> | number
    Exercice_id?: IntFilter<"Historique_Sport"> | number
    Date?: DateTimeFilter<"Historique_Sport"> | Date | string
    Poids_Serie1?: IntFilter<"Historique_Sport"> | number
    Poids_Serie2?: IntFilter<"Historique_Sport"> | number
    Poids_Serie3?: IntFilter<"Historique_Sport"> | number
    Poids_serie4?: IntFilter<"Historique_Sport"> | number
    Repetitions?: IntFilter<"Historique_Sport"> | number
    Note?: StringFilter<"Historique_Sport"> | string
    Serie?: IntFilter<"Historique_Sport"> | number
  }

  export type SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice1_idToExercicesInput = {
    where: SeancesWhereUniqueInput
    update: XOR<SeancesUpdateWithoutExercices_Seances_Exercice1_idToExercicesInput, SeancesUncheckedUpdateWithoutExercices_Seances_Exercice1_idToExercicesInput>
    create: XOR<SeancesCreateWithoutExercices_Seances_Exercice1_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice1_idToExercicesInput>
  }

  export type SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice1_idToExercicesInput = {
    where: SeancesWhereUniqueInput
    data: XOR<SeancesUpdateWithoutExercices_Seances_Exercice1_idToExercicesInput, SeancesUncheckedUpdateWithoutExercices_Seances_Exercice1_idToExercicesInput>
  }

  export type SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice1_idToExercicesInput = {
    where: SeancesScalarWhereInput
    data: XOR<SeancesUpdateManyMutationInput, SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesInput>
  }

  export type SeancesScalarWhereInput = {
    AND?: SeancesScalarWhereInput | SeancesScalarWhereInput[]
    OR?: SeancesScalarWhereInput[]
    NOT?: SeancesScalarWhereInput | SeancesScalarWhereInput[]
    Seance_id?: IntFilter<"Seances"> | number
    Exercice1_id?: IntFilter<"Seances"> | number
    Exercice2_id?: IntFilter<"Seances"> | number
    Exercice3_id?: IntFilter<"Seances"> | number
    Exercice4_id?: IntFilter<"Seances"> | number
    Nombre_Points_Seance?: IntFilter<"Seances"> | number
    Commentaire?: StringFilter<"Seances"> | string
    Nom_Seances?: StringFilter<"Seances"> | string
  }

  export type SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice2_idToExercicesInput = {
    where: SeancesWhereUniqueInput
    update: XOR<SeancesUpdateWithoutExercices_Seances_Exercice2_idToExercicesInput, SeancesUncheckedUpdateWithoutExercices_Seances_Exercice2_idToExercicesInput>
    create: XOR<SeancesCreateWithoutExercices_Seances_Exercice2_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice2_idToExercicesInput>
  }

  export type SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice2_idToExercicesInput = {
    where: SeancesWhereUniqueInput
    data: XOR<SeancesUpdateWithoutExercices_Seances_Exercice2_idToExercicesInput, SeancesUncheckedUpdateWithoutExercices_Seances_Exercice2_idToExercicesInput>
  }

  export type SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice2_idToExercicesInput = {
    where: SeancesScalarWhereInput
    data: XOR<SeancesUpdateManyMutationInput, SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesInput>
  }

  export type SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice3_idToExercicesInput = {
    where: SeancesWhereUniqueInput
    update: XOR<SeancesUpdateWithoutExercices_Seances_Exercice3_idToExercicesInput, SeancesUncheckedUpdateWithoutExercices_Seances_Exercice3_idToExercicesInput>
    create: XOR<SeancesCreateWithoutExercices_Seances_Exercice3_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice3_idToExercicesInput>
  }

  export type SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice3_idToExercicesInput = {
    where: SeancesWhereUniqueInput
    data: XOR<SeancesUpdateWithoutExercices_Seances_Exercice3_idToExercicesInput, SeancesUncheckedUpdateWithoutExercices_Seances_Exercice3_idToExercicesInput>
  }

  export type SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice3_idToExercicesInput = {
    where: SeancesScalarWhereInput
    data: XOR<SeancesUpdateManyMutationInput, SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesInput>
  }

  export type SeancesUpsertWithWhereUniqueWithoutExercices_Seances_Exercice4_idToExercicesInput = {
    where: SeancesWhereUniqueInput
    update: XOR<SeancesUpdateWithoutExercices_Seances_Exercice4_idToExercicesInput, SeancesUncheckedUpdateWithoutExercices_Seances_Exercice4_idToExercicesInput>
    create: XOR<SeancesCreateWithoutExercices_Seances_Exercice4_idToExercicesInput, SeancesUncheckedCreateWithoutExercices_Seances_Exercice4_idToExercicesInput>
  }

  export type SeancesUpdateWithWhereUniqueWithoutExercices_Seances_Exercice4_idToExercicesInput = {
    where: SeancesWhereUniqueInput
    data: XOR<SeancesUpdateWithoutExercices_Seances_Exercice4_idToExercicesInput, SeancesUncheckedUpdateWithoutExercices_Seances_Exercice4_idToExercicesInput>
  }

  export type SeancesUpdateManyWithWhereWithoutExercices_Seances_Exercice4_idToExercicesInput = {
    where: SeancesScalarWhereInput
    data: XOR<SeancesUpdateManyMutationInput, SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesInput>
  }

  export type Objectif_SanteCreateWithoutHistorique_SanteInput = {
    Objectif_Nombre_pas: number
    Objectif_Poids: number
    Objectif_Sommeil: number
    Objectif_Eau: number
    Sante?: SanteCreateNestedManyWithoutObjectif_SanteInput
  }

  export type Objectif_SanteUncheckedCreateWithoutHistorique_SanteInput = {
    Objectif_Sante_id?: number
    Objectif_Nombre_pas: number
    Objectif_Poids: number
    Objectif_Sommeil: number
    Objectif_Eau: number
    Sante?: SanteUncheckedCreateNestedManyWithoutObjectif_SanteInput
  }

  export type Objectif_SanteCreateOrConnectWithoutHistorique_SanteInput = {
    where: Objectif_SanteWhereUniqueInput
    create: XOR<Objectif_SanteCreateWithoutHistorique_SanteInput, Objectif_SanteUncheckedCreateWithoutHistorique_SanteInput>
  }

  export type Objectif_SanteUpsertWithoutHistorique_SanteInput = {
    update: XOR<Objectif_SanteUpdateWithoutHistorique_SanteInput, Objectif_SanteUncheckedUpdateWithoutHistorique_SanteInput>
    create: XOR<Objectif_SanteCreateWithoutHistorique_SanteInput, Objectif_SanteUncheckedCreateWithoutHistorique_SanteInput>
    where?: Objectif_SanteWhereInput
  }

  export type Objectif_SanteUpdateToOneWithWhereWithoutHistorique_SanteInput = {
    where?: Objectif_SanteWhereInput
    data: XOR<Objectif_SanteUpdateWithoutHistorique_SanteInput, Objectif_SanteUncheckedUpdateWithoutHistorique_SanteInput>
  }

  export type Objectif_SanteUpdateWithoutHistorique_SanteInput = {
    Objectif_Nombre_pas?: IntFieldUpdateOperationsInput | number
    Objectif_Poids?: IntFieldUpdateOperationsInput | number
    Objectif_Sommeil?: IntFieldUpdateOperationsInput | number
    Objectif_Eau?: IntFieldUpdateOperationsInput | number
    Sante?: SanteUpdateManyWithoutObjectif_SanteNestedInput
  }

  export type Objectif_SanteUncheckedUpdateWithoutHistorique_SanteInput = {
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Nombre_pas?: IntFieldUpdateOperationsInput | number
    Objectif_Poids?: IntFieldUpdateOperationsInput | number
    Objectif_Sommeil?: IntFieldUpdateOperationsInput | number
    Objectif_Eau?: IntFieldUpdateOperationsInput | number
    Sante?: SanteUncheckedUpdateManyWithoutObjectif_SanteNestedInput
  }

  export type UtilisateurCreateWithoutHistorique_SportInput = {
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput
    Sante: SanteCreateNestedOneWithoutUtilisateurInput
    Sport_Utilisateur_Objectif_Sport_idToSport: SportCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation: AlimentationCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
  }

  export type UtilisateurUncheckedCreateWithoutHistorique_SportInput = {
    Utilisateur_id?: number
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Objectif_Sante_id: number
    Objectif_Sport_id: number
    Objectif_Alimentaire_id: number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUncheckedCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUncheckedCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutHistorique_SportInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutHistorique_SportInput, UtilisateurUncheckedCreateWithoutHistorique_SportInput>
  }

  export type ExercicesCreateWithoutHistorique_SportInput = {
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
    Seances_Seances_Exercice1_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice1_idToExercicesInput
    Seances_Seances_Exercice2_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice2_idToExercicesInput
    Seances_Seances_Exercice3_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice3_idToExercicesInput
    Seances_Seances_Exercice4_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice4_idToExercicesInput
  }

  export type ExercicesUncheckedCreateWithoutHistorique_SportInput = {
    Exercice_id?: number
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
    Seances_Seances_Exercice1_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice1_idToExercicesInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice2_idToExercicesInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice3_idToExercicesInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice4_idToExercicesInput
  }

  export type ExercicesCreateOrConnectWithoutHistorique_SportInput = {
    where: ExercicesWhereUniqueInput
    create: XOR<ExercicesCreateWithoutHistorique_SportInput, ExercicesUncheckedCreateWithoutHistorique_SportInput>
  }

  export type UtilisateurUpsertWithoutHistorique_SportInput = {
    update: XOR<UtilisateurUpdateWithoutHistorique_SportInput, UtilisateurUncheckedUpdateWithoutHistorique_SportInput>
    create: XOR<UtilisateurCreateWithoutHistorique_SportInput, UtilisateurUncheckedCreateWithoutHistorique_SportInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutHistorique_SportInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutHistorique_SportInput, UtilisateurUncheckedUpdateWithoutHistorique_SportInput>
  }

  export type UtilisateurUpdateWithoutHistorique_SportInput = {
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput
    Sante?: SanteUpdateOneRequiredWithoutUtilisateurNestedInput
    Sport_Utilisateur_Objectif_Sport_idToSport?: SportUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportNestedInput
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation?: AlimentationUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutHistorique_SportInput = {
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Sport_id?: IntFieldUpdateOperationsInput | number
    Objectif_Alimentaire_id?: IntFieldUpdateOperationsInput | number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUncheckedUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUncheckedUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput
  }

  export type ExercicesUpsertWithoutHistorique_SportInput = {
    update: XOR<ExercicesUpdateWithoutHistorique_SportInput, ExercicesUncheckedUpdateWithoutHistorique_SportInput>
    create: XOR<ExercicesCreateWithoutHistorique_SportInput, ExercicesUncheckedCreateWithoutHistorique_SportInput>
    where?: ExercicesWhereInput
  }

  export type ExercicesUpdateToOneWithWhereWithoutHistorique_SportInput = {
    where?: ExercicesWhereInput
    data: XOR<ExercicesUpdateWithoutHistorique_SportInput, ExercicesUncheckedUpdateWithoutHistorique_SportInput>
  }

  export type ExercicesUpdateWithoutHistorique_SportInput = {
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
    Seances_Seances_Exercice1_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesNestedInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesNestedInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesNestedInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesNestedInput
  }

  export type ExercicesUncheckedUpdateWithoutHistorique_SportInput = {
    Exercice_id?: IntFieldUpdateOperationsInput | number
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
    Seances_Seances_Exercice1_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesNestedInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesNestedInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesNestedInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesNestedInput
  }

  export type Historique_SanteCreateWithoutObjectif_SanteInput = {
    Poids: number
    Date: Date | string
    Nombre_pas: number
    Sommeil: number
    Eau: number
  }

  export type Historique_SanteUncheckedCreateWithoutObjectif_SanteInput = {
    Historique_Sante_id?: number
    Poids: number
    Date: Date | string
    Nombre_pas: number
    Sommeil: number
    Eau: number
  }

  export type Historique_SanteCreateOrConnectWithoutObjectif_SanteInput = {
    where: Historique_SanteWhereUniqueInput
    create: XOR<Historique_SanteCreateWithoutObjectif_SanteInput, Historique_SanteUncheckedCreateWithoutObjectif_SanteInput>
  }

  export type Historique_SanteCreateManyObjectif_SanteInputEnvelope = {
    data: Historique_SanteCreateManyObjectif_SanteInput | Historique_SanteCreateManyObjectif_SanteInput[]
    skipDuplicates?: boolean
  }

  export type SanteCreateWithoutObjectif_SanteInput = {
    Utilisateur?: UtilisateurCreateNestedManyWithoutSanteInput
  }

  export type SanteUncheckedCreateWithoutObjectif_SanteInput = {
    Sante_id?: number
    Utilisateur?: UtilisateurUncheckedCreateNestedManyWithoutSanteInput
  }

  export type SanteCreateOrConnectWithoutObjectif_SanteInput = {
    where: SanteWhereUniqueInput
    create: XOR<SanteCreateWithoutObjectif_SanteInput, SanteUncheckedCreateWithoutObjectif_SanteInput>
  }

  export type SanteCreateManyObjectif_SanteInputEnvelope = {
    data: SanteCreateManyObjectif_SanteInput | SanteCreateManyObjectif_SanteInput[]
    skipDuplicates?: boolean
  }

  export type Historique_SanteUpsertWithWhereUniqueWithoutObjectif_SanteInput = {
    where: Historique_SanteWhereUniqueInput
    update: XOR<Historique_SanteUpdateWithoutObjectif_SanteInput, Historique_SanteUncheckedUpdateWithoutObjectif_SanteInput>
    create: XOR<Historique_SanteCreateWithoutObjectif_SanteInput, Historique_SanteUncheckedCreateWithoutObjectif_SanteInput>
  }

  export type Historique_SanteUpdateWithWhereUniqueWithoutObjectif_SanteInput = {
    where: Historique_SanteWhereUniqueInput
    data: XOR<Historique_SanteUpdateWithoutObjectif_SanteInput, Historique_SanteUncheckedUpdateWithoutObjectif_SanteInput>
  }

  export type Historique_SanteUpdateManyWithWhereWithoutObjectif_SanteInput = {
    where: Historique_SanteScalarWhereInput
    data: XOR<Historique_SanteUpdateManyMutationInput, Historique_SanteUncheckedUpdateManyWithoutObjectif_SanteInput>
  }

  export type Historique_SanteScalarWhereInput = {
    AND?: Historique_SanteScalarWhereInput | Historique_SanteScalarWhereInput[]
    OR?: Historique_SanteScalarWhereInput[]
    NOT?: Historique_SanteScalarWhereInput | Historique_SanteScalarWhereInput[]
    Historique_Sante_id?: IntFilter<"Historique_Sante"> | number
    Objectif_Sante_id?: IntFilter<"Historique_Sante"> | number
    Poids?: IntFilter<"Historique_Sante"> | number
    Date?: DateTimeFilter<"Historique_Sante"> | Date | string
    Nombre_pas?: IntFilter<"Historique_Sante"> | number
    Sommeil?: IntFilter<"Historique_Sante"> | number
    Eau?: IntFilter<"Historique_Sante"> | number
  }

  export type SanteUpsertWithWhereUniqueWithoutObjectif_SanteInput = {
    where: SanteWhereUniqueInput
    update: XOR<SanteUpdateWithoutObjectif_SanteInput, SanteUncheckedUpdateWithoutObjectif_SanteInput>
    create: XOR<SanteCreateWithoutObjectif_SanteInput, SanteUncheckedCreateWithoutObjectif_SanteInput>
  }

  export type SanteUpdateWithWhereUniqueWithoutObjectif_SanteInput = {
    where: SanteWhereUniqueInput
    data: XOR<SanteUpdateWithoutObjectif_SanteInput, SanteUncheckedUpdateWithoutObjectif_SanteInput>
  }

  export type SanteUpdateManyWithWhereWithoutObjectif_SanteInput = {
    where: SanteScalarWhereInput
    data: XOR<SanteUpdateManyMutationInput, SanteUncheckedUpdateManyWithoutObjectif_SanteInput>
  }

  export type SanteScalarWhereInput = {
    AND?: SanteScalarWhereInput | SanteScalarWhereInput[]
    OR?: SanteScalarWhereInput[]
    NOT?: SanteScalarWhereInput | SanteScalarWhereInput[]
    Sante_id?: IntFilter<"Sante"> | number
    Objectif_Sante_id?: IntFilter<"Sante"> | number
  }

  export type AlimentCreateWithoutRepas_Aliment_Repas_idToRepasInput = {
    Aliment_Type: string
    Aliments_indesirable?: Aliments_indesirableCreateNestedManyWithoutAlimentInput
    Repas_Repas_Aliment_idToAliment?: RepasCreateNestedManyWithoutAliment_Repas_Aliment_idToAlimentInput
  }

  export type AlimentUncheckedCreateWithoutRepas_Aliment_Repas_idToRepasInput = {
    Aliment_id?: number
    Aliment_Type: string
    Aliments_indesirable?: Aliments_indesirableUncheckedCreateNestedManyWithoutAlimentInput
    Repas_Repas_Aliment_idToAliment?: RepasUncheckedCreateNestedManyWithoutAliment_Repas_Aliment_idToAlimentInput
  }

  export type AlimentCreateOrConnectWithoutRepas_Aliment_Repas_idToRepasInput = {
    where: AlimentWhereUniqueInput
    create: XOR<AlimentCreateWithoutRepas_Aliment_Repas_idToRepasInput, AlimentUncheckedCreateWithoutRepas_Aliment_Repas_idToRepasInput>
  }

  export type AlimentCreateManyRepas_Aliment_Repas_idToRepasInputEnvelope = {
    data: AlimentCreateManyRepas_Aliment_Repas_idToRepasInput | AlimentCreateManyRepas_Aliment_Repas_idToRepasInput[]
    skipDuplicates?: boolean
  }

  export type AlimentCreateWithoutRepas_Repas_Aliment_idToAlimentInput = {
    Aliment_Type: string
    Repas_Aliment_Repas_idToRepas: RepasCreateNestedOneWithoutAliment_Aliment_Repas_idToRepasInput
    Aliments_indesirable?: Aliments_indesirableCreateNestedManyWithoutAlimentInput
  }

  export type AlimentUncheckedCreateWithoutRepas_Repas_Aliment_idToAlimentInput = {
    Aliment_id?: number
    Repas_id: number
    Aliment_Type: string
    Aliments_indesirable?: Aliments_indesirableUncheckedCreateNestedManyWithoutAlimentInput
  }

  export type AlimentCreateOrConnectWithoutRepas_Repas_Aliment_idToAlimentInput = {
    where: AlimentWhereUniqueInput
    create: XOR<AlimentCreateWithoutRepas_Repas_Aliment_idToAlimentInput, AlimentUncheckedCreateWithoutRepas_Repas_Aliment_idToAlimentInput>
  }

  export type AlimentationCreateWithoutRepasInput = {
    Maintien_Calorique: number
    Objectif_Calorique: number
    Objectif_Proteines: number
    Objectif_Glucides: number
    Objectif_Lipides: number
    Utilisateur_Alimentation_Utilisateur_idToUtilisateur: UtilisateurCreateNestedOneWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurCreateNestedManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
  }

  export type AlimentationUncheckedCreateWithoutRepasInput = {
    Alimentation_id?: number
    Utilisateur_id: number
    Maintien_Calorique: number
    Objectif_Calorique: number
    Objectif_Proteines: number
    Objectif_Glucides: number
    Objectif_Lipides: number
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurUncheckedCreateNestedManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
  }

  export type AlimentationCreateOrConnectWithoutRepasInput = {
    where: AlimentationWhereUniqueInput
    create: XOR<AlimentationCreateWithoutRepasInput, AlimentationUncheckedCreateWithoutRepasInput>
  }

  export type AlimentUpsertWithWhereUniqueWithoutRepas_Aliment_Repas_idToRepasInput = {
    where: AlimentWhereUniqueInput
    update: XOR<AlimentUpdateWithoutRepas_Aliment_Repas_idToRepasInput, AlimentUncheckedUpdateWithoutRepas_Aliment_Repas_idToRepasInput>
    create: XOR<AlimentCreateWithoutRepas_Aliment_Repas_idToRepasInput, AlimentUncheckedCreateWithoutRepas_Aliment_Repas_idToRepasInput>
  }

  export type AlimentUpdateWithWhereUniqueWithoutRepas_Aliment_Repas_idToRepasInput = {
    where: AlimentWhereUniqueInput
    data: XOR<AlimentUpdateWithoutRepas_Aliment_Repas_idToRepasInput, AlimentUncheckedUpdateWithoutRepas_Aliment_Repas_idToRepasInput>
  }

  export type AlimentUpdateManyWithWhereWithoutRepas_Aliment_Repas_idToRepasInput = {
    where: AlimentScalarWhereInput
    data: XOR<AlimentUpdateManyMutationInput, AlimentUncheckedUpdateManyWithoutRepas_Aliment_Repas_idToRepasInput>
  }

  export type AlimentScalarWhereInput = {
    AND?: AlimentScalarWhereInput | AlimentScalarWhereInput[]
    OR?: AlimentScalarWhereInput[]
    NOT?: AlimentScalarWhereInput | AlimentScalarWhereInput[]
    Aliment_id?: IntFilter<"Aliment"> | number
    Repas_id?: IntFilter<"Aliment"> | number
    Aliment_Type?: StringFilter<"Aliment"> | string
  }

  export type AlimentUpsertWithoutRepas_Repas_Aliment_idToAlimentInput = {
    update: XOR<AlimentUpdateWithoutRepas_Repas_Aliment_idToAlimentInput, AlimentUncheckedUpdateWithoutRepas_Repas_Aliment_idToAlimentInput>
    create: XOR<AlimentCreateWithoutRepas_Repas_Aliment_idToAlimentInput, AlimentUncheckedCreateWithoutRepas_Repas_Aliment_idToAlimentInput>
    where?: AlimentWhereInput
  }

  export type AlimentUpdateToOneWithWhereWithoutRepas_Repas_Aliment_idToAlimentInput = {
    where?: AlimentWhereInput
    data: XOR<AlimentUpdateWithoutRepas_Repas_Aliment_idToAlimentInput, AlimentUncheckedUpdateWithoutRepas_Repas_Aliment_idToAlimentInput>
  }

  export type AlimentUpdateWithoutRepas_Repas_Aliment_idToAlimentInput = {
    Aliment_Type?: StringFieldUpdateOperationsInput | string
    Repas_Aliment_Repas_idToRepas?: RepasUpdateOneRequiredWithoutAliment_Aliment_Repas_idToRepasNestedInput
    Aliments_indesirable?: Aliments_indesirableUpdateManyWithoutAlimentNestedInput
  }

  export type AlimentUncheckedUpdateWithoutRepas_Repas_Aliment_idToAlimentInput = {
    Aliment_id?: IntFieldUpdateOperationsInput | number
    Repas_id?: IntFieldUpdateOperationsInput | number
    Aliment_Type?: StringFieldUpdateOperationsInput | string
    Aliments_indesirable?: Aliments_indesirableUncheckedUpdateManyWithoutAlimentNestedInput
  }

  export type AlimentationUpsertWithoutRepasInput = {
    update: XOR<AlimentationUpdateWithoutRepasInput, AlimentationUncheckedUpdateWithoutRepasInput>
    create: XOR<AlimentationCreateWithoutRepasInput, AlimentationUncheckedCreateWithoutRepasInput>
    where?: AlimentationWhereInput
  }

  export type AlimentationUpdateToOneWithWhereWithoutRepasInput = {
    where?: AlimentationWhereInput
    data: XOR<AlimentationUpdateWithoutRepasInput, AlimentationUncheckedUpdateWithoutRepasInput>
  }

  export type AlimentationUpdateWithoutRepasInput = {
    Maintien_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Proteines?: IntFieldUpdateOperationsInput | number
    Objectif_Glucides?: IntFieldUpdateOperationsInput | number
    Objectif_Lipides?: IntFieldUpdateOperationsInput | number
    Utilisateur_Alimentation_Utilisateur_idToUtilisateur?: UtilisateurUpdateOneRequiredWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurUpdateManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput
  }

  export type AlimentationUncheckedUpdateWithoutRepasInput = {
    Alimentation_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Maintien_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Proteines?: IntFieldUpdateOperationsInput | number
    Objectif_Glucides?: IntFieldUpdateOperationsInput | number
    Objectif_Lipides?: IntFieldUpdateOperationsInput | number
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurUncheckedUpdateManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput
  }

  export type Objectif_SanteCreateWithoutSanteInput = {
    Objectif_Nombre_pas: number
    Objectif_Poids: number
    Objectif_Sommeil: number
    Objectif_Eau: number
    Historique_Sante?: Historique_SanteCreateNestedManyWithoutObjectif_SanteInput
  }

  export type Objectif_SanteUncheckedCreateWithoutSanteInput = {
    Objectif_Sante_id?: number
    Objectif_Nombre_pas: number
    Objectif_Poids: number
    Objectif_Sommeil: number
    Objectif_Eau: number
    Historique_Sante?: Historique_SanteUncheckedCreateNestedManyWithoutObjectif_SanteInput
  }

  export type Objectif_SanteCreateOrConnectWithoutSanteInput = {
    where: Objectif_SanteWhereUniqueInput
    create: XOR<Objectif_SanteCreateWithoutSanteInput, Objectif_SanteUncheckedCreateWithoutSanteInput>
  }

  export type UtilisateurCreateWithoutSanteInput = {
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput
    Historique_Sport?: Historique_SportCreateNestedManyWithoutUtilisateurInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput
    Sport_Utilisateur_Objectif_Sport_idToSport: SportCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation: AlimentationCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
  }

  export type UtilisateurUncheckedCreateWithoutSanteInput = {
    Utilisateur_id?: number
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Objectif_Sport_id: number
    Objectif_Alimentaire_id: number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUncheckedCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput
    Historique_Sport?: Historique_SportUncheckedCreateNestedManyWithoutUtilisateurInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUncheckedCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutSanteInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutSanteInput, UtilisateurUncheckedCreateWithoutSanteInput>
  }

  export type UtilisateurCreateManySanteInputEnvelope = {
    data: UtilisateurCreateManySanteInput | UtilisateurCreateManySanteInput[]
    skipDuplicates?: boolean
  }

  export type Objectif_SanteUpsertWithoutSanteInput = {
    update: XOR<Objectif_SanteUpdateWithoutSanteInput, Objectif_SanteUncheckedUpdateWithoutSanteInput>
    create: XOR<Objectif_SanteCreateWithoutSanteInput, Objectif_SanteUncheckedCreateWithoutSanteInput>
    where?: Objectif_SanteWhereInput
  }

  export type Objectif_SanteUpdateToOneWithWhereWithoutSanteInput = {
    where?: Objectif_SanteWhereInput
    data: XOR<Objectif_SanteUpdateWithoutSanteInput, Objectif_SanteUncheckedUpdateWithoutSanteInput>
  }

  export type Objectif_SanteUpdateWithoutSanteInput = {
    Objectif_Nombre_pas?: IntFieldUpdateOperationsInput | number
    Objectif_Poids?: IntFieldUpdateOperationsInput | number
    Objectif_Sommeil?: IntFieldUpdateOperationsInput | number
    Objectif_Eau?: IntFieldUpdateOperationsInput | number
    Historique_Sante?: Historique_SanteUpdateManyWithoutObjectif_SanteNestedInput
  }

  export type Objectif_SanteUncheckedUpdateWithoutSanteInput = {
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Nombre_pas?: IntFieldUpdateOperationsInput | number
    Objectif_Poids?: IntFieldUpdateOperationsInput | number
    Objectif_Sommeil?: IntFieldUpdateOperationsInput | number
    Objectif_Eau?: IntFieldUpdateOperationsInput | number
    Historique_Sante?: Historique_SanteUncheckedUpdateManyWithoutObjectif_SanteNestedInput
  }

  export type UtilisateurUpsertWithWhereUniqueWithoutSanteInput = {
    where: UtilisateurWhereUniqueInput
    update: XOR<UtilisateurUpdateWithoutSanteInput, UtilisateurUncheckedUpdateWithoutSanteInput>
    create: XOR<UtilisateurCreateWithoutSanteInput, UtilisateurUncheckedCreateWithoutSanteInput>
  }

  export type UtilisateurUpdateWithWhereUniqueWithoutSanteInput = {
    where: UtilisateurWhereUniqueInput
    data: XOR<UtilisateurUpdateWithoutSanteInput, UtilisateurUncheckedUpdateWithoutSanteInput>
  }

  export type UtilisateurUpdateManyWithWhereWithoutSanteInput = {
    where: UtilisateurScalarWhereInput
    data: XOR<UtilisateurUpdateManyMutationInput, UtilisateurUncheckedUpdateManyWithoutSanteInput>
  }

  export type ExercicesCreateWithoutSeances_Seances_Exercice1_idToExercicesInput = {
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
    Historique_Sport?: Historique_SportCreateNestedManyWithoutExercicesInput
    Seances_Seances_Exercice2_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice2_idToExercicesInput
    Seances_Seances_Exercice3_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice3_idToExercicesInput
    Seances_Seances_Exercice4_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice4_idToExercicesInput
  }

  export type ExercicesUncheckedCreateWithoutSeances_Seances_Exercice1_idToExercicesInput = {
    Exercice_id?: number
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
    Historique_Sport?: Historique_SportUncheckedCreateNestedManyWithoutExercicesInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice2_idToExercicesInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice3_idToExercicesInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice4_idToExercicesInput
  }

  export type ExercicesCreateOrConnectWithoutSeances_Seances_Exercice1_idToExercicesInput = {
    where: ExercicesWhereUniqueInput
    create: XOR<ExercicesCreateWithoutSeances_Seances_Exercice1_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice1_idToExercicesInput>
  }

  export type ExercicesCreateWithoutSeances_Seances_Exercice2_idToExercicesInput = {
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
    Historique_Sport?: Historique_SportCreateNestedManyWithoutExercicesInput
    Seances_Seances_Exercice1_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice1_idToExercicesInput
    Seances_Seances_Exercice3_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice3_idToExercicesInput
    Seances_Seances_Exercice4_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice4_idToExercicesInput
  }

  export type ExercicesUncheckedCreateWithoutSeances_Seances_Exercice2_idToExercicesInput = {
    Exercice_id?: number
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
    Historique_Sport?: Historique_SportUncheckedCreateNestedManyWithoutExercicesInput
    Seances_Seances_Exercice1_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice1_idToExercicesInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice3_idToExercicesInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice4_idToExercicesInput
  }

  export type ExercicesCreateOrConnectWithoutSeances_Seances_Exercice2_idToExercicesInput = {
    where: ExercicesWhereUniqueInput
    create: XOR<ExercicesCreateWithoutSeances_Seances_Exercice2_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice2_idToExercicesInput>
  }

  export type ExercicesCreateWithoutSeances_Seances_Exercice3_idToExercicesInput = {
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
    Historique_Sport?: Historique_SportCreateNestedManyWithoutExercicesInput
    Seances_Seances_Exercice1_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice1_idToExercicesInput
    Seances_Seances_Exercice2_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice2_idToExercicesInput
    Seances_Seances_Exercice4_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice4_idToExercicesInput
  }

  export type ExercicesUncheckedCreateWithoutSeances_Seances_Exercice3_idToExercicesInput = {
    Exercice_id?: number
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
    Historique_Sport?: Historique_SportUncheckedCreateNestedManyWithoutExercicesInput
    Seances_Seances_Exercice1_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice1_idToExercicesInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice2_idToExercicesInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice4_idToExercicesInput
  }

  export type ExercicesCreateOrConnectWithoutSeances_Seances_Exercice3_idToExercicesInput = {
    where: ExercicesWhereUniqueInput
    create: XOR<ExercicesCreateWithoutSeances_Seances_Exercice3_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice3_idToExercicesInput>
  }

  export type ExercicesCreateWithoutSeances_Seances_Exercice4_idToExercicesInput = {
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
    Historique_Sport?: Historique_SportCreateNestedManyWithoutExercicesInput
    Seances_Seances_Exercice1_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice1_idToExercicesInput
    Seances_Seances_Exercice2_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice2_idToExercicesInput
    Seances_Seances_Exercice3_idToExercices?: SeancesCreateNestedManyWithoutExercices_Seances_Exercice3_idToExercicesInput
  }

  export type ExercicesUncheckedCreateWithoutSeances_Seances_Exercice4_idToExercicesInput = {
    Exercice_id?: number
    Exercice_nom: string
    Exercice_type: string
    Temps_repos: number
    Repetitions_Serie1: number
    Repetitions_Serie2: number
    Repetitions_Serie3: number
    Repetitions_Serie4: number
    Exercice_Description: string
    Historique_Sport?: Historique_SportUncheckedCreateNestedManyWithoutExercicesInput
    Seances_Seances_Exercice1_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice1_idToExercicesInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice2_idToExercicesInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUncheckedCreateNestedManyWithoutExercices_Seances_Exercice3_idToExercicesInput
  }

  export type ExercicesCreateOrConnectWithoutSeances_Seances_Exercice4_idToExercicesInput = {
    where: ExercicesWhereUniqueInput
    create: XOR<ExercicesCreateWithoutSeances_Seances_Exercice4_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice4_idToExercicesInput>
  }

  export type SportCreateWithoutSeancesInput = {
    Niveau_Sport: string
    Objectif_Sport: number
    Utilisateur_Sport_Utilisateur_idToUtilisateur: UtilisateurCreateNestedOneWithoutSport_Sport_Utilisateur_idToUtilisateurInput
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurCreateNestedManyWithoutSport_Utilisateur_Objectif_Sport_idToSportInput
  }

  export type SportUncheckedCreateWithoutSeancesInput = {
    Sport_id?: number
    Niveau_Sport: string
    Objectif_Sport: number
    Utilisateur_id: number
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurUncheckedCreateNestedManyWithoutSport_Utilisateur_Objectif_Sport_idToSportInput
  }

  export type SportCreateOrConnectWithoutSeancesInput = {
    where: SportWhereUniqueInput
    create: XOR<SportCreateWithoutSeancesInput, SportUncheckedCreateWithoutSeancesInput>
  }

  export type SportCreateManySeancesInputEnvelope = {
    data: SportCreateManySeancesInput | SportCreateManySeancesInput[]
    skipDuplicates?: boolean
  }

  export type ExercicesUpsertWithoutSeances_Seances_Exercice1_idToExercicesInput = {
    update: XOR<ExercicesUpdateWithoutSeances_Seances_Exercice1_idToExercicesInput, ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice1_idToExercicesInput>
    create: XOR<ExercicesCreateWithoutSeances_Seances_Exercice1_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice1_idToExercicesInput>
    where?: ExercicesWhereInput
  }

  export type ExercicesUpdateToOneWithWhereWithoutSeances_Seances_Exercice1_idToExercicesInput = {
    where?: ExercicesWhereInput
    data: XOR<ExercicesUpdateWithoutSeances_Seances_Exercice1_idToExercicesInput, ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice1_idToExercicesInput>
  }

  export type ExercicesUpdateWithoutSeances_Seances_Exercice1_idToExercicesInput = {
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
    Historique_Sport?: Historique_SportUpdateManyWithoutExercicesNestedInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesNestedInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesNestedInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesNestedInput
  }

  export type ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice1_idToExercicesInput = {
    Exercice_id?: IntFieldUpdateOperationsInput | number
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
    Historique_Sport?: Historique_SportUncheckedUpdateManyWithoutExercicesNestedInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesNestedInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesNestedInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesNestedInput
  }

  export type ExercicesUpsertWithoutSeances_Seances_Exercice2_idToExercicesInput = {
    update: XOR<ExercicesUpdateWithoutSeances_Seances_Exercice2_idToExercicesInput, ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice2_idToExercicesInput>
    create: XOR<ExercicesCreateWithoutSeances_Seances_Exercice2_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice2_idToExercicesInput>
    where?: ExercicesWhereInput
  }

  export type ExercicesUpdateToOneWithWhereWithoutSeances_Seances_Exercice2_idToExercicesInput = {
    where?: ExercicesWhereInput
    data: XOR<ExercicesUpdateWithoutSeances_Seances_Exercice2_idToExercicesInput, ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice2_idToExercicesInput>
  }

  export type ExercicesUpdateWithoutSeances_Seances_Exercice2_idToExercicesInput = {
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
    Historique_Sport?: Historique_SportUpdateManyWithoutExercicesNestedInput
    Seances_Seances_Exercice1_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesNestedInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesNestedInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesNestedInput
  }

  export type ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice2_idToExercicesInput = {
    Exercice_id?: IntFieldUpdateOperationsInput | number
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
    Historique_Sport?: Historique_SportUncheckedUpdateManyWithoutExercicesNestedInput
    Seances_Seances_Exercice1_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesNestedInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesNestedInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesNestedInput
  }

  export type ExercicesUpsertWithoutSeances_Seances_Exercice3_idToExercicesInput = {
    update: XOR<ExercicesUpdateWithoutSeances_Seances_Exercice3_idToExercicesInput, ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice3_idToExercicesInput>
    create: XOR<ExercicesCreateWithoutSeances_Seances_Exercice3_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice3_idToExercicesInput>
    where?: ExercicesWhereInput
  }

  export type ExercicesUpdateToOneWithWhereWithoutSeances_Seances_Exercice3_idToExercicesInput = {
    where?: ExercicesWhereInput
    data: XOR<ExercicesUpdateWithoutSeances_Seances_Exercice3_idToExercicesInput, ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice3_idToExercicesInput>
  }

  export type ExercicesUpdateWithoutSeances_Seances_Exercice3_idToExercicesInput = {
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
    Historique_Sport?: Historique_SportUpdateManyWithoutExercicesNestedInput
    Seances_Seances_Exercice1_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesNestedInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesNestedInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesNestedInput
  }

  export type ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice3_idToExercicesInput = {
    Exercice_id?: IntFieldUpdateOperationsInput | number
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
    Historique_Sport?: Historique_SportUncheckedUpdateManyWithoutExercicesNestedInput
    Seances_Seances_Exercice1_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesNestedInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesNestedInput
    Seances_Seances_Exercice4_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesNestedInput
  }

  export type ExercicesUpsertWithoutSeances_Seances_Exercice4_idToExercicesInput = {
    update: XOR<ExercicesUpdateWithoutSeances_Seances_Exercice4_idToExercicesInput, ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice4_idToExercicesInput>
    create: XOR<ExercicesCreateWithoutSeances_Seances_Exercice4_idToExercicesInput, ExercicesUncheckedCreateWithoutSeances_Seances_Exercice4_idToExercicesInput>
    where?: ExercicesWhereInput
  }

  export type ExercicesUpdateToOneWithWhereWithoutSeances_Seances_Exercice4_idToExercicesInput = {
    where?: ExercicesWhereInput
    data: XOR<ExercicesUpdateWithoutSeances_Seances_Exercice4_idToExercicesInput, ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice4_idToExercicesInput>
  }

  export type ExercicesUpdateWithoutSeances_Seances_Exercice4_idToExercicesInput = {
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
    Historique_Sport?: Historique_SportUpdateManyWithoutExercicesNestedInput
    Seances_Seances_Exercice1_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesNestedInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesNestedInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesNestedInput
  }

  export type ExercicesUncheckedUpdateWithoutSeances_Seances_Exercice4_idToExercicesInput = {
    Exercice_id?: IntFieldUpdateOperationsInput | number
    Exercice_nom?: StringFieldUpdateOperationsInput | string
    Exercice_type?: StringFieldUpdateOperationsInput | string
    Temps_repos?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie1?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie2?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie3?: IntFieldUpdateOperationsInput | number
    Repetitions_Serie4?: IntFieldUpdateOperationsInput | number
    Exercice_Description?: StringFieldUpdateOperationsInput | string
    Historique_Sport?: Historique_SportUncheckedUpdateManyWithoutExercicesNestedInput
    Seances_Seances_Exercice1_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesNestedInput
    Seances_Seances_Exercice2_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesNestedInput
    Seances_Seances_Exercice3_idToExercices?: SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesNestedInput
  }

  export type SportUpsertWithWhereUniqueWithoutSeancesInput = {
    where: SportWhereUniqueInput
    update: XOR<SportUpdateWithoutSeancesInput, SportUncheckedUpdateWithoutSeancesInput>
    create: XOR<SportCreateWithoutSeancesInput, SportUncheckedCreateWithoutSeancesInput>
  }

  export type SportUpdateWithWhereUniqueWithoutSeancesInput = {
    where: SportWhereUniqueInput
    data: XOR<SportUpdateWithoutSeancesInput, SportUncheckedUpdateWithoutSeancesInput>
  }

  export type SportUpdateManyWithWhereWithoutSeancesInput = {
    where: SportScalarWhereInput
    data: XOR<SportUpdateManyMutationInput, SportUncheckedUpdateManyWithoutSeancesInput>
  }

  export type SportScalarWhereInput = {
    AND?: SportScalarWhereInput | SportScalarWhereInput[]
    OR?: SportScalarWhereInput[]
    NOT?: SportScalarWhereInput | SportScalarWhereInput[]
    Sport_id?: IntFilter<"Sport"> | number
    Niveau_Sport?: StringFilter<"Sport"> | string
    Objectif_Sport?: IntFilter<"Sport"> | number
    Seance_id?: IntFilter<"Sport"> | number
    Utilisateur_id?: IntFilter<"Sport"> | number
  }

  export type SeancesCreateWithoutSportInput = {
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
    Exercices_Seances_Exercice1_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice1_idToExercicesInput
    Exercices_Seances_Exercice2_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice2_idToExercicesInput
    Exercices_Seances_Exercice3_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice3_idToExercicesInput
    Exercices_Seances_Exercice4_idToExercices: ExercicesCreateNestedOneWithoutSeances_Seances_Exercice4_idToExercicesInput
  }

  export type SeancesUncheckedCreateWithoutSportInput = {
    Seance_id?: number
    Exercice1_id: number
    Exercice2_id: number
    Exercice3_id: number
    Exercice4_id: number
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
  }

  export type SeancesCreateOrConnectWithoutSportInput = {
    where: SeancesWhereUniqueInput
    create: XOR<SeancesCreateWithoutSportInput, SeancesUncheckedCreateWithoutSportInput>
  }

  export type UtilisateurCreateWithoutSport_Sport_Utilisateur_idToUtilisateurInput = {
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput
    Historique_Sport?: Historique_SportCreateNestedManyWithoutUtilisateurInput
    Sante: SanteCreateNestedOneWithoutUtilisateurInput
    Sport_Utilisateur_Objectif_Sport_idToSport: SportCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation: AlimentationCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
  }

  export type UtilisateurUncheckedCreateWithoutSport_Sport_Utilisateur_idToUtilisateurInput = {
    Utilisateur_id?: number
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Objectif_Sante_id: number
    Objectif_Sport_id: number
    Objectif_Alimentaire_id: number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUncheckedCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput
    Historique_Sport?: Historique_SportUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutSport_Sport_Utilisateur_idToUtilisateurInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutSport_Sport_Utilisateur_idToUtilisateurInput, UtilisateurUncheckedCreateWithoutSport_Sport_Utilisateur_idToUtilisateurInput>
  }

  export type UtilisateurCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput = {
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput
    Historique_Sport?: Historique_SportCreateNestedManyWithoutUtilisateurInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput
    Sante: SanteCreateNestedOneWithoutUtilisateurInput
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation: AlimentationCreateNestedOneWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
  }

  export type UtilisateurUncheckedCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput = {
    Utilisateur_id?: number
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Objectif_Sante_id: number
    Objectif_Alimentaire_id: number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUncheckedCreateNestedManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput
    Historique_Sport?: Historique_SportUncheckedCreateNestedManyWithoutUtilisateurInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUncheckedCreateNestedManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutSport_Utilisateur_Objectif_Sport_idToSportInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput, UtilisateurUncheckedCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput>
  }

  export type UtilisateurCreateManySport_Utilisateur_Objectif_Sport_idToSportInputEnvelope = {
    data: UtilisateurCreateManySport_Utilisateur_Objectif_Sport_idToSportInput | UtilisateurCreateManySport_Utilisateur_Objectif_Sport_idToSportInput[]
    skipDuplicates?: boolean
  }

  export type SeancesUpsertWithoutSportInput = {
    update: XOR<SeancesUpdateWithoutSportInput, SeancesUncheckedUpdateWithoutSportInput>
    create: XOR<SeancesCreateWithoutSportInput, SeancesUncheckedCreateWithoutSportInput>
    where?: SeancesWhereInput
  }

  export type SeancesUpdateToOneWithWhereWithoutSportInput = {
    where?: SeancesWhereInput
    data: XOR<SeancesUpdateWithoutSportInput, SeancesUncheckedUpdateWithoutSportInput>
  }

  export type SeancesUpdateWithoutSportInput = {
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
    Exercices_Seances_Exercice1_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice1_idToExercicesNestedInput
    Exercices_Seances_Exercice2_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice2_idToExercicesNestedInput
    Exercices_Seances_Exercice3_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice3_idToExercicesNestedInput
    Exercices_Seances_Exercice4_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice4_idToExercicesNestedInput
  }

  export type SeancesUncheckedUpdateWithoutSportInput = {
    Seance_id?: IntFieldUpdateOperationsInput | number
    Exercice1_id?: IntFieldUpdateOperationsInput | number
    Exercice2_id?: IntFieldUpdateOperationsInput | number
    Exercice3_id?: IntFieldUpdateOperationsInput | number
    Exercice4_id?: IntFieldUpdateOperationsInput | number
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
  }

  export type UtilisateurUpsertWithoutSport_Sport_Utilisateur_idToUtilisateurInput = {
    update: XOR<UtilisateurUpdateWithoutSport_Sport_Utilisateur_idToUtilisateurInput, UtilisateurUncheckedUpdateWithoutSport_Sport_Utilisateur_idToUtilisateurInput>
    create: XOR<UtilisateurCreateWithoutSport_Sport_Utilisateur_idToUtilisateurInput, UtilisateurUncheckedCreateWithoutSport_Sport_Utilisateur_idToUtilisateurInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutSport_Sport_Utilisateur_idToUtilisateurInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutSport_Sport_Utilisateur_idToUtilisateurInput, UtilisateurUncheckedUpdateWithoutSport_Sport_Utilisateur_idToUtilisateurInput>
  }

  export type UtilisateurUpdateWithoutSport_Sport_Utilisateur_idToUtilisateurInput = {
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Historique_Sport?: Historique_SportUpdateManyWithoutUtilisateurNestedInput
    Sante?: SanteUpdateOneRequiredWithoutUtilisateurNestedInput
    Sport_Utilisateur_Objectif_Sport_idToSport?: SportUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportNestedInput
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation?: AlimentationUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutSport_Sport_Utilisateur_idToUtilisateurInput = {
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Sport_id?: IntFieldUpdateOperationsInput | number
    Objectif_Alimentaire_id?: IntFieldUpdateOperationsInput | number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUncheckedUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Historique_Sport?: Historique_SportUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUpsertWithWhereUniqueWithoutSport_Utilisateur_Objectif_Sport_idToSportInput = {
    where: UtilisateurWhereUniqueInput
    update: XOR<UtilisateurUpdateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput, UtilisateurUncheckedUpdateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput>
    create: XOR<UtilisateurCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput, UtilisateurUncheckedCreateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput>
  }

  export type UtilisateurUpdateWithWhereUniqueWithoutSport_Utilisateur_Objectif_Sport_idToSportInput = {
    where: UtilisateurWhereUniqueInput
    data: XOR<UtilisateurUpdateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput, UtilisateurUncheckedUpdateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput>
  }

  export type UtilisateurUpdateManyWithWhereWithoutSport_Utilisateur_Objectif_Sport_idToSportInput = {
    where: UtilisateurScalarWhereInput
    data: XOR<UtilisateurUpdateManyMutationInput, UtilisateurUncheckedUpdateManyWithoutSport_Utilisateur_Objectif_Sport_idToSportInput>
  }

  export type AlimentationCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput = {
    Maintien_Calorique: number
    Objectif_Calorique: number
    Objectif_Proteines: number
    Objectif_Glucides: number
    Objectif_Lipides: number
    Repas?: RepasCreateNestedManyWithoutAlimentationInput
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurCreateNestedManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
  }

  export type AlimentationUncheckedCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput = {
    Alimentation_id?: number
    Maintien_Calorique: number
    Objectif_Calorique: number
    Objectif_Proteines: number
    Objectif_Glucides: number
    Objectif_Lipides: number
    Repas?: RepasUncheckedCreateNestedManyWithoutAlimentationInput
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurUncheckedCreateNestedManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput
  }

  export type AlimentationCreateOrConnectWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput = {
    where: AlimentationWhereUniqueInput
    create: XOR<AlimentationCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput, AlimentationUncheckedCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput>
  }

  export type AlimentationCreateManyUtilisateur_Alimentation_Utilisateur_idToUtilisateurInputEnvelope = {
    data: AlimentationCreateManyUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput | AlimentationCreateManyUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type Historique_SportCreateWithoutUtilisateurInput = {
    Date: Date | string
    Poids_Serie1: number
    Poids_Serie2: number
    Poids_Serie3: number
    Poids_serie4: number
    Repetitions: number
    Note: string
    Serie: number
    Exercices: ExercicesCreateNestedOneWithoutHistorique_SportInput
  }

  export type Historique_SportUncheckedCreateWithoutUtilisateurInput = {
    Historique_id?: number
    Exercice_id: number
    Date: Date | string
    Poids_Serie1: number
    Poids_Serie2: number
    Poids_Serie3: number
    Poids_serie4: number
    Repetitions: number
    Note: string
    Serie: number
  }

  export type Historique_SportCreateOrConnectWithoutUtilisateurInput = {
    where: Historique_SportWhereUniqueInput
    create: XOR<Historique_SportCreateWithoutUtilisateurInput, Historique_SportUncheckedCreateWithoutUtilisateurInput>
  }

  export type Historique_SportCreateManyUtilisateurInputEnvelope = {
    data: Historique_SportCreateManyUtilisateurInput | Historique_SportCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type SportCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput = {
    Niveau_Sport: string
    Objectif_Sport: number
    Seances: SeancesCreateNestedOneWithoutSportInput
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurCreateNestedManyWithoutSport_Utilisateur_Objectif_Sport_idToSportInput
  }

  export type SportUncheckedCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput = {
    Sport_id?: number
    Niveau_Sport: string
    Objectif_Sport: number
    Seance_id: number
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurUncheckedCreateNestedManyWithoutSport_Utilisateur_Objectif_Sport_idToSportInput
  }

  export type SportCreateOrConnectWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput = {
    where: SportWhereUniqueInput
    create: XOR<SportCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput, SportUncheckedCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput>
  }

  export type SportCreateManyUtilisateur_Sport_Utilisateur_idToUtilisateurInputEnvelope = {
    data: SportCreateManyUtilisateur_Sport_Utilisateur_idToUtilisateurInput | SportCreateManyUtilisateur_Sport_Utilisateur_idToUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type SanteCreateWithoutUtilisateurInput = {
    Objectif_Sante: Objectif_SanteCreateNestedOneWithoutSanteInput
  }

  export type SanteUncheckedCreateWithoutUtilisateurInput = {
    Sante_id?: number
    Objectif_Sante_id: number
  }

  export type SanteCreateOrConnectWithoutUtilisateurInput = {
    where: SanteWhereUniqueInput
    create: XOR<SanteCreateWithoutUtilisateurInput, SanteUncheckedCreateWithoutUtilisateurInput>
  }

  export type SportCreateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput = {
    Niveau_Sport: string
    Objectif_Sport: number
    Seances: SeancesCreateNestedOneWithoutSportInput
    Utilisateur_Sport_Utilisateur_idToUtilisateur: UtilisateurCreateNestedOneWithoutSport_Sport_Utilisateur_idToUtilisateurInput
  }

  export type SportUncheckedCreateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput = {
    Sport_id?: number
    Niveau_Sport: string
    Objectif_Sport: number
    Seance_id: number
    Utilisateur_id: number
  }

  export type SportCreateOrConnectWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput = {
    where: SportWhereUniqueInput
    create: XOR<SportCreateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput, SportUncheckedCreateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput>
  }

  export type AlimentationCreateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    Maintien_Calorique: number
    Objectif_Calorique: number
    Objectif_Proteines: number
    Objectif_Glucides: number
    Objectif_Lipides: number
    Utilisateur_Alimentation_Utilisateur_idToUtilisateur: UtilisateurCreateNestedOneWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurInput
    Repas?: RepasCreateNestedManyWithoutAlimentationInput
  }

  export type AlimentationUncheckedCreateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    Alimentation_id?: number
    Utilisateur_id: number
    Maintien_Calorique: number
    Objectif_Calorique: number
    Objectif_Proteines: number
    Objectif_Glucides: number
    Objectif_Lipides: number
    Repas?: RepasUncheckedCreateNestedManyWithoutAlimentationInput
  }

  export type AlimentationCreateOrConnectWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    where: AlimentationWhereUniqueInput
    create: XOR<AlimentationCreateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, AlimentationUncheckedCreateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput>
  }

  export type AlimentationUpsertWithWhereUniqueWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput = {
    where: AlimentationWhereUniqueInput
    update: XOR<AlimentationUpdateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput, AlimentationUncheckedUpdateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput>
    create: XOR<AlimentationCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput, AlimentationUncheckedCreateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput>
  }

  export type AlimentationUpdateWithWhereUniqueWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput = {
    where: AlimentationWhereUniqueInput
    data: XOR<AlimentationUpdateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput, AlimentationUncheckedUpdateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput>
  }

  export type AlimentationUpdateManyWithWhereWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput = {
    where: AlimentationScalarWhereInput
    data: XOR<AlimentationUpdateManyMutationInput, AlimentationUncheckedUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput>
  }

  export type AlimentationScalarWhereInput = {
    AND?: AlimentationScalarWhereInput | AlimentationScalarWhereInput[]
    OR?: AlimentationScalarWhereInput[]
    NOT?: AlimentationScalarWhereInput | AlimentationScalarWhereInput[]
    Alimentation_id?: IntFilter<"Alimentation"> | number
    Utilisateur_id?: IntFilter<"Alimentation"> | number
    Maintien_Calorique?: IntFilter<"Alimentation"> | number
    Objectif_Calorique?: IntFilter<"Alimentation"> | number
    Objectif_Proteines?: IntFilter<"Alimentation"> | number
    Objectif_Glucides?: IntFilter<"Alimentation"> | number
    Objectif_Lipides?: IntFilter<"Alimentation"> | number
  }

  export type Historique_SportUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: Historique_SportWhereUniqueInput
    update: XOR<Historique_SportUpdateWithoutUtilisateurInput, Historique_SportUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<Historique_SportCreateWithoutUtilisateurInput, Historique_SportUncheckedCreateWithoutUtilisateurInput>
  }

  export type Historique_SportUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: Historique_SportWhereUniqueInput
    data: XOR<Historique_SportUpdateWithoutUtilisateurInput, Historique_SportUncheckedUpdateWithoutUtilisateurInput>
  }

  export type Historique_SportUpdateManyWithWhereWithoutUtilisateurInput = {
    where: Historique_SportScalarWhereInput
    data: XOR<Historique_SportUpdateManyMutationInput, Historique_SportUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type SportUpsertWithWhereUniqueWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput = {
    where: SportWhereUniqueInput
    update: XOR<SportUpdateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput, SportUncheckedUpdateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput>
    create: XOR<SportCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput, SportUncheckedCreateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput>
  }

  export type SportUpdateWithWhereUniqueWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput = {
    where: SportWhereUniqueInput
    data: XOR<SportUpdateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput, SportUncheckedUpdateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput>
  }

  export type SportUpdateManyWithWhereWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput = {
    where: SportScalarWhereInput
    data: XOR<SportUpdateManyMutationInput, SportUncheckedUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput>
  }

  export type SanteUpsertWithoutUtilisateurInput = {
    update: XOR<SanteUpdateWithoutUtilisateurInput, SanteUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<SanteCreateWithoutUtilisateurInput, SanteUncheckedCreateWithoutUtilisateurInput>
    where?: SanteWhereInput
  }

  export type SanteUpdateToOneWithWhereWithoutUtilisateurInput = {
    where?: SanteWhereInput
    data: XOR<SanteUpdateWithoutUtilisateurInput, SanteUncheckedUpdateWithoutUtilisateurInput>
  }

  export type SanteUpdateWithoutUtilisateurInput = {
    Objectif_Sante?: Objectif_SanteUpdateOneRequiredWithoutSanteNestedInput
  }

  export type SanteUncheckedUpdateWithoutUtilisateurInput = {
    Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
  }

  export type SportUpsertWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput = {
    update: XOR<SportUpdateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput, SportUncheckedUpdateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput>
    create: XOR<SportCreateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput, SportUncheckedCreateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput>
    where?: SportWhereInput
  }

  export type SportUpdateToOneWithWhereWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput = {
    where?: SportWhereInput
    data: XOR<SportUpdateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput, SportUncheckedUpdateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput>
  }

  export type SportUpdateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput = {
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Objectif_Sport?: IntFieldUpdateOperationsInput | number
    Seances?: SeancesUpdateOneRequiredWithoutSportNestedInput
    Utilisateur_Sport_Utilisateur_idToUtilisateur?: UtilisateurUpdateOneRequiredWithoutSport_Sport_Utilisateur_idToUtilisateurNestedInput
  }

  export type SportUncheckedUpdateWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportInput = {
    Sport_id?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Objectif_Sport?: IntFieldUpdateOperationsInput | number
    Seance_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
  }

  export type AlimentationUpsertWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    update: XOR<AlimentationUpdateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, AlimentationUncheckedUpdateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput>
    create: XOR<AlimentationCreateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, AlimentationUncheckedCreateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput>
    where?: AlimentationWhereInput
  }

  export type AlimentationUpdateToOneWithWhereWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    where?: AlimentationWhereInput
    data: XOR<AlimentationUpdateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput, AlimentationUncheckedUpdateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput>
  }

  export type AlimentationUpdateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    Maintien_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Proteines?: IntFieldUpdateOperationsInput | number
    Objectif_Glucides?: IntFieldUpdateOperationsInput | number
    Objectif_Lipides?: IntFieldUpdateOperationsInput | number
    Utilisateur_Alimentation_Utilisateur_idToUtilisateur?: UtilisateurUpdateOneRequiredWithoutAlimentation_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Repas?: RepasUpdateManyWithoutAlimentationNestedInput
  }

  export type AlimentationUncheckedUpdateWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    Alimentation_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Maintien_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Proteines?: IntFieldUpdateOperationsInput | number
    Objectif_Glucides?: IntFieldUpdateOperationsInput | number
    Objectif_Lipides?: IntFieldUpdateOperationsInput | number
    Repas?: RepasUncheckedUpdateManyWithoutAlimentationNestedInput
  }

  export type Aliments_indesirableCreateManyAlimentInput = {
    Aliments_indesirable_id?: number
  }

  export type RepasCreateManyAliment_Repas_Aliment_idToAlimentInput = {
    Repas_id?: number
    Alimentation_id: number
    Quantite: number
    Glucides: number
    Calories: number
    Lipides: number
    Proteines: number
    Description: string
    Duree: Date | string
    Image: string
    Difficulte: string
    Saison: string
  }

  export type Aliments_indesirableUpdateWithoutAlimentInput = {

  }

  export type Aliments_indesirableUncheckedUpdateWithoutAlimentInput = {
    Aliments_indesirable_id?: IntFieldUpdateOperationsInput | number
  }

  export type Aliments_indesirableUncheckedUpdateManyWithoutAlimentInput = {
    Aliments_indesirable_id?: IntFieldUpdateOperationsInput | number
  }

  export type RepasUpdateWithoutAliment_Repas_Aliment_idToAlimentInput = {
    Quantite?: IntFieldUpdateOperationsInput | number
    Glucides?: IntFieldUpdateOperationsInput | number
    Calories?: IntFieldUpdateOperationsInput | number
    Lipides?: IntFieldUpdateOperationsInput | number
    Proteines?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
    Duree?: DateTimeFieldUpdateOperationsInput | Date | string
    Image?: StringFieldUpdateOperationsInput | string
    Difficulte?: StringFieldUpdateOperationsInput | string
    Saison?: StringFieldUpdateOperationsInput | string
    Aliment_Aliment_Repas_idToRepas?: AlimentUpdateManyWithoutRepas_Aliment_Repas_idToRepasNestedInput
    Alimentation?: AlimentationUpdateOneRequiredWithoutRepasNestedInput
  }

  export type RepasUncheckedUpdateWithoutAliment_Repas_Aliment_idToAlimentInput = {
    Repas_id?: IntFieldUpdateOperationsInput | number
    Alimentation_id?: IntFieldUpdateOperationsInput | number
    Quantite?: IntFieldUpdateOperationsInput | number
    Glucides?: IntFieldUpdateOperationsInput | number
    Calories?: IntFieldUpdateOperationsInput | number
    Lipides?: IntFieldUpdateOperationsInput | number
    Proteines?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
    Duree?: DateTimeFieldUpdateOperationsInput | Date | string
    Image?: StringFieldUpdateOperationsInput | string
    Difficulte?: StringFieldUpdateOperationsInput | string
    Saison?: StringFieldUpdateOperationsInput | string
    Aliment_Aliment_Repas_idToRepas?: AlimentUncheckedUpdateManyWithoutRepas_Aliment_Repas_idToRepasNestedInput
  }

  export type RepasUncheckedUpdateManyWithoutAliment_Repas_Aliment_idToAlimentInput = {
    Repas_id?: IntFieldUpdateOperationsInput | number
    Alimentation_id?: IntFieldUpdateOperationsInput | number
    Quantite?: IntFieldUpdateOperationsInput | number
    Glucides?: IntFieldUpdateOperationsInput | number
    Calories?: IntFieldUpdateOperationsInput | number
    Lipides?: IntFieldUpdateOperationsInput | number
    Proteines?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
    Duree?: DateTimeFieldUpdateOperationsInput | Date | string
    Image?: StringFieldUpdateOperationsInput | string
    Difficulte?: StringFieldUpdateOperationsInput | string
    Saison?: StringFieldUpdateOperationsInput | string
  }

  export type RepasCreateManyAlimentationInput = {
    Repas_id?: number
    Aliment_id: number
    Quantite: number
    Glucides: number
    Calories: number
    Lipides: number
    Proteines: number
    Description: string
    Duree: Date | string
    Image: string
    Difficulte: string
    Saison: string
  }

  export type UtilisateurCreateManyAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    Utilisateur_id?: number
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Objectif_Sante_id: number
    Objectif_Sport_id: number
  }

  export type RepasUpdateWithoutAlimentationInput = {
    Quantite?: IntFieldUpdateOperationsInput | number
    Glucides?: IntFieldUpdateOperationsInput | number
    Calories?: IntFieldUpdateOperationsInput | number
    Lipides?: IntFieldUpdateOperationsInput | number
    Proteines?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
    Duree?: DateTimeFieldUpdateOperationsInput | Date | string
    Image?: StringFieldUpdateOperationsInput | string
    Difficulte?: StringFieldUpdateOperationsInput | string
    Saison?: StringFieldUpdateOperationsInput | string
    Aliment_Aliment_Repas_idToRepas?: AlimentUpdateManyWithoutRepas_Aliment_Repas_idToRepasNestedInput
    Aliment_Repas_Aliment_idToAliment?: AlimentUpdateOneRequiredWithoutRepas_Repas_Aliment_idToAlimentNestedInput
  }

  export type RepasUncheckedUpdateWithoutAlimentationInput = {
    Repas_id?: IntFieldUpdateOperationsInput | number
    Aliment_id?: IntFieldUpdateOperationsInput | number
    Quantite?: IntFieldUpdateOperationsInput | number
    Glucides?: IntFieldUpdateOperationsInput | number
    Calories?: IntFieldUpdateOperationsInput | number
    Lipides?: IntFieldUpdateOperationsInput | number
    Proteines?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
    Duree?: DateTimeFieldUpdateOperationsInput | Date | string
    Image?: StringFieldUpdateOperationsInput | string
    Difficulte?: StringFieldUpdateOperationsInput | string
    Saison?: StringFieldUpdateOperationsInput | string
    Aliment_Aliment_Repas_idToRepas?: AlimentUncheckedUpdateManyWithoutRepas_Aliment_Repas_idToRepasNestedInput
  }

  export type RepasUncheckedUpdateManyWithoutAlimentationInput = {
    Repas_id?: IntFieldUpdateOperationsInput | number
    Aliment_id?: IntFieldUpdateOperationsInput | number
    Quantite?: IntFieldUpdateOperationsInput | number
    Glucides?: IntFieldUpdateOperationsInput | number
    Calories?: IntFieldUpdateOperationsInput | number
    Lipides?: IntFieldUpdateOperationsInput | number
    Proteines?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
    Duree?: DateTimeFieldUpdateOperationsInput | Date | string
    Image?: StringFieldUpdateOperationsInput | string
    Difficulte?: StringFieldUpdateOperationsInput | string
    Saison?: StringFieldUpdateOperationsInput | string
  }

  export type UtilisateurUpdateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Historique_Sport?: Historique_SportUpdateManyWithoutUtilisateurNestedInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput
    Sante?: SanteUpdateOneRequiredWithoutUtilisateurNestedInput
    Sport_Utilisateur_Objectif_Sport_idToSport?: SportUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Sport_id?: IntFieldUpdateOperationsInput | number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUncheckedUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Historique_Sport?: Historique_SportUncheckedUpdateManyWithoutUtilisateurNestedInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUncheckedUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationInput = {
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Sport_id?: IntFieldUpdateOperationsInput | number
  }

  export type Historique_SportCreateManyExercicesInput = {
    Historique_id?: number
    Utilisateur_id: number
    Date: Date | string
    Poids_Serie1: number
    Poids_Serie2: number
    Poids_Serie3: number
    Poids_serie4: number
    Repetitions: number
    Note: string
    Serie: number
  }

  export type SeancesCreateManyExercices_Seances_Exercice1_idToExercicesInput = {
    Seance_id?: number
    Exercice2_id: number
    Exercice3_id: number
    Exercice4_id: number
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
  }

  export type SeancesCreateManyExercices_Seances_Exercice2_idToExercicesInput = {
    Seance_id?: number
    Exercice1_id: number
    Exercice3_id: number
    Exercice4_id: number
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
  }

  export type SeancesCreateManyExercices_Seances_Exercice3_idToExercicesInput = {
    Seance_id?: number
    Exercice1_id: number
    Exercice2_id: number
    Exercice4_id: number
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
  }

  export type SeancesCreateManyExercices_Seances_Exercice4_idToExercicesInput = {
    Seance_id?: number
    Exercice1_id: number
    Exercice2_id: number
    Exercice3_id: number
    Nombre_Points_Seance: number
    Commentaire: string
    Nom_Seances: string
  }

  export type Historique_SportUpdateWithoutExercicesInput = {
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Poids_Serie1?: IntFieldUpdateOperationsInput | number
    Poids_Serie2?: IntFieldUpdateOperationsInput | number
    Poids_Serie3?: IntFieldUpdateOperationsInput | number
    Poids_serie4?: IntFieldUpdateOperationsInput | number
    Repetitions?: IntFieldUpdateOperationsInput | number
    Note?: StringFieldUpdateOperationsInput | string
    Serie?: IntFieldUpdateOperationsInput | number
    Utilisateur?: UtilisateurUpdateOneRequiredWithoutHistorique_SportNestedInput
  }

  export type Historique_SportUncheckedUpdateWithoutExercicesInput = {
    Historique_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Poids_Serie1?: IntFieldUpdateOperationsInput | number
    Poids_Serie2?: IntFieldUpdateOperationsInput | number
    Poids_Serie3?: IntFieldUpdateOperationsInput | number
    Poids_serie4?: IntFieldUpdateOperationsInput | number
    Repetitions?: IntFieldUpdateOperationsInput | number
    Note?: StringFieldUpdateOperationsInput | string
    Serie?: IntFieldUpdateOperationsInput | number
  }

  export type Historique_SportUncheckedUpdateManyWithoutExercicesInput = {
    Historique_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Poids_Serie1?: IntFieldUpdateOperationsInput | number
    Poids_Serie2?: IntFieldUpdateOperationsInput | number
    Poids_Serie3?: IntFieldUpdateOperationsInput | number
    Poids_serie4?: IntFieldUpdateOperationsInput | number
    Repetitions?: IntFieldUpdateOperationsInput | number
    Note?: StringFieldUpdateOperationsInput | string
    Serie?: IntFieldUpdateOperationsInput | number
  }

  export type SeancesUpdateWithoutExercices_Seances_Exercice1_idToExercicesInput = {
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
    Exercices_Seances_Exercice2_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice2_idToExercicesNestedInput
    Exercices_Seances_Exercice3_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice3_idToExercicesNestedInput
    Exercices_Seances_Exercice4_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice4_idToExercicesNestedInput
    Sport?: SportUpdateManyWithoutSeancesNestedInput
  }

  export type SeancesUncheckedUpdateWithoutExercices_Seances_Exercice1_idToExercicesInput = {
    Seance_id?: IntFieldUpdateOperationsInput | number
    Exercice2_id?: IntFieldUpdateOperationsInput | number
    Exercice3_id?: IntFieldUpdateOperationsInput | number
    Exercice4_id?: IntFieldUpdateOperationsInput | number
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
    Sport?: SportUncheckedUpdateManyWithoutSeancesNestedInput
  }

  export type SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice1_idToExercicesInput = {
    Seance_id?: IntFieldUpdateOperationsInput | number
    Exercice2_id?: IntFieldUpdateOperationsInput | number
    Exercice3_id?: IntFieldUpdateOperationsInput | number
    Exercice4_id?: IntFieldUpdateOperationsInput | number
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
  }

  export type SeancesUpdateWithoutExercices_Seances_Exercice2_idToExercicesInput = {
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
    Exercices_Seances_Exercice1_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice1_idToExercicesNestedInput
    Exercices_Seances_Exercice3_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice3_idToExercicesNestedInput
    Exercices_Seances_Exercice4_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice4_idToExercicesNestedInput
    Sport?: SportUpdateManyWithoutSeancesNestedInput
  }

  export type SeancesUncheckedUpdateWithoutExercices_Seances_Exercice2_idToExercicesInput = {
    Seance_id?: IntFieldUpdateOperationsInput | number
    Exercice1_id?: IntFieldUpdateOperationsInput | number
    Exercice3_id?: IntFieldUpdateOperationsInput | number
    Exercice4_id?: IntFieldUpdateOperationsInput | number
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
    Sport?: SportUncheckedUpdateManyWithoutSeancesNestedInput
  }

  export type SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice2_idToExercicesInput = {
    Seance_id?: IntFieldUpdateOperationsInput | number
    Exercice1_id?: IntFieldUpdateOperationsInput | number
    Exercice3_id?: IntFieldUpdateOperationsInput | number
    Exercice4_id?: IntFieldUpdateOperationsInput | number
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
  }

  export type SeancesUpdateWithoutExercices_Seances_Exercice3_idToExercicesInput = {
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
    Exercices_Seances_Exercice1_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice1_idToExercicesNestedInput
    Exercices_Seances_Exercice2_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice2_idToExercicesNestedInput
    Exercices_Seances_Exercice4_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice4_idToExercicesNestedInput
    Sport?: SportUpdateManyWithoutSeancesNestedInput
  }

  export type SeancesUncheckedUpdateWithoutExercices_Seances_Exercice3_idToExercicesInput = {
    Seance_id?: IntFieldUpdateOperationsInput | number
    Exercice1_id?: IntFieldUpdateOperationsInput | number
    Exercice2_id?: IntFieldUpdateOperationsInput | number
    Exercice4_id?: IntFieldUpdateOperationsInput | number
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
    Sport?: SportUncheckedUpdateManyWithoutSeancesNestedInput
  }

  export type SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice3_idToExercicesInput = {
    Seance_id?: IntFieldUpdateOperationsInput | number
    Exercice1_id?: IntFieldUpdateOperationsInput | number
    Exercice2_id?: IntFieldUpdateOperationsInput | number
    Exercice4_id?: IntFieldUpdateOperationsInput | number
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
  }

  export type SeancesUpdateWithoutExercices_Seances_Exercice4_idToExercicesInput = {
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
    Exercices_Seances_Exercice1_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice1_idToExercicesNestedInput
    Exercices_Seances_Exercice2_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice2_idToExercicesNestedInput
    Exercices_Seances_Exercice3_idToExercices?: ExercicesUpdateOneRequiredWithoutSeances_Seances_Exercice3_idToExercicesNestedInput
    Sport?: SportUpdateManyWithoutSeancesNestedInput
  }

  export type SeancesUncheckedUpdateWithoutExercices_Seances_Exercice4_idToExercicesInput = {
    Seance_id?: IntFieldUpdateOperationsInput | number
    Exercice1_id?: IntFieldUpdateOperationsInput | number
    Exercice2_id?: IntFieldUpdateOperationsInput | number
    Exercice3_id?: IntFieldUpdateOperationsInput | number
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
    Sport?: SportUncheckedUpdateManyWithoutSeancesNestedInput
  }

  export type SeancesUncheckedUpdateManyWithoutExercices_Seances_Exercice4_idToExercicesInput = {
    Seance_id?: IntFieldUpdateOperationsInput | number
    Exercice1_id?: IntFieldUpdateOperationsInput | number
    Exercice2_id?: IntFieldUpdateOperationsInput | number
    Exercice3_id?: IntFieldUpdateOperationsInput | number
    Nombre_Points_Seance?: IntFieldUpdateOperationsInput | number
    Commentaire?: StringFieldUpdateOperationsInput | string
    Nom_Seances?: StringFieldUpdateOperationsInput | string
  }

  export type Historique_SanteCreateManyObjectif_SanteInput = {
    Historique_Sante_id?: number
    Poids: number
    Date: Date | string
    Nombre_pas: number
    Sommeil: number
    Eau: number
  }

  export type SanteCreateManyObjectif_SanteInput = {
    Sante_id?: number
  }

  export type Historique_SanteUpdateWithoutObjectif_SanteInput = {
    Poids?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Nombre_pas?: IntFieldUpdateOperationsInput | number
    Sommeil?: IntFieldUpdateOperationsInput | number
    Eau?: IntFieldUpdateOperationsInput | number
  }

  export type Historique_SanteUncheckedUpdateWithoutObjectif_SanteInput = {
    Historique_Sante_id?: IntFieldUpdateOperationsInput | number
    Poids?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Nombre_pas?: IntFieldUpdateOperationsInput | number
    Sommeil?: IntFieldUpdateOperationsInput | number
    Eau?: IntFieldUpdateOperationsInput | number
  }

  export type Historique_SanteUncheckedUpdateManyWithoutObjectif_SanteInput = {
    Historique_Sante_id?: IntFieldUpdateOperationsInput | number
    Poids?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Nombre_pas?: IntFieldUpdateOperationsInput | number
    Sommeil?: IntFieldUpdateOperationsInput | number
    Eau?: IntFieldUpdateOperationsInput | number
  }

  export type SanteUpdateWithoutObjectif_SanteInput = {
    Utilisateur?: UtilisateurUpdateManyWithoutSanteNestedInput
  }

  export type SanteUncheckedUpdateWithoutObjectif_SanteInput = {
    Sante_id?: IntFieldUpdateOperationsInput | number
    Utilisateur?: UtilisateurUncheckedUpdateManyWithoutSanteNestedInput
  }

  export type SanteUncheckedUpdateManyWithoutObjectif_SanteInput = {
    Sante_id?: IntFieldUpdateOperationsInput | number
  }

  export type AlimentCreateManyRepas_Aliment_Repas_idToRepasInput = {
    Aliment_id?: number
    Aliment_Type: string
  }

  export type AlimentUpdateWithoutRepas_Aliment_Repas_idToRepasInput = {
    Aliment_Type?: StringFieldUpdateOperationsInput | string
    Aliments_indesirable?: Aliments_indesirableUpdateManyWithoutAlimentNestedInput
    Repas_Repas_Aliment_idToAliment?: RepasUpdateManyWithoutAliment_Repas_Aliment_idToAlimentNestedInput
  }

  export type AlimentUncheckedUpdateWithoutRepas_Aliment_Repas_idToRepasInput = {
    Aliment_id?: IntFieldUpdateOperationsInput | number
    Aliment_Type?: StringFieldUpdateOperationsInput | string
    Aliments_indesirable?: Aliments_indesirableUncheckedUpdateManyWithoutAlimentNestedInput
    Repas_Repas_Aliment_idToAliment?: RepasUncheckedUpdateManyWithoutAliment_Repas_Aliment_idToAlimentNestedInput
  }

  export type AlimentUncheckedUpdateManyWithoutRepas_Aliment_Repas_idToRepasInput = {
    Aliment_id?: IntFieldUpdateOperationsInput | number
    Aliment_Type?: StringFieldUpdateOperationsInput | string
  }

  export type UtilisateurCreateManySanteInput = {
    Utilisateur_id?: number
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Objectif_Sport_id: number
    Objectif_Alimentaire_id: number
  }

  export type UtilisateurUpdateWithoutSanteInput = {
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Historique_Sport?: Historique_SportUpdateManyWithoutUtilisateurNestedInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput
    Sport_Utilisateur_Objectif_Sport_idToSport?: SportUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Sport_idToSportNestedInput
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation?: AlimentationUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutSanteInput = {
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Objectif_Sport_id?: IntFieldUpdateOperationsInput | number
    Objectif_Alimentaire_id?: IntFieldUpdateOperationsInput | number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUncheckedUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Historique_Sport?: Historique_SportUncheckedUpdateManyWithoutUtilisateurNestedInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUncheckedUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateManyWithoutSanteInput = {
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Objectif_Sport_id?: IntFieldUpdateOperationsInput | number
    Objectif_Alimentaire_id?: IntFieldUpdateOperationsInput | number
  }

  export type SportCreateManySeancesInput = {
    Sport_id?: number
    Niveau_Sport: string
    Objectif_Sport: number
    Utilisateur_id: number
  }

  export type SportUpdateWithoutSeancesInput = {
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Objectif_Sport?: IntFieldUpdateOperationsInput | number
    Utilisateur_Sport_Utilisateur_idToUtilisateur?: UtilisateurUpdateOneRequiredWithoutSport_Sport_Utilisateur_idToUtilisateurNestedInput
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurUpdateManyWithoutSport_Utilisateur_Objectif_Sport_idToSportNestedInput
  }

  export type SportUncheckedUpdateWithoutSeancesInput = {
    Sport_id?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Objectif_Sport?: IntFieldUpdateOperationsInput | number
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurUncheckedUpdateManyWithoutSport_Utilisateur_Objectif_Sport_idToSportNestedInput
  }

  export type SportUncheckedUpdateManyWithoutSeancesInput = {
    Sport_id?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Objectif_Sport?: IntFieldUpdateOperationsInput | number
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
  }

  export type UtilisateurCreateManySport_Utilisateur_Objectif_Sport_idToSportInput = {
    Utilisateur_id?: number
    Prenom: string
    Nom: string
    Email: string
    Mot_Passe: string
    Date_Naissance: Date | string
    Date_Creation_Inscription: Date | string
    Sexe: string
    Poids: number
    Taille: number
    Niveau_Sport: string
    Regime_Alimentaire: string
    Objectif_Sante_id: number
    Objectif_Alimentaire_id: number
  }

  export type UtilisateurUpdateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput = {
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Historique_Sport?: Historique_SportUpdateManyWithoutUtilisateurNestedInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput
    Sante?: SanteUpdateOneRequiredWithoutUtilisateurNestedInput
    Alimentation_Utilisateur_Objectif_Alimentaire_idToAlimentation?: AlimentationUpdateOneRequiredWithoutUtilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutSport_Utilisateur_Objectif_Sport_idToSportInput = {
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Alimentaire_id?: IntFieldUpdateOperationsInput | number
    Alimentation_Alimentation_Utilisateur_idToUtilisateur?: AlimentationUncheckedUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurNestedInput
    Historique_Sport?: Historique_SportUncheckedUpdateManyWithoutUtilisateurNestedInput
    Sport_Sport_Utilisateur_idToUtilisateur?: SportUncheckedUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateManyWithoutSport_Utilisateur_Objectif_Sport_idToSportInput = {
    Utilisateur_id?: IntFieldUpdateOperationsInput | number
    Prenom?: StringFieldUpdateOperationsInput | string
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Mot_Passe?: StringFieldUpdateOperationsInput | string
    Date_Naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    Date_Creation_Inscription?: DateTimeFieldUpdateOperationsInput | Date | string
    Sexe?: StringFieldUpdateOperationsInput | string
    Poids?: IntFieldUpdateOperationsInput | number
    Taille?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Regime_Alimentaire?: StringFieldUpdateOperationsInput | string
    Objectif_Sante_id?: IntFieldUpdateOperationsInput | number
    Objectif_Alimentaire_id?: IntFieldUpdateOperationsInput | number
  }

  export type AlimentationCreateManyUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput = {
    Alimentation_id?: number
    Maintien_Calorique: number
    Objectif_Calorique: number
    Objectif_Proteines: number
    Objectif_Glucides: number
    Objectif_Lipides: number
  }

  export type Historique_SportCreateManyUtilisateurInput = {
    Historique_id?: number
    Exercice_id: number
    Date: Date | string
    Poids_Serie1: number
    Poids_Serie2: number
    Poids_Serie3: number
    Poids_serie4: number
    Repetitions: number
    Note: string
    Serie: number
  }

  export type SportCreateManyUtilisateur_Sport_Utilisateur_idToUtilisateurInput = {
    Sport_id?: number
    Niveau_Sport: string
    Objectif_Sport: number
    Seance_id: number
  }

  export type AlimentationUpdateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput = {
    Maintien_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Proteines?: IntFieldUpdateOperationsInput | number
    Objectif_Glucides?: IntFieldUpdateOperationsInput | number
    Objectif_Lipides?: IntFieldUpdateOperationsInput | number
    Repas?: RepasUpdateManyWithoutAlimentationNestedInput
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurUpdateManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput
  }

  export type AlimentationUncheckedUpdateWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput = {
    Alimentation_id?: IntFieldUpdateOperationsInput | number
    Maintien_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Proteines?: IntFieldUpdateOperationsInput | number
    Objectif_Glucides?: IntFieldUpdateOperationsInput | number
    Objectif_Lipides?: IntFieldUpdateOperationsInput | number
    Repas?: RepasUncheckedUpdateManyWithoutAlimentationNestedInput
    Utilisateur_Utilisateur_Objectif_Alimentaire_idToAlimentation?: UtilisateurUncheckedUpdateManyWithoutAlimentation_Utilisateur_Objectif_Alimentaire_idToAlimentationNestedInput
  }

  export type AlimentationUncheckedUpdateManyWithoutUtilisateur_Alimentation_Utilisateur_idToUtilisateurInput = {
    Alimentation_id?: IntFieldUpdateOperationsInput | number
    Maintien_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Calorique?: IntFieldUpdateOperationsInput | number
    Objectif_Proteines?: IntFieldUpdateOperationsInput | number
    Objectif_Glucides?: IntFieldUpdateOperationsInput | number
    Objectif_Lipides?: IntFieldUpdateOperationsInput | number
  }

  export type Historique_SportUpdateWithoutUtilisateurInput = {
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Poids_Serie1?: IntFieldUpdateOperationsInput | number
    Poids_Serie2?: IntFieldUpdateOperationsInput | number
    Poids_Serie3?: IntFieldUpdateOperationsInput | number
    Poids_serie4?: IntFieldUpdateOperationsInput | number
    Repetitions?: IntFieldUpdateOperationsInput | number
    Note?: StringFieldUpdateOperationsInput | string
    Serie?: IntFieldUpdateOperationsInput | number
    Exercices?: ExercicesUpdateOneRequiredWithoutHistorique_SportNestedInput
  }

  export type Historique_SportUncheckedUpdateWithoutUtilisateurInput = {
    Historique_id?: IntFieldUpdateOperationsInput | number
    Exercice_id?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Poids_Serie1?: IntFieldUpdateOperationsInput | number
    Poids_Serie2?: IntFieldUpdateOperationsInput | number
    Poids_Serie3?: IntFieldUpdateOperationsInput | number
    Poids_serie4?: IntFieldUpdateOperationsInput | number
    Repetitions?: IntFieldUpdateOperationsInput | number
    Note?: StringFieldUpdateOperationsInput | string
    Serie?: IntFieldUpdateOperationsInput | number
  }

  export type Historique_SportUncheckedUpdateManyWithoutUtilisateurInput = {
    Historique_id?: IntFieldUpdateOperationsInput | number
    Exercice_id?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    Poids_Serie1?: IntFieldUpdateOperationsInput | number
    Poids_Serie2?: IntFieldUpdateOperationsInput | number
    Poids_Serie3?: IntFieldUpdateOperationsInput | number
    Poids_serie4?: IntFieldUpdateOperationsInput | number
    Repetitions?: IntFieldUpdateOperationsInput | number
    Note?: StringFieldUpdateOperationsInput | string
    Serie?: IntFieldUpdateOperationsInput | number
  }

  export type SportUpdateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput = {
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Objectif_Sport?: IntFieldUpdateOperationsInput | number
    Seances?: SeancesUpdateOneRequiredWithoutSportNestedInput
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurUpdateManyWithoutSport_Utilisateur_Objectif_Sport_idToSportNestedInput
  }

  export type SportUncheckedUpdateWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput = {
    Sport_id?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Objectif_Sport?: IntFieldUpdateOperationsInput | number
    Seance_id?: IntFieldUpdateOperationsInput | number
    Utilisateur_Utilisateur_Objectif_Sport_idToSport?: UtilisateurUncheckedUpdateManyWithoutSport_Utilisateur_Objectif_Sport_idToSportNestedInput
  }

  export type SportUncheckedUpdateManyWithoutUtilisateur_Sport_Utilisateur_idToUtilisateurInput = {
    Sport_id?: IntFieldUpdateOperationsInput | number
    Niveau_Sport?: StringFieldUpdateOperationsInput | string
    Objectif_Sport?: IntFieldUpdateOperationsInput | number
    Seance_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AlimentCountOutputTypeDefaultArgs instead
     */
    export type AlimentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlimentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlimentationCountOutputTypeDefaultArgs instead
     */
    export type AlimentationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlimentationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExercicesCountOutputTypeDefaultArgs instead
     */
    export type ExercicesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExercicesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Objectif_SanteCountOutputTypeDefaultArgs instead
     */
    export type Objectif_SanteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Objectif_SanteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RepasCountOutputTypeDefaultArgs instead
     */
    export type RepasCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RepasCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SanteCountOutputTypeDefaultArgs instead
     */
    export type SanteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SanteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeancesCountOutputTypeDefaultArgs instead
     */
    export type SeancesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeancesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SportCountOutputTypeDefaultArgs instead
     */
    export type SportCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SportCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UtilisateurCountOutputTypeDefaultArgs instead
     */
    export type UtilisateurCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilisateurCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlimentDefaultArgs instead
     */
    export type AlimentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlimentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlimentationDefaultArgs instead
     */
    export type AlimentationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlimentationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Aliments_indesirableDefaultArgs instead
     */
    export type Aliments_indesirableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Aliments_indesirableDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExercicesDefaultArgs instead
     */
    export type ExercicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExercicesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Historique_SanteDefaultArgs instead
     */
    export type Historique_SanteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Historique_SanteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Historique_SportDefaultArgs instead
     */
    export type Historique_SportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Historique_SportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Objectif_SanteDefaultArgs instead
     */
    export type Objectif_SanteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Objectif_SanteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RepasDefaultArgs instead
     */
    export type RepasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RepasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SanteDefaultArgs instead
     */
    export type SanteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SanteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeancesDefaultArgs instead
     */
    export type SeancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeancesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SportDefaultArgs instead
     */
    export type SportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UtilisateurDefaultArgs instead
     */
    export type UtilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilisateurDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}